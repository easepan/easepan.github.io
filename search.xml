<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[部署Python自动备份MySQL数据库脚本]]></title>
      <url>/2018/03/27/%E9%83%A8%E7%BD%B2Python%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<h4 id="1-安装扩展源EPEL"><a href="#1-安装扩展源EPEL" class="headerlink" title="1. 安装扩展源EPEL"></a>1. 安装扩展源EPEL</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install epel-release</div></pre></td></tr></table></figure>
<h4 id="2-安装PIP"><a href="#2-安装PIP" class="headerlink" title="2. 安装PIP"></a>2. 安装PIP</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install python-pip</div></pre></td></tr></table></figure>
<h4 id="3-安装Python第三方扩展库"><a href="#3-安装Python第三方扩展库" class="headerlink" title="3. 安装Python第三方扩展库"></a>3. 安装Python第三方扩展库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install apscheduler</div></pre></td></tr></table></figure>
<h4 id="4-上传脚本"><a href="#4-上传脚本" class="headerlink" title="4. 上传脚本"></a>4. 上传脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pscp local_dir user@ip:/remote_dir</div><div class="line"><span class="meta">#</span><span class="bash"> 例：</span></div><div class="line">pscp C:\Users\pantao\Documents\Projects\python\auto_backup\mysql.py root@192.168.1.1:/root/auto_backup</div><div class="line">pscp C:\Users\pantao\Documents\Projects\python\auto_backup\config.json root@192.168.1.1:/root/auto_backup</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="external">Putty下载地址（pscp命令）</a><br><a href="https://github.com/zhazhapan/auto_backup" target="_blank" rel="external">Python自动化脚本项目地址</a></p>
</blockquote>
<h4 id="5-修改配置文件-config-json"><a href="#5-修改配置文件-config-json" class="headerlink" title="5. 修改配置文件 config.json"></a>5. 修改配置文件 <code>config.json</code></h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"mysql"</span>: &#123;</div><div class="line">        <span class="attr">"user"</span>: <span class="string">"root"</span>,</div><div class="line">        <span class="attr">"password"</span>: <span class="string">"root"</span>,</div><div class="line">        <span class="attr">"host"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">        <span class="attr">"database"</span>: <span class="string">"sego"</span>,</div><div class="line">        <span class="attr">"path"</span>: <span class="string">"/root/auto_backup/dumps"</span>,</div><div class="line">        <span class="attr">"dateFormat"</span>: <span class="string">"%Y-%m-%d-%H-%M-%S"</span>,</div><div class="line">        <span class="attr">"expired"</span>: <span class="string">"60*60*24*7"</span>,</div><div class="line">        <span class="attr">"schedulerParams"</span>: &#123;</div><div class="line">            <span class="attr">"cron"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">"dayOfWeek"</span>: <span class="string">"0-6"</span>,</div><div class="line">            <span class="attr">"hour"</span>: <span class="number">0</span>,</div><div class="line">            <span class="attr">"minute"</span>: <span class="number">0</span>,</div><div class="line">            <span class="attr">"seconds"</span>: <span class="number">10</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-启动脚本，使脚本在后台运行（不受终端影响）"><a href="#6-启动脚本，使脚本在后台运行（不受终端影响）" class="headerlink" title="6. 启动脚本，使脚本在后台运行（不受终端影响）"></a>6. 启动脚本，使脚本在后台运行（不受终端影响）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /root/auto_backup</div><div class="line">setsid python mysql.py</div><div class="line"><span class="meta">#</span><span class="bash"> 或者</span></div><div class="line">nohup python mysql.py &amp;</div></pre></td></tr></table></figure>
<h4 id="7-检测脚本是否运行"><a href="#7-检测脚本是否运行" class="headerlink" title="7. 检测脚本是否运行"></a>7. 检测脚本是否运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep mysql.py</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> python linux mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Centos搭建Node.js环境]]></title>
      <url>/2018/01/12/Centos%E6%90%AD%E5%BB%BANode-js%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>[toc]</p>
<h3 id="安装Node-js环境"><a href="#安装Node-js环境" class="headerlink" title="安装Node.js环境"></a>安装Node.js环境</h3><p><strong>1. 下载Node.js</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://nodejs.org/dist/latest-v9.x/node-v9.4.0-linux-x64.tar.xz</div></pre></td></tr></table></figure>
<blockquote>
<p>这里使用的最新的v9.4.0版本，需要安装其他版本可前往 <a href="https://nodejs.org/dist/" target="_blank" rel="external">https://nodejs.org/dist/</a> 选择对应的版本即可。</p>
</blockquote>
<p><strong>2. 解压</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xvJf node-v9.4.0-linux-x64.tar.xz</div></pre></td></tr></table></figure>
<p><strong>3. 移动到 /usr/local 目录</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv node-v9.4.0-linux-x64 /usr/local/node-v9</div></pre></td></tr></table></figure>
<p><strong>4. 配置 node 软链接到 /bin 目录</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/local/node-v9/bin/node /bin/node</div></pre></td></tr></table></figure>
<h3 id="配置和使用-npm"><a href="#配置和使用-npm" class="headerlink" title="配置和使用 npm"></a>配置和使用 npm</h3><p><strong>1. 配置 npm</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/local/node-v9/bin/npm /bin/npm</div></pre></td></tr></table></figure>
<p><strong>2. 配置环境变量</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo 'export PATH=/usr/local/node-v9/bin:$PATH' &gt;&gt; /etc/profile</div><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<p><strong>3. 使用npm</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install forever -g</div></pre></td></tr></table></figure>
<p><strong>4. 大功告成</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> centos nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安装使用Lombok插件]]></title>
      <url>/2017/12/15/%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Lombok%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Lombok是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的 Java 代码的工具，简单来说，比如我们新建了一个类，然后在其中写了几个字段，然后通常情况下我们需要手动去建立getter和setter方法啊，构造函数之类的，lombok的作用就是为了省去我们手动创建这些代码的麻烦，它能够在我们编译源码的时候自动帮我们生成这些方法。</p>
<p> Lombok能够达到的效果就是在源码中不需要写一些通用的方法，但是在编译生成的字节码文件中会帮我们生成这些方法，这就是Lombok的神奇作用。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><p><a href="https://projectlombok.org/download" target="_blank" rel="external">下载jar包</a></p>
</li>
<li><p>双击运行（或运行命令<code>java -jar lombok.jar</code>）</p>
</li>
<li><p>安装（安装后需要重启IDE）</p>
<p><img src="http://img.blog.csdn.net/20171215095845601?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="我是图片"></p>
</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li><p>添加Maven依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;$&#123;version&#125;&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><a href="http://jnb.ociweb.com/jnb/jnbJan2010.html" target="_blank" rel="external">官网教程</a></p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个人封装的Java工具包]]></title>
      <url>/2017/11/30/%E4%B8%AA%E4%BA%BA%E5%B0%81%E8%A3%85%E7%9A%84Java%E5%B7%A5%E5%85%B7%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>封装一些常用的功能（JDK至少需要1.8），持续更新</p>
<p><strong>使用Maven</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazhapan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>或手动导入：</strong>    <a href="http://oq3iwfipo.bkt.clouddn.com/tools/zhazhapan/util-1.0.5.jar" target="_blank" rel="external">点我下载</a></p>
<blockquote>
<p><a href="https://github.com/zhazhapan/util" target="_blank" rel="external"><strong>GitHub地址</strong></a><br><a href="https://gitee.com/zhazhapan_admin/util" target="_blank" rel="external"><strong>Gitee地址</strong></a></p>
</blockquote>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p><strong>1. JSON快速解析，基于fastjson</strong></p>
<p><em>使用</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 导包</span></div><div class="line"><span class="keyword">import</span> com.zhazhapan.config.JsonParser;</div><div class="line"></div><div class="line">String json = <span class="string">"&#123;key1:test,key2:&#123;child1:node1,child2:node2&#125;,key3:[&#123;fast:json1&#125;,&#123;fast:json2&#125;],key4:[arr1,arr2]&#125;"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 2. 新建一个解析对象</span></div><div class="line"></div><div class="line"><span class="comment">// 2.1 使用json字符串</span></div><div class="line">JsonParser jsonParser = <span class="keyword">new</span> JsonParser(json, <span class="keyword">false</span>);</div><div class="line"><span class="comment">// 2.2 或使用文件路径（可能抛出IO异常）</span></div><div class="line">JsonParser jsonParser = <span class="keyword">new</span> JsonParser(<span class="string">"/Users/pantao/Desktop/test.json"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 3. 愉快的使用</span></div><div class="line">String str = jsonParser.getString(<span class="string">"key3[1].fast"</span>);</div><div class="line">String str1 = jsonParser.getString(<span class="string">"key4[1]"</span>);</div><div class="line">JSONObject jsonObject = jsonParser.getObject(<span class="string">"key3[0]"</span>);</div><div class="line">JSONArray jsonArray = jsonParser.getArray(<span class="string">"key4"</span>);</div><div class="line"><span class="comment">// 或使用JSONPath路径语法</span></div><div class="line">Object object = jsonParser.eval(<span class="string">"$.key2.child1"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 4. 修改指定路径值</span></div><div class="line">jsonParser.set(<span class="string">"key1"</span>, <span class="string">"test_set_value"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 5. 删除指定路径值</span></div><div class="line">jsonParser.remove(<span class="string">"key1"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 6. 指定路径是否包含某个值</span></div><div class="line"><span class="keyword">boolean</span> b = jsonParser.containsValue(<span class="string">"key1"</span>, <span class="string">"test"</span>);</div></pre></td></tr></table></figure>
<p>备注：<a href="https://github.com/alibaba/fastjson/wiki/JSONPath" target="_blank" rel="external">fastjson jsonpath路径语法</a></p>
<p><strong>2. 简单计算器</strong></p>
<p><em>使用</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 导包</span></div><div class="line"><span class="keyword">import</span> com.zhazhapan.util.Calculator;</div><div class="line"></div><div class="line"><span class="comment">// 2. 设置（如果没有设置将使用默认的精度）计算精度（即保存多少位小数）</span></div><div class="line">Calculator.setPrecision(<span class="number">5</span>);</div><div class="line"></div><div class="line"><span class="comment">// 3. 计算（有可能抛出计算式不合法的异常）</span></div><div class="line">String formula = <span class="string">"(23-9*7)/22+2(35-45+56/(12-9+4*(22/10-2)))"</span>;</div><div class="line">BigDecimal bd = Calculator.calculate(formula);</div><div class="line"><span class="keyword">double</span> res = db.doubleValue();</div></pre></td></tr></table></figure>
<p><strong>3. 网络文件下载</strong></p>
<p><em>使用</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 导包</span></div><div class="line"><span class="keyword">import</span> com.zhazhapan.util.Downloader;</div><div class="line"></div><div class="line"><span class="comment">// 2. 下载</span></div><div class="line">String storagePath = <span class="string">"/Users/pantao/Desktop"</span>;</div><div class="line">Downloader.download(storagePath, <span class="string">"http://oq3iwfipo.bkt.clouddn.com/tools/zhazhapan/util.jar"</span>);</div></pre></td></tr></table></figure>
<p><strong>4. 简单的读写文件</strong></p>
<p><em>使用</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 导包</span></div><div class="line"><span class="keyword">import</span> com.zhazhapan.util.FileExecutor;</div><div class="line"></div><div class="line"><span class="comment">// 2. 写文件（可能抛出IO异常）</span></div><div class="line">String write = <span class="string">"write something"</span>;</div><div class="line">FileExecutor.saveFile(<span class="string">"/Users/pantao/Desktop/test.txt"</span>, write, <span class="keyword">false</span>);</div><div class="line"></div><div class="line"><span class="comment">// 3. 读文件（可能抛出IO异常）</span></div><div class="line">String read = FileExecutor.readFile(<span class="string">"/Users/pantao/Desktop/test.txt"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 4. 批量复制文件夹</span></div><div class="line">FileExecutor.copyDirectories(<span class="keyword">new</span> String[] &#123; <span class="string">"/Users/pantao/Desktop/test"</span> &#125;, <span class="string">"/Users/pantao/Desktop/new"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 5. 批量复制文件</span></div><div class="line">FileExecutor.copyFiles(<span class="keyword">new</span> String[] &#123; <span class="string">"/Users/pantao/Desktop/qiniu.jar"</span> &#125;, <span class="string">"/Users/pantao/Desktop/test"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 6. 批量重命名文件</span></div><div class="line">String[] files = <span class="keyword">new</span> String[] &#123; <span class="string">"/Users/pantao/Desktop/test/Dump20171220_3.sql"</span>, <span class="string">"/Users/pantao/Desktop/test/Dump20171220_4.sql"</span> &#125;;</div><div class="line">FileExecutor.renameFiles(files, <span class="keyword">new</span> String[] &#123; <span class="string">"test_rename_1"</span>, <span class="string">"test_rename_2.txt"</span> &#125;);</div><div class="line"></div><div class="line"><span class="comment">// 7. 拆分文件，通过拆分点拆分</span></div><div class="line">FileExecutor.splitFile(<span class="string">"/Users/pantao/Desktop/test/Dump20171220.sql"</span>, <span class="keyword">new</span> <span class="keyword">long</span>[] &#123; <span class="number">1000</span>, <span class="number">2000</span>, <span class="number">3000</span> &#125;);</div><div class="line"></div><div class="line"><span class="comment">// 8. 合并文件</span></div><div class="line">String[] files = <span class="keyword">new</span> String[] &#123; <span class="string">"/Users/pantao/Desktop/test/Dump20171220_1.sql"</span>, <span class="string">"/Users/pantao/Desktop/test/Dump20171220_2.sql"</span> &#125;;</div><div class="line">FileExecutor.mergeFiles(files, <span class="string">"/Users/pantao/Desktop/test/test_merge.sql"</span>, <span class="string">""</span>);</div><div class="line"></div><div class="line"><span class="comment">// 9. 创建文件（如果存在则删除）</span></div><div class="line">FileExecutor.createNewFile(<span class="string">"test.txt"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 10. 删除文件或文件夹（递归删除）</span></div><div class="line">FileExecutor.deleteFile(<span class="string">"/Users/pantao/Desktop/test/test_merge.sql"</span>);</div></pre></td></tr></table></figure>
<p><strong>5. 简单的线程池</strong></p>
<p><em>使用</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 导包</span></div><div class="line"><span class="keyword">import</span> com.zhazhapan.util.ThreadPool;</div><div class="line"></div><div class="line"><span class="comment">// 2. 初始化线程池</span></div><div class="line"><span class="comment">// 2.1 方式一</span></div><div class="line">ThreadPool.setCorePoolSize(<span class="number">1</span>);</div><div class="line">ThreadPool.setMaximumPoolSize(<span class="number">5</span>);</div><div class="line">ThreadPool.setKeepAliveTime(<span class="number">100</span>);</div><div class="line">ThreadPool.setTimeUnit(TimeUnit.MILLISECONDS);</div><div class="line">ThreadPool.init();</div><div class="line"><span class="comment">// 2.2 方式二</span></div><div class="line">ThreadPool.init(<span class="number">1</span>, <span class="number">5</span>, <span class="number">100</span>, TimeUnit.MILLISECONDS);</div><div class="line"></div><div class="line"><span class="comment">// 3. 使用线程池</span></div><div class="line">ThreadPool.executor.submit(() -&gt; &#123;</div><div class="line">	<span class="comment">//do somthing here</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 4. 或者新建线程池</span></div><div class="line">ThreadPool threadPool = <span class="keyword">new</span> ThreadPool(<span class="number">1</span>, <span class="number">5</span>, <span class="number">100</span>, TimeUnit.MILLISECONDS);</div><div class="line"></div><div class="line"><span class="comment">// 4.1 使用新建的线程池</span></div><div class="line">threadPool.newExecutor.submit(() -&gt; &#123;</div><div class="line">	<span class="comment">//do somthing here</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>6. 简单的加密与解密</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 提供一些Java常用的加密（包括md5，base64,sha等加密）</span></div><div class="line"><span class="keyword">import</span> com.zhazhapan.util.decryption.JavaEncrypt;</div><div class="line"></div><div class="line"><span class="comment">// 如何使用</span></div><div class="line">String code = JavaEncrypt.md5(<span class="string">"this is a md5 encrypt method"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 主要是base64解密</span></div><div class="line"><span class="keyword">import</span> com.zhazhapan.util.decryption.JavaDecrypt;</div><div class="line"></div><div class="line"><span class="comment">// 异或加密和ascii加密</span></div><div class="line"><span class="keyword">import</span> com.zhazhapan.util.decryption.SimpleEncryt;</div><div class="line"></div><div class="line"><span class="comment">// 如何使用</span></div><div class="line">String code = SimpleEncryt.ascii(<span class="string">"simple encrypt"</span>, <span class="string">"key"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 异或解密和ascii解密</span></div><div class="line"><span class="keyword">import</span> com.zhazhapan.util.decryption.SimpleDecrypt;</div></pre></td></tr></table></figure>
<p><strong>7. 弹窗（使用JavaFX，JDK最低要求1.8）</strong></p>
<p><em>使用</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 导入</span></div><div class="line"><span class="keyword">import</span> com.zhazhapan.util.dialog.Alerts;</div><div class="line"></div><div class="line"><span class="comment">// 2. 弹窗并接收返回的信息</span></div><div class="line">Optional&lt;ButtonType&gt; result = Alerts.showConfirmation(<span class="string">"title"</span>, <span class="string">"some information"</span>);</div><div class="line"><span class="keyword">if</span> (result.get() == ButtonType.OK) &#123;</div><div class="line">	<span class="comment">// do something here</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="comment">// do something here</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 3. 其他类型的弹窗基本上跟上面的操作一样</span></div><div class="line"></div><div class="line"><span class="comment">// 4. 弹出输入框</span></div><div class="line"><span class="comment">// 4.1 导包</span></div><div class="line"><span class="keyword">import</span> com.zhazhapan.util.dialog.Dialogs;</div><div class="line"><span class="comment">// 4.2 弹出并接收返回的内容（如果用户点击取消将返回null）</span></div><div class="line">String msg = Dialogs.showInputDialog(<span class="string">"title"</span>, <span class="string">"header"</span>, <span class="string">"content"</span>, <span class="string">"default value"</span>);</div></pre></td></tr></table></figure>
<p><strong>8. <code>com.zhazhapan.util.Checker</code>类</strong></p>
<p><em>所有参数均不用考虑为null的情况，Checker会处理</em></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>简要说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>isSorted</td>
<td>检查数组是否是升序或降序</td>
</tr>
<tr>
<td>isDate</td>
<td>是否是日期格式</td>
</tr>
<tr>
<td>replace</td>
<td>替换字符串</td>
</tr>
<tr>
<td>isEmail</td>
<td>是否是邮箱格式</td>
</tr>
<tr>
<td>isDecimal</td>
<td>是否是数字（包括小数）格式</td>
</tr>
<tr>
<td>isNumber</td>
<td>是否是整数</td>
</tr>
<tr>
<td>isNull</td>
<td>对象是否为null</td>
</tr>
<tr>
<td>isNotNull</td>
<td>对象是否不为null</td>
</tr>
<tr>
<td>isNullOrEmpty</td>
<td>字符串是否为null或空</td>
</tr>
<tr>
<td>isNotEmpty</td>
<td>是否不为null且不为空</td>
</tr>
<tr>
<td>checkNull</td>
<td>检测字符串是否为null，如果是，返回空字符串，否则返回原字符串</td>
</tr>
<tr>
<td>isEmpty</td>
<td>列表或集合是否为空</td>
</tr>
<tr>
<td>isHyperLink</td>
<td>是否是超链接（URL）</td>
</tr>
<tr>
<td>checkDate</td>
<td>检测日期是否为null，如果是，返回当前日期，否则返回原日期</td>
</tr>
</tbody>
</table>
<p><strong>9. <code>com.zhazhapan.util.Formatter</code>类</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>简要说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>stringToInt</td>
<td>将字符串转换为Integer</td>
</tr>
<tr>
<td>formatSize</td>
<td>格式化文件大小为KB、MB、GB、TB格式</td>
</tr>
<tr>
<td>sizeToLong</td>
<td>将格式化后的文件大小转换为单位为B（字节）的long型</td>
</tr>
<tr>
<td>stringToDouble</td>
<td>字符串转换为Double</td>
</tr>
<tr>
<td>stringToLong</td>
<td>字符串转换为Long</td>
</tr>
<tr>
<td>customFormatDecimal</td>
<td>将Double转换为自定义格式的字符串</td>
</tr>
<tr>
<td>formatDecimal</td>
<td>将Double转换为默认格式（#0.00）的字符串</td>
</tr>
<tr>
<td>timeStampToString</td>
<td>将时间戳转换为“yyyy-MM-dd HH:mm:ss”格式的字符串</td>
</tr>
<tr>
<td>formatJson</td>
<td>将json文本转换为标准格式的json</td>
</tr>
<tr>
<td>dateToString</td>
<td>将日期转换为“yyyy-MM-dd”格式的字符串</td>
</tr>
<tr>
<td>datetimeToString</td>
<td>将日期转换为“yyyy-MM-dd HH:mm:ss”格式的字符串</td>
</tr>
<tr>
<td>getFileName</td>
<td>从路径（包括网络路径）中获取文件名</td>
</tr>
<tr>
<td>stringToFloat</td>
<td>将字符串转换为Float</td>
</tr>
<tr>
<td>stringToInteger</td>
<td>同stringToInt</td>
</tr>
<tr>
<td>stringToDate</td>
<td>将字符串转换为“yyyy-MM-dd”格式的日期</td>
</tr>
<tr>
<td>stringToLongTime</td>
<td>将字符串转换为“HH:mm:ss”格式的日期</td>
</tr>
<tr>
<td>stringToShortTime</td>
<td>将字符串转换为“HH:mm”格式的日期</td>
</tr>
<tr>
<td>stringToCustomDateTime</td>
<td>将字符串转换为自定义格式的日期</td>
</tr>
<tr>
<td>stringToDatetime</td>
<td>将字符串转换为“yyyy-MM-dd HH:mm:ss”格式的日期</td>
</tr>
<tr>
<td>toLocalDate</td>
<td>将日期转换为“yyyy年MM月dd日”格式的字符串</td>
</tr>
<tr>
<td>longTimeToString</td>
<td>将日期转换为“HH:mm:ss”格式的字符串</td>
</tr>
<tr>
<td>shortTimeToString</td>
<td>将日期转换为“HH:mm”格式的字符串</td>
</tr>
<tr>
<td>datetimeToCustomString</td>
<td>将日期转换为自定义格式的字符串</td>
</tr>
<tr>
<td>numberFormat</td>
<td>将数字格式化为指定长度的字符串（不足用0补齐）</td>
</tr>
<tr>
<td>localDateToDate</td>
<td>将java.time.LocalDate转换为java.util.Date</td>
</tr>
<tr>
<td>dateToLocalDate</td>
<td>将java.util.Date转换为java.time.LocalDate</td>
</tr>
</tbody>
</table>
<p><strong>10. <code>com.zhazhapan.util.Utils</code>类</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>简要说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>extractDouble</td>
<td>从字符串中提取数字并转换为Double</td>
</tr>
<tr>
<td>extractFloat</td>
<td>从字符串中提取数字并转换为Float</td>
</tr>
<tr>
<td>extractShort</td>
<td>从字符串中提取数字并转换为Short</td>
</tr>
<tr>
<td>extractLong</td>
<td>从字符串中提取数字并转换为Long</td>
</tr>
<tr>
<td>extractInt</td>
<td>从字符串中提取数字并转换为Integer</td>
</tr>
<tr>
<td>extractDigit</td>
<td>从字符串中提取出数字，包括最后一个“.”号</td>
</tr>
<tr>
<td>maxLengthString</td>
<td>返回多个字符串中长度最长的字符串</td>
</tr>
<tr>
<td>concatArrays</td>
<td>合并多个数组</td>
</tr>
<tr>
<td>getCurrentMonth()</td>
<td>获取当前月份</td>
</tr>
<tr>
<td>copyToClipboard</td>
<td>复制字符串至系统剪贴板</td>
</tr>
<tr>
<td>openLink</td>
<td>使用系统默认的浏览器打开超链接</td>
</tr>
<tr>
<td>openFile</td>
<td>使用系统默认的方式打开文件</td>
</tr>
<tr>
<td>getDay</td>
<td>获取日期</td>
</tr>
<tr>
<td>getMonth</td>
<td>获取月份</td>
</tr>
<tr>
<td>getYear</td>
<td>获取年份</td>
</tr>
<tr>
<td>getMaxValue</td>
<td>从多个数字中获取最大值</td>
</tr>
<tr>
<td>mergeSortedArrays</td>
<td>将两个已经排好序（同序）的数组合并一个有序数组</td>
</tr>
</tbody>
</table>
<p><strong>11. <code>com.zhazhapan.util.ArraySort</code>类</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>简要说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>heapSort</td>
<td>堆排序</td>
</tr>
<tr>
<td>mergeSort</td>
<td>归并排序</td>
</tr>
<tr>
<td>shellSort</td>
<td>希尔排序</td>
</tr>
<tr>
<td>selectSort</td>
<td>选择排序</td>
</tr>
<tr>
<td>quickSort</td>
<td>快速排序</td>
</tr>
<tr>
<td>insertSort</td>
<td>插入排序</td>
</tr>
<tr>
<td>bubbleSort</td>
<td>冒泡排序</td>
</tr>
</tbody>
</table>
<p><strong>12. <code>com.zhazhapan.util.DateUtils</code>类</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>简要说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>getWeekAsChinese</td>
<td>获取某个日期的星期，返回一个中文字符串</td>
</tr>
<tr>
<td>getWeek</td>
<td>获取某个日期的星期，返回一个整型</td>
</tr>
<tr>
<td>addHour</td>
<td>某个日期后推多少个小时</td>
</tr>
<tr>
<td>addMinute</td>
<td>某个日期后推多少个分钟</td>
</tr>
<tr>
<td>addSecond</td>
<td>某个日期后推多少个秒</td>
</tr>
<tr>
<td>addYear</td>
<td>某个日期后推多少个年</td>
</tr>
<tr>
<td>addMonth</td>
<td>某个日期后推多少个月</td>
</tr>
<tr>
<td>addDay</td>
<td>某个日期后推多少个天</td>
</tr>
</tbody>
</table>
<p><strong>13. 发送邮件</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 导包</span></div><div class="line"><span class="keyword">import</span> com.zhazhapan.util.MailSender;</div><div class="line"></div><div class="line"><span class="comment">// 如何使用，下面的key指的是开启了POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务，生成的授权码</span></div><div class="line">MailSender.config(<span class="string">"smtp.qq.com"</span>, <span class="string">"zhazhapan"</span>, <span class="string">"735817834@qq.com"</span>, <span class="string">"key"</span>);</div><div class="line">MailSender.sendMail(<span class="string">"tao@zhazhapan.com"</span>, <span class="string">"title"</span>, <span class="string">"this is a test email"</span>);</div></pre></td></tr></table></figure>
<p><strong>14. <code>com.zhazhapan.util.RandomUtils</code>类</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>简要说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>getRandomDouble</td>
<td>获取一个随机的双精度类型</td>
</tr>
<tr>
<td>getRandomInteger</td>
<td>获取一个随机的整型</td>
</tr>
<tr>
<td>getRandomColor</td>
<td>获取一个随机的颜色</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你知道哪些聊天机器人]]></title>
      <url>/2017/11/24/%E4%BD%A0%E7%9F%A5%E9%81%93%E5%93%AA%E4%BA%9B%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      <content type="html"><![CDATA[<p><strong>1. <a href="http://www.tuling123.com/" target="_blank" rel="external">图灵机器人</a></strong></p>
<ul>
<li><p><a href="http://www.tuling123.com/sso-web/register?ReturnURL=http%3A%2F%2Fwww.tuling123.com%2F" target="_blank" rel="external">注册</a></p>
</li>
<li><p><a href="http://www.tuling123.com/member/robot/index.jhtml" target="_blank" rel="external">创建机器人</a></p>
<p>  <img src="http://img.blog.csdn.net/20171124205935830?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
</li>
<li><p>设置信息</p>
<p>  <img src="http://img.blog.csdn.net/20171124210513538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
</li>
<li><p>帐号接入</p>
<p>  图灵机器人支持接入微信个人号、微信公众号和QQ号，但是微信个人号和QQ号都需要安装第三方插件。</p>
<p>  <img src="http://img.blog.csdn.net/20171124211052351?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
</li>
</ul>
<p>唯一的槽点可能就是免费帐号一天最多只能调用1000次，超过了就要收费。</p>
<p><strong>2. <a href="http://www.yige.ai/" target="_blank" rel="external">一个AI</a></strong></p>
<ul>
<li><p><a href="http://www.yige.ai/register" target="_blank" rel="external">注册</a></p>
<p>  注册之后，无需再手动创建机器人，只需要使用他的系统扩展即可，支持微信个人号和微信公众号，而且无需安装第三方插件，微信个人号是基于微信网页版API实现的。</p>
</li>
<li><p><a href="http://www.yige.ai/api-client/extension" target="_blank" rel="external">使用扩展</a></p>
<p>  <img src="http://img.blog.csdn.net/20171124212048206?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>  <img src="http://img.blog.csdn.net/20171124212250461?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
</li>
</ul>
<p>虽然这个一个AI还没有图灵机器人那么智能，但是一个AI用起来还是挺方便的，而且微信个人号无需第三方插件，最重要的是没有调用次数的限制。</p>
<p><strong>3. <a href="https://qiyukf.com/" target="_blank" rel="external">网易七鱼</a></strong></p>
<ul>
<li><p><a href="https://qiyukf.com/register/signup?tag=register" target="_blank" rel="external">注册</a></p>
</li>
<li><p>接入</p>
<p>  <img src="http://img.blog.csdn.net/20171124213627114?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>  你可以在这里接入微信公众号。</p>
</li>
<li><p>设置机器人</p>
<p>  <img src="http://img.blog.csdn.net/20171124213928434?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>  你可以在这里设置机器人的一些基本信息。</p>
</li>
</ul>
<p>其实网易的七鱼机器人更适合企业一些，就连机器人的回复都是比较官方的。</p>
<p><strong>4. <a href="http://www.xiaoi.com/index.shtml" target="_blank" rel="external">小爱</a></strong></p>
<ul>
<li><p><a href="http://cloud.xiaoi.com/regist.jsp" target="_blank" rel="external">注册</a></p>
</li>
<li><p><a href="http://cloud.xiaoi.com/user/rc/robotConfig!index.do" target="_blank" rel="external">设置机器人信息</a></p>
</li>
<li><p><a href="http://cloud.xiaoi.com/user/channel/weixin!index.do" target="_blank" rel="external">接入微信</a></p>
</li>
</ul>
<p>其他的功能也还没有多用，因为小爱机器人帐号竟然还要过期，就没有深入了解了。</p>
<p><img src="http://img.blog.csdn.net/20171124215044935?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><strong>5. 目前知道的就这么多了，总的来说还是图灵和一个AI更适合个人使用。</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> robot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[七牛云使用教程]]></title>
      <url>/2017/11/22/%E4%B8%83%E7%89%9B%E4%BA%91%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><strong>0. <a href="https://portal.qiniu.com/signup?code=3lcz13k5pwv2q" target="_blank" rel="external">注册</a></strong></p>
<p><strong>1. <a href="https://portal.qiniu.com/signin" target="_blank" rel="external">登录</a></strong></p>
<p><img src="http://oq3iwfipo.bkt.clouddn.com/tutorial/qiniu/1.png" alt="登录七牛云"></p>
<p><strong>2. <a href="https://portal.qiniu.com/bucket/create" target="_blank" rel="external">创建对象存储</a></strong></p>
<p><img src="http://oq3iwfipo.bkt.clouddn.com/tutorial/qiniu/2.png" alt="创建对象存储"></p>
<p><img src="http://oq3iwfipo.bkt.clouddn.com/tutorial/qiniu/3.png" alt="创建对象存储"></p>
<p><strong>3. <a href="https://portal.qiniu.com/bucket" target="_blank" rel="external">查看创建好的空间</a></strong></p>
<p><img src="http://oq3iwfipo.bkt.clouddn.com/tutorial/qiniu/4.png" alt="查看创建好的空间"></p>
<p><strong>4. 文件上传，复制文件链接</strong></p>
<p><img src="http://oq3iwfipo.bkt.clouddn.com/tutorial/qiniu/5.png" alt="文件上传，复制文件链接"></p>
<p><img src="http://oq3iwfipo.bkt.clouddn.com/tutorial/qiniu/6.png" alt="文件上传，复制文件链接"></p>
<p><strong>5. 七牛云对象管理工具（<a href="http://blog.csdn.net/qq_26954773/article/details/78245100" target="_blank" rel="external">使用教程</a>）</strong></p>
<ul>
<li><a href="http://oq3iwfipo.bkt.clouddn.com/tools/zhazhapan/qiniu.jar" target="_blank" rel="external">下载jar包</a>（需要安装java环境）</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> qiniu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java面试遇到的问题总结（二）]]></title>
      <url>/2017/11/21/Java%E9%9D%A2%E8%AF%95%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>[toc]</p>
<h1 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h1><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>顾名思义，就是很乐观，假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在提交更新的时候会判断一下在此期间别人有没有去更新这个数据。乐观锁适用于读多写少的应用场景，这样可以提高吞吐量。</p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ul>
<li><p>使用数据版本（Version）记录机制实现，这是乐观锁最常用的一种实现方式。何谓数据版本？即为数据增加一个版本标识，一般是通过为数据库表增加一个数字类型的 “version” 字段来实现。当读取数据时，将version字段的值一同读出，数据每更新一次，对此version值加一。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的version值进行比对，如果数据库表当前版本号与第一次取出来的version值相等，则予以更新，否则认为是过期数据。</p>
</li>
<li><p>使用时间戳（timestamp）。乐观锁定的第二种实现方式和第一种差不多，同样是在需要乐观锁控制的table中增加一个字段，名称无所谓，字段类型使用时间戳（timestamp）, 和上面的version类似，也是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比，如果一致则OK，否则就是版本冲突。</p>
</li>
</ul>
<h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>顾名思义，就是很悲观，假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。</p>
]]></content>
      
        
        <tags>
            
            <tag> java interview </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java面试遇到的问题总结（一）]]></title>
      <url>/2017/11/18/Java%E9%9D%A2%E8%AF%95%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="Struts2和SpringMVC的区别"><a href="#Struts2和SpringMVC的区别" class="headerlink" title="Struts2和SpringMVC的区别"></a>Struts2和SpringMVC的区别</h1><h2 id="拦截级别"><a href="#拦截级别" class="headerlink" title="拦截级别"></a>拦截级别</h2><p>Struts2是类级别的拦截， 一个类对应一个request上下文，SpringMVC是方法级别的拦截，一个方法对应一个request上下文，而方法同时又跟一个url对应,所以说从架构本身上SpringMVC就容易实现restful url,而struts2的架构实现起来要费劲，因为Struts2中Action的一个方法可以对应一个url，而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了。</p>
<h2 id="数据独立性"><a href="#数据独立性" class="headerlink" title="数据独立性"></a>数据独立性</h2><p>由上边原因，SpringMVC的方法之间基本上独立的，独享request response数据，请求数据通过参数获取，处理结果通过ModelMap交回给框架，方法之间不共享变量，而Struts2搞的就比较乱，虽然方法之间也是独立的，但其所有Action变量是共享的，这不会影响程序运行，却给我们编码读程序时带来麻烦，每次来了请求就创建一个Action，一个Action对象对应一个request上下文。</p>
<h2 id="内存损耗"><a href="#内存损耗" class="headerlink" title="内存损耗"></a>内存损耗</h2><p>由于Struts2需要针对每个request进行封装，把request，session等servlet生命周期的变量封装成一个一个Map，供给每个Action使用，并保证线程安全，所以在原则上，是比较耗费内存的。</p>
<h2 id="拦截器机制"><a href="#拦截器机制" class="headerlink" title="拦截器机制"></a>拦截器机制</h2><p>拦截器实现机制上，Struts2有以自己的interceptor机制，SpringMVC用的是独立的AOP方式，这样导致Struts2的配置文件量还是比SpringMVC大。</p>
<h2 id="入口的不同"><a href="#入口的不同" class="headerlink" title="入口的不同"></a>入口的不同</h2><p>SpringMVC的入口是servlet，而Struts2是filter（这里要指出，filter和servlet是不同的。以前认为filter是servlet的一种特殊实现），这就导致了二者的机制不同，这里就牵涉到servlet和filter的区别了。</p>
<h2 id="对Ajax的支持"><a href="#对Ajax的支持" class="headerlink" title="对Ajax的支持"></a>对Ajax的支持</h2><p>SpringMVC集成了Ajax，使用非常方便，只需一个注解@ResponseBody就可以实现，然后直接返回响应文本即可(只支持异步调用)，而Struts2拦截器集成了Ajax，在Action中处理时一般必须安装插件或者自己写代码集成进去，使用起来也相对不方便。</p>
<h2 id="验证机制"><a href="#验证机制" class="headerlink" title="验证机制"></a>验证机制</h2><p>SpringMVC验证支持JSR303，处理起来相对更加灵活方便，而Struts2验证比较繁琐，感觉太烦乱。</p>
<h2 id="和Spring的关系"><a href="#和Spring的关系" class="headerlink" title="和Spring的关系"></a>和Spring的关系</h2><p>SpringMVC和Spring是无缝的。从这个项目的管理和安全上也比Struts2高（当然Struts2也可以通过不同的目录结构和相关配置做到SpringMVC一样的效果，但是需要xml配置的地方不少）。</p>
<h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><p>Struts2更加符合OOP的编程思想， SpringMVC就比较谨慎，在Servlet上扩展。</p>
<h2 id="开发效率和性能"><a href="#开发效率和性能" class="headerlink" title="开发效率和性能"></a>开发效率和性能</h2><p>SpringMVC开发效率和性能高于Struts2。</p>
<h1 id="HashMap和HashTable的区别"><a href="#HashMap和HashTable的区别" class="headerlink" title="HashMap和HashTable的区别"></a>HashMap和HashTable的区别</h1><h2 id="实现的接口"><a href="#实现的接口" class="headerlink" title="实现的接口"></a>实现的接口</h2><p>HashTable是基于陈旧的Dictionary类的，HashMap是Java 1.2引进的Map接口的一个实现，它们都是集合中将数据无序存放的。</p>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>HashTable的方法是同步的，是线程安全的，而HashMap不是同步的，是线程不安全的，所以在多线程场合要手动同步HashMap这个区别就像Vector和ArrayList一样。</p>
<h2 id="NULL值"><a href="#NULL值" class="headerlink" title="NULL值"></a>NULL值</h2><p>HashTable不允许 null 值(key 和 value 都不可以)，HashMap允许 null 值(key和value都可以)。</p>
<h2 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h2><p>两者的遍历方式大同小异，HashTable使用Enumeration，HashMap使用Iterator，HashTable仅仅比HashMap多一个elements方法。</p>
<h1 id="Ajax的核心对象"><a href="#Ajax的核心对象" class="headerlink" title="Ajax的核心对象"></a>Ajax的核心对象</h1><h2 id="什么是Ajax"><a href="#什么是Ajax" class="headerlink" title="什么是Ajax"></a>什么是Ajax</h2><p>Ajax并不是一门新的技术，而是多种技术的组合（html,js,xml,css）用于快速的创建动态的网页，能够实现无刷新更新数据从而提高了用户体验。</p>
<h2 id="Ajax的原理"><a href="#Ajax的原理" class="headerlink" title="Ajax的原理"></a>Ajax的原理</h2><p>由客户端请求ajax引擎，在由ajax引擎请求服务器，服务器作出一系列的响应之后将结果返回给ajax引擎，由ajax引擎决定将这个结果写入到客户端的什么位置，从而实现了页面无刷新更新数据。</p>
<h2 id="核心对象"><a href="#核心对象" class="headerlink" title="核心对象"></a>核心对象</h2><p>XMLHttpRequest</p>
<h1 id="Struts2的工作流程"><a href="#Struts2的工作流程" class="headerlink" title="Struts2的工作流程"></a>Struts2的工作流程</h1><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ol>
<li><p>客户端初始化一个指向Servlet容器（例如Tomcat）的请求 </p>
</li>
<li><p>这个请求经过一系列的过滤器（Filter）（这些过滤器中有一个叫做ActionContextCleanUp的可选过滤器，这个过滤器对于Struts2和其他框架的集成很有帮助，例如：SiteMesh Plugin） </p>
</li>
<li><p>接着FilterDispatcher被调用，FilterDispatcher询问ActionMapper来决定这个请是否需要调用某个Action </p>
</li>
<li><p>如果ActionMapper决定需要调用某个Action，FilterDispatcher把请求的处理交给ActionProxy </p>
</li>
<li><p>ActionProxy通过ConfigurationManager询问框架的配置文件，找到需要调用的Action类 </p>
</li>
<li><p>ActionProxy创建一个ActionInvocation的实例。 </p>
</li>
<li><p>ActionInvocation实例使用命名模式来调用，在调用Action的过程前后，涉及到相关拦截器（Intercepter）的调用。 </p>
</li>
<li><p>一旦Action执行完毕，ActionInvocation负责根据struts.xml中的配置找到对应的返回结果。返回结果通常是（但不总是，也可能是另外的一个Action链）一个需要被表示的JSP或者FreeMarker的模版。在表示的过程中可以使用Struts2 框架中继承的标签。在这个过程中需要涉及到ActionMapper </p>
</li>
</ol>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ol>
<li><p>客户端浏览器发出HTTP请求.</p>
</li>
<li><p>根据web.xml配置，该请求被FilterDispatcher接收</p>
</li>
<li><p>根据struts.xml配置，找到需要调用的Action类和方法， 并通过IoC方式，将值注入给Aciton</p>
</li>
<li><p>Action调用业务逻辑组件处理业务逻辑，这一步包含表单验证。</p>
</li>
<li><p>Action执行完毕，根据struts.xml中的配置找到对应的返回结果result，并跳转到相应页面</p>
</li>
<li><p>返回HTTP响应到客户端浏览器</p>
</li>
</ol>
<h1 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h1><p><img src="http://img.blog.csdn.net/20171118101357717?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="CSS盒子模型"></p>
<h1 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h1><h2 id="什么是线程-1"><a href="#什么是线程-1" class="headerlink" title="什么是线程"></a>什么是线程</h2><p>线程是指程序在执行过程中，能够执行程序代码最小的一个执行单元，在Java语言中，线程有四种状态：运行，就绪，挂起，结束。</p>
<h2 id="线程与进程的区别"><a href="#线程与进程的区别" class="headerlink" title="线程与进程的区别"></a>线程与进程的区别</h2><p>进程是一段正在运行的程序，而线程有时也被称为轻量级进程，它是进程的执行单元，一个进程可以拥有多个线程，各个线程之间共享程序的内存空间，但是，各个线程拥有自己的栈空间。</p>
<h2 id="为什么使用多线程"><a href="#为什么使用多线程" class="headerlink" title="为什么使用多线程"></a>为什么使用多线程</h2><ol>
<li><p>使用多线程可以减少程序的响应时间。单线程如果遇到等待或阻塞，将会导致程序不响应鼠标键盘等操作，使用多线程可以解决此问题，增强程序的交互性。</p>
</li>
<li><p>与进程相比，线程的创建和切换开销更小，因为线程共享代码段、数据段等内存空间。</p>
</li>
<li><p>多核CPU，多核计算机本身就具有执行多线程的能力，如果使用单个线程，将无法重复利用计算资源，造成资源的巨大浪费。</p>
</li>
<li><p>多线程可以简化程序的结构，使程序便于维护，一个非常复杂的进程可以分为多个线程执行。</p>
</li>
</ol>
<h1 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h1><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>调用init()方法，在Servlet的生命周期中，仅执行一次。它是在服务器装入Servlet时执行的，负责初始化Servlet对象。</p>
<p>可以配置服务器，以在启动服务器或客户机首次访问Servlet时装入Servlet。无论有多少客户机访问Servlet，都不会重复执行。</p>
<h3 id="响应客户端请求"><a href="#响应客户端请求" class="headerlink" title="响应客户端请求"></a>响应客户端请求</h3><p>调用service()方法，它是Servlet的核心，负责响应客户的请求。</p>
<p>每当一个客户请求一个HttpServlet对象，该对象的Service()方法就要调用，而且传递给这个方法一个“请求”（ServletRequest）对象和一个“响应”（ServletResponse）对象作为参数。在HttpServlet中已存在Service()方法。默认的服务功能是调用与HTTP请求的方法相应的do功能。</p>
<h3 id="终止"><a href="#终止" class="headerlink" title="终止"></a>终止</h3><p>调用destroy()方法，仅执行一次，在服务器端停止且卸载Servlet时执行该方法。当Servlet对象退出生命周期时，负责释放占用的资源。</p>
<p>一个Servlet在运行service()方法时可能会产生其他的线程，因此需要确认在调用destroy()方法时，这些线程已经终止或完成。</p>
<h2 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h2><p>对于用户到达Servlet的请求，Servlet容器会创建特定于这个请求的ServletRequest对象和ServletResponse对象，然后调用Servlet的service方法。service方法从ServletRequest对象获得客户请求信息，处理该请求，并将请求ServletRequest、ServletResponse 强转为HttpRequest和HttpResponse，然后返回给客户。</p>
<h1 id="JSP与Servlet的关系"><a href="#JSP与Servlet的关系" class="headerlink" title="JSP与Servlet的关系"></a>JSP与Servlet的关系</h1><ol>
<li><p>Jsp经编译后就变成了Servlet(JSP的本质就是Servlet，JVM只能识别java的类，不能识别JSP的代码,Web容器将JSP的代码编译成JVM能够识别的java类)。</p>
</li>
<li><p>Jsp更擅长表现于页面显示，Servlet更擅长于逻辑控制。</p>
</li>
<li><p>Servlet中没有内置对象，Jsp中的内置对象都是必须通过HttpServletRequest对象，HttpServletResponse对象以及HttpServlet对象得到。</p>
</li>
</ol>
<p>Jsp是Servlet的一种简化，使用Jsp只需要完成程序员需要输出到客户端的内容，Jsp中的Java脚本如何镶嵌到一个类中，由Jsp容器完成。而Servlet则是个完整的Java类，这个类的Service方法用于生成对客户端的响应。</p>
<h1 id="Docker的主要作用"><a href="#Docker的主要作用" class="headerlink" title="Docker的主要作用"></a>Docker的主要作用</h1><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>Docker很适合用于测试发布，将Docker封装后可以直接提供给测试人员进行运行，不再需要测试人员与运维、开发进行配合，进行环境搭建与部署。</p>
<h2 id="测试数据分离"><a href="#测试数据分离" class="headerlink" title="测试数据分离"></a>测试数据分离</h2><p>在测试中，经常由于测试场景变换，需要修改依赖的数据库数据或者清空变动memcache、Redis中的缓存数据。Docker相较于传统的虚拟机，更轻量与方便。可以很容易的将这些数据分离到不同的镜像中，根据不同需要随时进行切换。</p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>开发人员共同使用同一个Docker镜像，同时修改的源代码都被挂载到本地磁盘。不再因为环境的不同而造成的不同程序行为而伤透脑筋，同时新人到岗时也能迅速建立开发、编译环境。</p>
<h2 id="PaaS-云服务"><a href="#PaaS-云服务" class="headerlink" title="PaaS 云服务"></a>PaaS 云服务</h2><p>Docker可以支持命令行封装与编程，通过自动加载与服务自发现，可以很方便的将封装于 Docker 镜像中的服务扩展成云服务。类似像 Doc 转换预览这样的服务封装于镜像中，根据业务请求的情况随时增加和减少容器的运行数量，随需应变。</p>
<h2 id="简化配置"><a href="#简化配置" class="headerlink" title="简化配置"></a>简化配置</h2><p>这是Docker初始目的，虚拟机VM最大的好处是基于你的应用配置能够无缝运行在任何平台上。Docker提供同样类似VM的能力，但是没有任何副作用，它能让你将环境和配置放入代码然后部署，同样的Docker配置能够在各种环境中使用，这实际是将应用环境和底层环境实现了解耦。</p>
<h2 id="代码管道化管理"><a href="#代码管道化管理" class="headerlink" title="代码管道化管理"></a>代码管道化管理</h2><p>能够对代码以流式pipeline管道化进行管理，从开发者的机器到生产环境机器这个流程中都能有效管理。因为在这个流程中会有各种不同的环境，每个都可能有微小的区别，Docker提供了跨越这些异构环境以一致性的微环境，从开发到部署实现流畅发布。</p>
<h2 id="开发人员的生产化"><a href="#开发人员的生产化" class="headerlink" title="开发人员的生产化"></a>开发人员的生产化</h2><p>在一个开发环境，我们希望我们的开发环境能更加接近于生产环境，我们会让每个服务运行在自己的VM中，这样能模拟生产环境，比如有时我们并不总是需要跨越网络连接，这样我们可以将多个Docker装载一系列服务运行在单机上最大程度模拟生产分布式部署的环境。</p>
<h2 id="应用隔离"><a href="#应用隔离" class="headerlink" title="应用隔离"></a>应用隔离</h2><p>有很多理由你需要在一台机器上运行多个应用，这就需要将原来铁板一块monolithic的应用切分为很多微服务。实现应用之间的解耦，将多个应用服务部署在多个Docker中能轻松达到这个目的。</p>
<h2 id="服务合并"><a href="#服务合并" class="headerlink" title="服务合并"></a>服务合并</h2><p>使用Docker也能合并多个服务以降低费用，不多的操作系统内存占用，跨实例共享多个空闲的内存，这些技术Docker能以更加紧密资源提供更有效的服务合并。</p>
<h2 id="多租户"><a href="#多租户" class="headerlink" title="多租户"></a>多租户</h2><p>Docker能够作为云计算的多租户容器，使用Docker能容易为每个租户创建运行应该多个实例，这得益其灵活的快速环境以及有效diff命令。</p>
<h2 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h2><p>Docker通过创建进程的容器，不必重新启动操作系统，几秒内能关闭，你可以在数据中心创建或销毁资源，不用担心额外消耗。典型的数据中心利用率是30%，通过更积极的资源分配，以低成本方式对一个新的实例实现一个更聚合的资源分配，我们很容易超过这个利用率，大大提高数据中心的利用效率。 </p>
<h1 id="异步与同步的区别"><a href="#异步与同步的区别" class="headerlink" title="异步与同步的区别"></a>异步与同步的区别</h1><p>所谓同步，就是在发出一个 <em>调用</em> 时，在没有得到结果之前，该 <em>调用</em> 就不返回。但是一旦调用返回，就得到返回值了。<br>换句话说，就是由 <em>调用者</em> 主动等待这个 <em>调用</em> 的结果。</p>
<p>而异步则是相反，<em>调用</em> 在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在<em>调用</em>发出后，<em>被调用者</em> 通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p>
<h1 id="Object类中有哪些方法？作用是什么？"><a href="#Object类中有哪些方法？作用是什么？" class="headerlink" title="Object类中有哪些方法？作用是什么？"></a>Object类中有哪些方法？作用是什么？</h1><h2 id="getClass方法"><a href="#getClass方法" class="headerlink" title="getClass方法"></a>getClass方法</h2><p>getClass方法是一个final方法，不允许子类重写，并且也是一个native方法。返回当前运行时对象的Class对象。</p>
<h2 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h2><p>hashCode方法也是一个native方法。该方法返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap。</p>
<h3 id="哈希码的通用约定"><a href="#哈希码的通用约定" class="headerlink" title="哈希码的通用约定"></a>哈希码的通用约定</h3><ol>
<li><p>在java程序执行过程中，在一个对象没有被改变的前提下，无论这个对象被调用多少次，hashCode方法都会返回相同的整数值。对象的哈希码没有必要在不同的程序中保持相同的值。</p>
</li>
<li><p>如果2个对象使用equals方法进行比较并且相同的话，那么这2个对象的hashCode方法的值也必须相等。</p>
</li>
<li><p>如果根据equals方法，得到两个对象不相等，那么这2个对象的hashCode值不需要必须不相同。但是，不相等的对象的hashCode值不同的话可以提高哈希表的性能。</p>
</li>
</ol>
<p>通常情况下，不同的对象产生的哈希码是不同的。默认情况下，对象的哈希码是通过将该对象的内部地址转换成一个整数来实现的。</p>
<h2 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h2><p>比较两个对象是否相等。Object类的默认实现，即比较2个对象的内存地址是否相等。</p>
<h2 id="clone方法"><a href="#clone方法" class="headerlink" title="clone方法"></a>clone方法</h2><p>创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 也为true。</p>
<h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><p>Object对象的默认实现，即输出类的<code>名字@实例</code>的哈希码的16进制。</p>
<h2 id="notify方法"><a href="#notify方法" class="headerlink" title="notify方法"></a>notify方法</h2><p>notify方法是一个native方法，并且也是final的，不允许子类重写。</p>
<p>唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果所有的线程都在此对象上等待，那么只会选择一个线程。选择是任意性的，并在对实现做出决定时发生。一个线程在对象监视器上等待可以调用wait方法。</p>
<p>直到当前线程放弃对象上的锁之后，被唤醒的线程才可以继续处理。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争。例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。</p>
<h2 id="notifyAll方法"><a href="#notifyAll方法" class="headerlink" title="notifyAll方法"></a>notifyAll方法</h2><p>跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。同样，如果当前线程不是对象监视器的所有者，那么调用notifyAll同样会发生IllegalMonitorStateException异常。</p>
<h2 id="wait方法"><a href="#wait方法" class="headerlink" title="wait方法"></a>wait方法</h2><ol>
<li><p>wait(long timeout) throws InterruptedException</p>
<p> wait(long timeout)方法同样是一个native方法，并且也是final的，不允许子类重写。</p>
<p> wait方法会让当前线程等待直到另外一个线程调用对象的notify或notifyAll方法，或者超过参数设置的timeout超时时间。</p>
<p> 跟notify和notifyAll方法一样，当前线程必须是此对象的监视器所有者，否则还是会发生IllegalMonitorStateException异常。</p>
</li>
<li><p>wait(long timeout, int nanos) throws InterruptedException</p>
<p> 跟wait(long timeout)方法类似，多了一个nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。</p>
<p> 需要注意的是 wait(0, 0)和wait(0)效果是一样的，即一直等待。</p>
</li>
<li><p>wait() throws InterruptedException</p>
<p> 跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念。</p>
</li>
</ol>
<h1 id="如何读取src目录中的文件"><a href="#如何读取src目录中的文件" class="headerlink" title="如何读取src目录中的文件"></a>如何读取src目录中的文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方法一</span></div><div class="line">getClass().getResource(String name);</div><div class="line"><span class="comment">//方法二</span></div><div class="line">Object.class.getClassLoader().getResource(String name);</div><div class="line"><span class="comment">//方法三</span></div><div class="line">Object.class.getResource(String name);</div></pre></td></tr></table></figure>
<h1 id="两个list集合怎么取无重复并集"><a href="#两个list集合怎么取无重复并集" class="headerlink" title="两个list集合怎么取无重复并集"></a>两个list集合怎么取无重复并集</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">List list1 =<span class="keyword">new</span> ArrayList();</div><div class="line">list1.add(<span class="string">"1111"</span>);</div><div class="line">list1.add(<span class="string">"2222"</span>);</div><div class="line">list1.add(<span class="string">"3333"</span>);</div><div class="line">  </div><div class="line">List list2 =<span class="keyword">new</span> ArrayList();</div><div class="line">list2.add(<span class="string">"3333"</span>);</div><div class="line">list2.add(<span class="string">"4444"</span>);</div><div class="line">list2.add(<span class="string">"5555"</span>);</div><div class="line">  </div><div class="line"><span class="comment">//并集</span></div><div class="line"><span class="comment">//list1.addAll(list2);</span></div><div class="line"><span class="comment">//交集</span></div><div class="line"><span class="comment">//list1.retainAll(list2);</span></div><div class="line"><span class="comment">//差集</span></div><div class="line"><span class="comment">//list1.removeAll(list2);</span></div><div class="line"><span class="comment">//无重复并集</span></div><div class="line">list2.removeAll(list1);</div><div class="line">list1.addAll(list2);</div></pre></td></tr></table></figure>
<h1 id="Struts2和SpringMVC怎么接收前端传来的表单数据"><a href="#Struts2和SpringMVC怎么接收前端传来的表单数据" class="headerlink" title="Struts2和SpringMVC怎么接收前端传来的表单数据"></a>Struts2和SpringMVC怎么接收前端传来的表单数据</h1><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>注解@RequestBody 表示接收请求里的JSON对象。<br>注解@ResponseBody表示用JSON对象的格式发送响应。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(@RequestBody User user)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"&#123;success: true&#125;"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Struts2"><a href="#Struts2" class="headerlink" title="Struts2"></a>Struts2</h2><ol>
<li><p>实现ModelDriven接口</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">implements ModelDriven&lt;Object&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>实现接口的方法</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这是一个自定义的Bean对象</span></div><div class="line"><span class="keyword">private</span> Object object;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getModel</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> object;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Struts2中的action是单实例还是多实例，为什么？"><a href="#Struts2中的action是单实例还是多实例，为什么？" class="headerlink" title="Struts2中的action是单实例还是多实例，为什么？"></a>Struts2中的action是单实例还是多实例，为什么？</h1><p>Struts2中action是多例的，即一个session产生一个action。</p>
<p>如果是单例的话，若出现两个用户都修改一个对象的属性值，则会因为用户修改时间不同，两个用户访问得到的属性不一样，操作得出的结果不一样。</p>
<h1 id="Struts中的拦截器如何配置"><a href="#Struts中的拦截器如何配置" class="headerlink" title="Struts中的拦截器如何配置"></a>Struts中的拦截器如何配置</h1><h2 id="什么是拦截器"><a href="#什么是拦截器" class="headerlink" title="什么是拦截器"></a>什么是拦截器</h2><p>拦截器是一种可以在让用户在Action执行之前和Result执行之后进行一些功能处理的机制。 拦截器在action执行之前和result执行之后的顺序是相反的，也就是说执行的顺序是：Interceptor1—Interceptor2—Interceptor3—Action—Result—Interceptor3—Interceptor2—Interceptor1。</p>
<h2 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h2><p>在struts.xml文件中定义拦截器只需要为拦截器类指定一个拦截器名，就可以完成拦截器的定义。定义拦截器使用<code>&lt;interceptor.../&gt;</code>元素，如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 通过指定拦截器名和拦截器实现类来定义拦截器--&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"拦截器名"</span> <span class="attr">class</span>=<span class="string">"拦截器实现类"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>如果还需要在配置拦截器时传入拦截器参数。可以在<code>&lt;interceptor.../&gt;</code>元素中使用<code>&lt;param.../&gt;</code>子元素。如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"拦截器名"</span> <span class="attr">class</span>=<span class="string">"拦截器实现类"</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"参数名"</span>&gt;</span>参数值<span class="tag">&lt;/<span class="name">param</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="配置拦截器栈"><a href="#配置拦截器栈" class="headerlink" title="配置拦截器栈"></a>配置拦截器栈</h2><p> 除了配置拦截器，还可以把多个拦截器连在一起组成拦截器栈。定义拦截器栈使用<code>&lt;interceptor-stack.../&gt;</code>元素，拦截器栈是由多个拦截器组成。因此需要在<code>&lt;interceptor-stack.../&gt;</code>元素中使用<code>&lt;interceptor-ref.../&gt;</code>元素来定义多个拦截器引用。配置拦截器栈如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"拦截器栈名"</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"拦截器名"</span> /&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"拦截器名"</span> /&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></div></pre></td></tr></table></figure>
<p>从上面的结构中可以看出，一个拦截器栈是由多个拦截器组成的。但是从程序功能上看，拦截器和拦截器栈是统一的，它们包含的方法都会在Action的execute方法执行之前执行。由于拦截器栈和拦截器的功能几乎完全相同，所以我们可以将拦截器栈当成一个更大的拦截器。拦截器栈中也可以包含拦截器栈。配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"拦截器栈一"</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"拦截器一"</span> /&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"拦截器二"</span> /&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span>  </div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"拦截器栈二"</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"拦截器三"</span> /&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"拦截器栈一"</span> /&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注：如果在两个时机为同一个参数指定不同的参数值，则使用拦截器时指定的参数值将会覆盖默认的参数值。</p>
</blockquote>
<h2 id="配置默认拦截器"><a href="#配置默认拦截器" class="headerlink" title="配置默认拦截器"></a>配置默认拦截器</h2><p>当配置一个包时，可以为其指定默认拦截器。一旦为某个包指定了默认拦截器，如果该包中的Action没有显示指定拦截器，则默认的拦截器将会起到作用。如果我们为该包中的Action显示应用了某个拦截器，则默认的拦截器不会起作用。</p>
<p>配置默认拦截器使用<code>&lt;default-interceptor-ref.../&gt;</code>元素，该元素作为<code>&lt;package.../&gt;</code>元素的子元素使用，为该包下的所有Action配置默认的拦截器。而且每个<code>&lt;package../&gt;</code>元素中只能包含一个<code>&lt;default-interceptor-ref.../&gt;</code>子元素，即没一个包只能指定一个默认拦截器。如果我们需要多个拦截器共同作为默认拦截器，则应该将这些拦截器定义成一个拦截器栈，然后把这个拦截器栈配置成默认拦截器即可。默认拦截器配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"包名"</span>&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">interceptors</span>&gt;</span>  </div><div class="line">		<span class="comment">&lt;!-- 定义拦截器--&gt;</span>  </div><div class="line">		<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">...</span>/&gt;</span>  </div><div class="line">		<span class="comment">&lt;!-- 定义拦截器栈--&gt;</span>  </div><div class="line">		<span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">...</span>/&gt;</span>  </div><div class="line">	<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span>  </div><div class="line">	<span class="comment">&lt;!-- 配置该包下的默认拦截器--&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">default-interceptor-ref</span> <span class="attr">name</span>=<span class="string">"拦截器名或者拦截器栈名"</span> /&gt;</span>  </div><div class="line">	<span class="comment">&lt;!-- 配置多个Action--&gt;</span>  </div><div class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">..</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="SSM和SSH框架的整合思想"><a href="#SSM和SSH框架的整合思想" class="headerlink" title="SSM和SSH框架的整合思想"></a>SSM和SSH框架的整合思想</h1><h2 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h2><h3 id="Dao层：整合MyBatis和Spring"><a href="#Dao层：整合MyBatis和Spring" class="headerlink" title="Dao层：整合MyBatis和Spring"></a>Dao层：整合MyBatis和Spring</h3><ul>
<li><p>需要的jar包</p>
<ul>
<li>mybatis的jar包</li>
<li>Spring的jar包</li>
<li>MyBatis和Spring的整包</li>
<li>Mysql数据库驱动</li>
<li>数据库连接池</li>
</ul>
</li>
<li><p>配置文件（注意：所有的配置文件都应该放到web文件中）</p>
<ul>
<li>MyBatis配置文件：SqlMapConfig.xml</li>
<li>Spring 配置文件：applicationContext.xml</li>
</ul>
</li>
<li><p>配置数据源</p>
</li>
<li><p>配置数据库连接池</p>
</li>
<li><p>配置SqlSessionFactory（MyBatis和Spring整合包中的）</p>
</li>
<li><p>配置mapper文件扫描器。</p>
</li>
</ul>
<h3 id="Service层：配置一个包扫描器，扫描所有带-Service注解的类"><a href="#Service层：配置一个包扫描器，扫描所有带-Service注解的类" class="headerlink" title="Service层：配置一个包扫描器，扫描所有带@Service注解的类"></a>Service层：配置一个包扫描器，扫描所有带<code>@Service</code>注解的类</h3><ul>
<li><p>使用jar包：主要是Spring的jar包</p>
</li>
<li><p>配置文件：applicationContext-Service.xml</p>
</li>
<li><p>事务配置</p>
<ul>
<li>applicationContext-trans.xml</li>
<li>配置一个事物管理器</li>
<li>配置tx</li>
<li>配置切面</li>
</ul>
</li>
</ul>
<h3 id="表现层：使用SpringMVC，配置扫描器，扫描所有带-Controller注解的类"><a href="#表现层：使用SpringMVC，配置扫描器，扫描所有带-Controller注解的类" class="headerlink" title="表现层：使用SpringMVC，配置扫描器，扫描所有带@Controller注解的类"></a>表现层：使用SpringMVC，配置扫描器，扫描所有带<code>@Controller</code>注解的类</h3><ul>
<li><p>使用jar包：SpringMVC和Spring的jar包</p>
</li>
<li><p>配置文件：springmvc.xml</p>
</li>
<li><p>配置注解驱动</p>
</li>
<li><p>配置Jsp视图解析器</p>
</li>
<li><p>配置web.xml</p>
<ul>
<li><p>配置SpringMVC的前端控制器</p>
</li>
<li><p>Spring容器的初始化的listener</p>
</li>
</ul>
</li>
</ul>
<h2 id="SSH两两整合"><a href="#SSH两两整合" class="headerlink" title="SSH两两整合"></a>SSH两两整合</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ul>
<li><p>Web层：Struts2</p>
</li>
<li><p>Service层：Spring</p>
</li>
<li><p>DAO层：Hibernate</p>
</li>
</ul>
<h3 id="整合Struts2和Spring"><a href="#整合Struts2和Spring" class="headerlink" title="整合Struts2和Spring"></a>整合Struts2和Spring</h3><ul>
<li><p>把Struts2的Action对象的创建交给Spring管理</p>
</li>
<li><p>配置Bean：<code>&lt;bean id=&quot;&quot; class=&quot;&quot; scope=&quot;prototype&quot;/&gt;</code></p>
</li>
</ul>
<h3 id="整合Spring和Hibernate"><a href="#整合Spring和Hibernate" class="headerlink" title="整合Spring和Hibernate"></a>整合Spring和Hibernate</h3><ul>
<li><p>把Hibernate核心配置文件中的数据库连接配置，直接写在 Spring 核心配置文件中</p>
</li>
<li><p>把Hibernate的SessionFactory对象的创建交给Spring管理</p>
</li>
<li><p>配置在服务器启动时加载Spring核心配置文件，创建出包含 SessionFactory对象在内的一系列对象</p>
</li>
</ul>
<h1 id="Hibernate的缓存原理和延迟加载原理是什么"><a href="#Hibernate的缓存原理和延迟加载原理是什么" class="headerlink" title="Hibernate的缓存原理和延迟加载原理是什么"></a>Hibernate的缓存原理和延迟加载原理是什么</h1><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>Session缓存表示将查询结果放置到Session的临时存储空间（一级缓存中）。Hibernate框架默认支持一级缓存的。一级缓存的范围较小，一旦Session关闭，那么缓存失效。我们使用框架的各种方法，例如：get，load，save，update，delete等都支持一级缓存的。</p>
<h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>二级缓存其实就是将查询的数据放置在SessionFactory临时存储空间中，因为一个SessionFactory可以创建多个Session对象，所以范围比Session缓存的要大，多个Session可以共享二级缓存的数据。当然了二级缓存也不能存储大量的数据，这个要根据我们电脑配置进行设置。</p>
<h2 id="配置二级缓存"><a href="#配置二级缓存" class="headerlink" title="配置二级缓存"></a>配置二级缓存</h2><ol>
<li><p>在hibernate.cfg.xml配置文件中添加属性标签，启用二级缓存：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--启用二级缓存 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">propertyname="hibernate.cache.use_second_level_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>二级缓存需要使用额外的第三方组件:ehcache。需要我们拷入对应的jar包，以及将对应的ehcache.xml存放到src目录下。在这个配置文件中，我们可以设置二级缓存的大小等。</p>
</li>
<li><p>让框架识别添加入的ehcache缓存组件，在hibernate.cfg.xml配置文件中添加属性标签：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--让框架识别ehcache缓存组件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">propertyname="hibernate.cache.provider_class"</span>&gt;</span>org.hibernate.cache.EhCacheProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>设置需要缓存的映射类，这里只是将一些查询操作比较频繁的类指定即可，哪些不经常操作的数据，是没有必要利用缓存的。这里例如：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 将指定的类存放到二级缓存中，其中read-only是指放入缓存的数据是只读的--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">class-cache</span> <span class="attr">usage</span>=<span class="string">"read-only"</span> <span class="attr">class</span>=<span class="string">"com.ljh.hibernate.pojo.Student"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="缓存原理"><a href="#缓存原理" class="headerlink" title="缓存原理"></a>缓存原理</h2><p>查询数据时，会首先从一级缓存中取数据，如果取上，则直接使用，否则到二级缓存中取，如果取到则直接使用，否则，就会发送语句查询数据库。这样利用一级和二级缓存会提高访问效率。</p>
<h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><p>表示查询当前对象或关联对象数据时，不真正访问数据库，当使用对象非主键属性时，才真正发送查询语句，访问数据库。由于在某些情况下，查的数据在后续流程到可能用不上，如果做查询处理就多余了，所以延迟加载功能可以提高性能，合理使用即可。</p>
<h1 id="Spring中IOC和DI的区别以及关系是什么，AOP是怎么实现的"><a href="#Spring中IOC和DI的区别以及关系是什么，AOP是怎么实现的" class="headerlink" title="Spring中IOC和DI的区别以及关系是什么，AOP是怎么实现的"></a>Spring中IOC和DI的区别以及关系是什么，AOP是怎么实现的</h1><p>IOC是一种思想，IOC理论的提出就是为了解决对象之间的“解耦”。DI就是其技术实现，松散耦合。</p>
<p><a href="http://www.importnew.com/24305.html" title="AOP的实现原理" target="_blank" rel="external">AOP的实现原理</a></p>
<h1 id="ArrayList和LinkedList的区别"><a href="#ArrayList和LinkedList的区别" class="headerlink" title="ArrayList和LinkedList的区别"></a>ArrayList和LinkedList的区别</h1><ul>
<li><p>ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。 </p>
</li>
<li><p>对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。 </p>
</li>
<li><p>对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。 </p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> java interview </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MarkDown语法]]></title>
      <url>/2017/11/17/MarkDown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>本Markdown编辑器使用<a href="https://github.com/benweet/stackedit" target="_blank" rel="external">StackEdit</a>修改而来，用它写博客，将会带来全新的体验哦：</p>
<ul>
<li><strong>Markdown和扩展Markdown简洁的语法</strong></li>
<li><strong>代码块高亮</strong></li>
<li><strong>图片链接和图片上传</strong></li>
<li><strong><em>LaTex</em>数学公式</strong></li>
<li><strong>UML序列图和流程图</strong></li>
<li><strong>离线写博客</strong></li>
<li><strong>导入导出Markdown文件</strong></li>
<li><strong>丰富的快捷键</strong></li>
</ul>
<hr>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li>加粗    <code>Ctrl + B</code> </li>
<li>斜体    <code>Ctrl + I</code> </li>
<li>引用    <code>Ctrl + Q</code></li>
<li>插入链接    <code>Ctrl + L</code></li>
<li>插入代码    <code>Ctrl + K</code></li>
<li>插入图片    <code>Ctrl + G</code></li>
<li>提升标题    <code>Ctrl + H</code></li>
<li>有序列表    <code>Ctrl + O</code></li>
<li>无序列表    <code>Ctrl + U</code></li>
<li>横线    <code>Ctrl + R</code></li>
<li>撤销    <code>Ctrl + Z</code></li>
<li>重做    <code>Ctrl + Y</code></li>
</ul>
<h2 id="Markdown及扩展"><a href="#Markdown及扩展" class="headerlink" title="Markdown及扩展"></a>Markdown及扩展</h2><blockquote>
<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank"> [ 维基百科 ]</a></p>
</blockquote>
<p>使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.csdn.net" target="_blank" rel="external">链接</a>等，详细语法参考帮助？。</p>
<p>本编辑器支持 <strong>Markdown Extra</strong> , 　扩展了很多好用的功能。具体请参考<a href="https://github.com/jmcmanus/pagedown-extra" title="Pagedown Extra" target="_blank" rel="external">Github</a>.  </p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><strong>Markdown　Extra</strong>　表格语法：</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>价格</th>
</tr>
</thead>
<tbody>
<tr>
<td>Computer</td>
<td>$1600</td>
</tr>
<tr>
<td>Phone</td>
<td>$12</td>
</tr>
<tr>
<td>Pipe</td>
<td>$1</td>
</tr>
</tbody>
</table>
<p>可以使用冒号来定义对齐方式：</p>
<table>
<thead>
<tr>
<th style="text-align:left">项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Computer</td>
<td style="text-align:right">1600 元</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:left">Phone</td>
<td style="text-align:right">12 元</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td style="text-align:left">Pipe</td>
<td style="text-align:right">1 元</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<p>###定义列表</p>
<p><strong>Markdown　Extra</strong>　定义列表语法：<br>项目１<br>项目２<br>:   定义 A<br>:   定义 B</p>
<p>项目３<br>:   定义 C</p>
<p>:   定义 D</p>
<pre><code>&gt; 定义D内容
</code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块语法遵循标准markdown代码，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requires_authorization</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></div><div class="line">    <span class="string">'''A docstring'''</span></div><div class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></div><div class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></div><div class="line"><span class="string"><span class="meta">... </span>prompt'''</span></div></pre></td></tr></table></figure></p>
<p>###脚注<br>生成一个脚注[^footnote].<br>  [^footnote]: 这里是 <strong>脚注</strong> 的 <em>内容</em>.</p>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>用 <code>[TOC]</code>来生成目录：</p>
<p>[TOC]</p>
<h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>使用MathJax渲染<em>LaTex</em> 数学公式，详见<a href="http://math.stackexchange.com/" target="_blank" rel="external">math.stackexchange.com</a>.</p>
<ul>
<li>行内公式，数学公式为：$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。</li>
<li>块级公式：</li>
</ul>
<p>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p>
<p>更多LaTex语法请参考 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">这儿</a>.</p>
<h3 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图:"></a>UML 图:</h3><p>可以渲染序列图：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class="line">Note right of 李四: 李四愣了一下，说：</div><div class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure>
<p>或者流程图：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 开始</div><div class="line">e=&gt;end: 结束</div><div class="line">op=&gt;operation: 我的操作</div><div class="line">cond=&gt;condition: 确认？</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<ul>
<li>关于 <strong>序列图</strong> 语法，参考 <a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="external">这儿</a>,</li>
<li>关于 <strong>流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="external">这儿</a>.</li>
</ul>
<h2 id="离线写博客"><a href="#离线写博客" class="headerlink" title="离线写博客"></a>离线写博客</h2><p>即使用户在没有网络的情况下，也可以通过本编辑器离线写博客（直接在曾经使用过的浏览器中输入<a href="http://write.blog.csdn.net/mdeditor" target="_blank" rel="external">write.blog.csdn.net/mdeditor</a>即可。<strong>Markdown编辑器</strong>使用浏览器离线存储将内容保存在本地。</p>
<p>用户写博客的过程中，内容实时保存在浏览器缓存中，在用户关闭浏览器或者其它异常情况下，内容不会丢失。用户再次打开浏览器时，会显示上次用户正在编辑的没有发表的内容。</p>
<p>博客发表后，本地缓存将被删除。　</p>
<p>用户可以选择 <i class="icon-disk"></i> 把正在写的博客保存到服务器草稿箱，即使换浏览器或者清除缓存，内容也不会丢失。</p>
<blockquote>
<p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但为了您的数据安全，在联网后，<strong>请务必及时发表或者保存到服务器草稿箱</strong>。</p>
</blockquote>
<p>##浏览器兼容</p>
<ol>
<li>目前，本编辑器对Chrome浏览器支持最为完整。建议大家使用较新版本的Chrome。</li>
<li>IE９以下不支持</li>
<li>IE９，１０，１１存在以下问题<ol>
<li>不支持离线功能</li>
<li>IE9不支持文件导入导出</li>
<li>IE10不支持拖拽文件导入</li>
</ol>
</li>
</ol>
<hr>
<p><a href="http://oq4pzgtcb.bkt.clouddn.com/blogs/MarkDown语法.md" target="_blank" rel="external">下载本Markdown</a></p>
]]></content>
      
        
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS安装与使用Maven]]></title>
      <url>/2017/10/18/CentOS%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8Maven/</url>
      <content type="html"><![CDATA[<p><strong>1. 安装 Maven</strong></p>
<p><em>Maven 简介</em></p>
<p>Apache Maven 是一个软件项目管理及自动构建工具，由 Apache 软件基金会所提供。基于项目对象模型（缩写：POM）概念，Maven 利用一小段描述信息能管理一个项目的构建、报告和文档等步骤。</p>
<p><em>Java 安装</em></p>
<p>首先我们需要准备 Java 开发环境，使用下面命令来安装 Java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install java-1.8.0-openjdk-devel</div></pre></td></tr></table></figure></p>
<p><em>Maven 下载</em></p>
<p>我们可以从官网下载页获取最新的下载链接（Binary tar.gz archive）。</p>
<p>然后我们使用 <code>wget</code> 命令将其下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /home</div><div class="line">wget http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.0/binaries/apache-maven-3.5.0-bin.tar.gz</div></pre></td></tr></table></figure></p>
<p>解压压缩包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar xzvf apache-maven-3.5.0-bin.tar.gz</div></pre></td></tr></table></figure></p>
<p>将文件夹移动至 <code>/usr/local/</code> 目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv apache-maven-3.5.0  /usr/local/apache-maven</div></pre></td></tr></table></figure></p>
<p><em>配置环境变量</em></p>
<p>编辑 <code>/etc/profile</code>，在最下方添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MAVEN_HOME=/usr/local/apache-maven</div><div class="line">export MAVEN_HOME</div><div class="line">export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</div></pre></td></tr></table></figure></p>
<p>运行如下命令使环境变量生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure></p>
<p>检查 Maven 是否成功安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn -version</div></pre></td></tr></table></figure></p>
<p><strong>2. Maven 简单使用</strong></p>
<p><em>构建</em></p>
<p>我们可以通过 <code>archetype:generate</code> 命令快速构建出项目骨架。</p>
<p><em>Hello World</em></p>
<p>我们使用该命令创建一个 helloworld 项目。过程中可一路回车键选择默认值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /home</div><div class="line">mvn archetype:generate -DgroupId=helloworld -DartifactId=helloworld</div></pre></td></tr></table></figure></p>
<p><code>mvn</code> 指令首次执行时，会从远程“中央仓库”下载一些必需的文件，请耐心等待。</p>
<p><em>项目结构</em></p>
<p>可到 <code>/home/helloworld</code> 查看项目结构。</p>
<ul>
<li><p><code>/pom.xml</code> 为项目对象模型（Maven 项目配置）</p>
</li>
<li><p><code>/src/main/java</code> 用于存放源代码</p>
</li>
<li><p><code>/src/test/java</code> 用于存放单元测试代码</p>
</li>
<li><p><code>/src/target</code> 用于存放编译、打包后的输出文件</p>
</li>
</ul>
<p><em>编译</em></p>
<p>进入项目目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /home/helloworld</div></pre></td></tr></table></figure></p>
<p>执行编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn compile</div></pre></td></tr></table></figure></p>
<p>重新开启 <code>helloworld</code> 项目文件夹，可以看到生成 <code>target</code> 目录。</p>
<p><em>运行</em></p>
<p>你可以使用 <code>mvn</code> 指明 <code>mainClass</code> 来运行项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn exec:java -Dexec.mainClass=&quot;helloworld.App&quot;</div></pre></td></tr></table></figure></p>
<p>完成后可看到终端输出了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello World!</div></pre></td></tr></table></figure></p>
<p><em>测试</em></p>
<p>我们可以通过 <em>test</em> 指令来运行单元测试代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn test</div></pre></td></tr></table></figure></p>
<p>完成后可看到终端输出测试结果。</p>
<p><em>打包</em></p>
<p>通过 <code>package</code> 指令来执行打包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn package</div></pre></td></tr></table></figure></p>
<p>重新开启 <code>target</code> 目录，可看到生成了 <code>.jar</code> 文件。</p>
<p>从输出的日志可以看到，执行 <code>package</code> 前，会先执行 <code>compile</code> 及 <code>test</code>，最后执行了打包。</p>
]]></content>
      
        
        <tags>
            
            <tag> linux maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建Jenkins环境]]></title>
      <url>/2017/10/18/CentOS%E6%90%AD%E5%BB%BAJenkins%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p><strong>1. 安装 Jenkins</strong></p>
<p><em>Jenkins 简介</em></p>
<p>Jenkins 是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p>
<p><em>Java 安装</em></p>
<p>首先我们需要准备 Java 环境，使用下面命令来安装 Java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install java-1.8.0-openjdk-devel</div></pre></td></tr></table></figure></p>
<p><em>Jenkins 安装</em></p>
<p>为了使用 Jenkins 仓库，我们要执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</div><div class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</div></pre></td></tr></table></figure></p>
<p>如果您以前从 Jenkins 导入过 key，那么 <code>rpm --import</code> 将失败，因为您已经有一个 key。请忽略，继续下面步骤。</p>
<p>接着我们可以使用 <code>yum</code> 安装 Jenkins：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install jenkins</div></pre></td></tr></table></figure></p>
<p><strong>2. 启动 Jenkins</strong></p>
<p><em>启动</em></p>
<p>启动 Jenkins 并设置为开机启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl start jenkins.service</div><div class="line">chkconfig jenkins on</div></pre></td></tr></table></figure></p>
<p><em>测试访问</em></p>
<p>Jenkins 默认运行在 8080端口。</p>
]]></content>
      
        
        <tags>
            
            <tag> linux jenkins </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建Mono开发环境]]></title>
      <url>/2017/10/18/CentOS%E6%90%AD%E5%BB%BAMono%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p><strong>1. 安装 Mono</strong></p>
<p><em>安装前的准备</em></p>
<p>执行命令安装 <code>yum-utils</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install yum-utils</div></pre></td></tr></table></figure></p>
<p>执行命令添加安装包仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm --import &quot;http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF&quot;</div></pre></td></tr></table></figure></p>
<p>设置配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum-config-manager --add-repo http://download.mono-project.com/repo/centos7/</div></pre></td></tr></table></figure></p>
<p><em>安装 Mono</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install mono-complete</div></pre></td></tr></table></figure></p>
<p><strong>2. 创建并运行 Mono 程序</strong></p>
<p><em>创建 Mono 程序</em></p>
<p>执行命令创建程序文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /home</div><div class="line">mkdir monohello</div><div class="line">cd monohello/</div><div class="line">touch HelloWorld.cs</div></pre></td></tr></table></figure></p>
<p>修改 <code>HelloWorld.cs</code> 文件为如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">public class HelloWorld</div><div class="line">&#123;</div><div class="line">  public static void Main()</div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(&quot;Hello Mono World&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>运行 Mono 程序</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mcs HelloWorld.cs</div><div class="line">mono HelloWorld.exe</div></pre></td></tr></table></figure></p>
<p><strong>3. 完成</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建.NET Core开发环境]]></title>
      <url>/2017/10/18/CentOS%E6%90%AD%E5%BB%BA-NET-Core%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p><strong>1. 安装 .Net Core 执行代码</strong></p>
<p>.NET Core 的官方文档很详细，本实验带你建立一个.NET Core 1.1的Web运行环境，更多内容可以可以查阅 <a href="https://docs.microsoft.com/zh-cn/dotnet/core/get-started" target="_blank" rel="external">微软官方文档</a>。</p>
<p><em>安装 .Net Core</em></p>
<p>执行命令安装 <code>.Net Core</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo yum -y install libunwind libicu</div><div class="line">curl -SL -o dotnet.tar.gz https://go.microsoft.com/fwlink/?linkid=848821</div><div class="line">sudo mkdir -p /usr/local/dotnet &amp;&amp; sudo tar zxf dotnet.tar.gz -C /usr/local/dotnet</div><div class="line">sudo ln -s /usr/local/dotnet/dotnet /usr/local/bin</div></pre></td></tr></table></figure></p>
<p><em>创建 Hello World 控制台程序</em></p>
<p>创建并运行 Console 项目 <code>hwapp</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dotnet new console -o hwapp</div><div class="line">cd hwapp</div><div class="line">dotnet restore</div><div class="line">dotnet run</div></pre></td></tr></table></figure></p>
<p><em>创建并运行 ASP.NET Core Web 应用</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd /home</div><div class="line">mkdir aspnetcoreapp</div><div class="line">cd aspnetcoreapp</div><div class="line">dotnet new web</div><div class="line">dotnet restore</div><div class="line">dotnet run</div></pre></td></tr></table></figure></p>
<p><strong>2. 安装 Jexus</strong></p>
<p>通常情况下，对外提供的 Web 服务都在 <code>80</code>或者<code>443</code> 端口，而我们的 Web 应用程序默认运行在5000端口，在 Windows 上可以使用 IIS 来宿主 ASP.NET Core，在 Linux 下可以用 Nginx，Apache，Jexus 等来作为宿主。本教程向大家推荐使用国内社区自行开发的 <a href="http://www.linuxdot.net/" target="_blank" rel="external">Jexus</a>。</p>
<p><em>安装独立版 Jexus</em></p>
<p>执行命令安装独立版的 <code>Jexus</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl https://jexus.org/release/x64/install.sh|sh</div></pre></td></tr></table></figure></p>
<p>配置 Jexus</p>
<p>执行命令将 asp.net core 应用部署到 Jexus<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /var/www/aspnetcore</div><div class="line">dotnet publish -o /var/www/aspnetcore</div></pre></td></tr></table></figure></p>
<p>执行命令启动服务监听端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dotnet /var/www/aspnetcore/aspnetcoreapp.dll</div></pre></td></tr></table></figure></p>
<p><em>配置 jexus 网站：</em></p>
<p>创建 <code>aspnetcore</code> 配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/jexus/siteconf</div><div class="line">cp default aspnetcore</div></pre></td></tr></table></figure></p>
<p>修改 <code>aspnetcore</code> 配置文件为如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">port=80</div><div class="line">root=/ /var/www/aspnetcore</div><div class="line">hosts= *    #OR your.com,*.your.com</div><div class="line"></div><div class="line">AppHost=&#123;</div><div class="line">    cmd=dotnet /var/www/aspnetcore/aspnetcoreapp.dll;</div><div class="line">    root=/var/www/aspnetcore;</div><div class="line">    port=0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>启动 Jexus</em></p>
<p>执行命令删除原有默认配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf /usr/jexus/siteconf/default</div></pre></td></tr></table></figure></p>
<p>执行命令启动 Jexus<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sh /usr/jexus/jws restart</div><div class="line">sh /usr/jexus/jws start</div></pre></td></tr></table></figure></p>
<ol>
<li>完成</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建基于ZIPKIN的数据追踪系统]]></title>
      <url>/2017/10/18/CentOS%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EZIPKIN%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%BD%E8%B8%AA%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p><strong>1. 配置 Java 环境</strong></p>
<p><em>安装 JDK</em></p>
<p><code>Zipkin</code> 使用 Java8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install java-1.8.0-openjdk* -y</div></pre></td></tr></table></figure></p>
<p>安装完成后，查看是否安装成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure></p>
<p><strong>2. 安装 Zipkin</strong></p>
<p>新建目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/release/zipkin &amp;&amp; cd &quot;$_&quot;</div></pre></td></tr></table></figure></p>
<p>下载 Zipkin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -O zipkin.jar &apos;https://search.maven.org/remote_content?g=io.zipkin.java&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec&apos;</div></pre></td></tr></table></figure></p>
<p>启动 Zipkin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar zipkin.jar</div></pre></td></tr></table></figure></p>
<p>Zipkin 默认监听 9411 端口， 使用浏览器访问 <a href="http://yourip:9411" target="_blank" rel="external">http://yourip:9411</a> 或 <a href="http://yourdomain.com:9411" target="_blank" rel="external">http://yourdomain.com:9411</a> 即可看到 Zipkin 自带的图形化界面</p>
<p><strong>3. 配置 MySQL 数据持久化方案</strong></p>
<p>Zipkin 支持的持久化方案很多，如： Cassandra, MySQL, Elasticsearch。本实验使用 MySQL 5.7 作为数据持久化方案。</p>
<p><em>安装 MySQL 5.7</em></p>
<p>使用 <code>Ctrl + C</code> 退出上个步骤的 Java 进程并下载 rmp 包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</div></pre></td></tr></table></figure></p>
<p>安装 rpm 包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh mysql57-community-release-el7-9.noarch.rpm</div></pre></td></tr></table></figure></p>
<p>安装 MySQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mysql-community-server -y</div></pre></td></tr></table></figure></p>
<p>启动 MySQL 服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start mysqld.service</div></pre></td></tr></table></figure></p>
<p><em>设置 MySQL 密码</em></p>
<p>获取 <code>root</code> 临时密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep &apos;temporary password&apos; /var/log/mysqld.log | awk &apos;&#123;print $NF&#125;&apos;</div></pre></td></tr></table></figure></p>
<p>使用上一步的获得的临时密码登入 MySQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -uroot -p</div></pre></td></tr></table></figure></p>
<p>设置 MySQL 账户 <code>root</code> 密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;Xx$Zipkin2017&apos;;</div></pre></td></tr></table></figure></p>
<p>退出 MySQL, 回到 Bash shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exit;</div></pre></td></tr></table></figure></p>
<p><em>初始化 Zipkin 数据库</em></p>
<p>编写初始化脚本</p>
<p>请在 <code>/data/release/zipkin</code> 目录下创建 <code>zipkin_init.sql</code>，参考下面的内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE IF NOT EXISTS zipkin_spans (</div><div class="line">  `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT &apos;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&apos;,</div><div class="line">  `trace_id` BIGINT NOT NULL,</div><div class="line">  `id` BIGINT NOT NULL,</div><div class="line">  `name` VARCHAR(255) NOT NULL,</div><div class="line">  `parent_id` BIGINT,</div><div class="line">  `debug` BIT(1),</div><div class="line">  `start_ts` BIGINT COMMENT &apos;Span.timestamp(): epoch micros used for endTs query and to implement TTL&apos;,</div><div class="line">  `duration` BIGINT COMMENT &apos;Span.duration(): micros used for minDuration and maxDuration query&apos;</div><div class="line">) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;</div><div class="line"></div><div class="line">ALTER TABLE zipkin_spans ADD UNIQUE KEY(`trace_id_high`, `trace_id`, `id`) COMMENT &apos;ignore insert on duplicate&apos;;</div><div class="line">ALTER TABLE zipkin_spans ADD INDEX(`trace_id_high`, `trace_id`, `id`) COMMENT &apos;for joining with zipkin_annotations&apos;;</div><div class="line">ALTER TABLE zipkin_spans ADD INDEX(`trace_id_high`, `trace_id`) COMMENT &apos;for getTracesByIds&apos;;</div><div class="line">ALTER TABLE zipkin_spans ADD INDEX(`name`) COMMENT &apos;for getTraces and getSpanNames&apos;;</div><div class="line">ALTER TABLE zipkin_spans ADD INDEX(`start_ts`) COMMENT &apos;for getTraces ordering and range&apos;;</div><div class="line"></div><div class="line">CREATE TABLE IF NOT EXISTS zipkin_annotations (</div><div class="line">  `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT &apos;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&apos;,</div><div class="line">  `trace_id` BIGINT NOT NULL COMMENT &apos;coincides with zipkin_spans.trace_id&apos;,</div><div class="line">  `span_id` BIGINT NOT NULL COMMENT &apos;coincides with zipkin_spans.id&apos;,</div><div class="line">  `a_key` VARCHAR(255) NOT NULL COMMENT &apos;BinaryAnnotation.key or Annotation.value if type == -1&apos;,</div><div class="line">  `a_value` BLOB COMMENT &apos;BinaryAnnotation.value(), which must be smaller than 64KB&apos;,</div><div class="line">  `a_type` INT NOT NULL COMMENT &apos;BinaryAnnotation.type() or -1 if Annotation&apos;,</div><div class="line">  `a_timestamp` BIGINT COMMENT &apos;Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp&apos;,</div><div class="line">  `endpoint_ipv4` INT COMMENT &apos;Null when Binary/Annotation.endpoint is null&apos;,</div><div class="line">  `endpoint_ipv6` BINARY(16) COMMENT &apos;Null when Binary/Annotation.endpoint is null, or no IPv6 address&apos;,</div><div class="line">  `endpoint_port` SMALLINT COMMENT &apos;Null when Binary/Annotation.endpoint is null&apos;,</div><div class="line">  `endpoint_service_name` VARCHAR(255) COMMENT &apos;Null when Binary/Annotation.endpoint is null&apos;</div><div class="line">) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;</div><div class="line"></div><div class="line">ALTER TABLE zipkin_annotations ADD UNIQUE KEY(`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT &apos;Ignore insert on duplicate&apos;;</div><div class="line">ALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`, `span_id`) COMMENT &apos;for joining with zipkin_spans&apos;;</div><div class="line">ALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`) COMMENT &apos;for getTraces/ByIds&apos;;</div><div class="line">ALTER TABLE zipkin_annotations ADD INDEX(`endpoint_service_name`) COMMENT &apos;for getTraces and getServiceNames&apos;;</div><div class="line">ALTER TABLE zipkin_annotations ADD INDEX(`a_type`) COMMENT &apos;for getTraces&apos;;</div><div class="line">ALTER TABLE zipkin_annotations ADD INDEX(`a_key`) COMMENT &apos;for getTraces&apos;;</div><div class="line">ALTER TABLE zipkin_annotations ADD INDEX(`trace_id`, `span_id`, `a_key`) COMMENT &apos;for dependencies job&apos;;</div><div class="line"></div><div class="line">CREATE TABLE IF NOT EXISTS zipkin_dependencies (</div><div class="line">  `day` DATE NOT NULL,</div><div class="line">  `parent` VARCHAR(255) NOT NULL,</div><div class="line">  `child` VARCHAR(255) NOT NULL,</div><div class="line">  `call_count` BIGINT</div><div class="line">) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;</div><div class="line"></div><div class="line">ALTER TABLE zipkin_dependencies ADD UNIQUE KEY(`day`, `parent`, `child`);</div></pre></td></tr></table></figure>
<p>登录 Mysql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root --password=&apos;Xx$Zipkin2017&apos;</div></pre></td></tr></table></figure></p>
<p>创建 Zipkin 数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create database zipkin;</div></pre></td></tr></table></figure></p>
<p>切换数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use zipkin;</div></pre></td></tr></table></figure></p>
<p>初始化表及索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /data/release/zipkin/zipkin_init.sql</div></pre></td></tr></table></figure></p>
<p>执行以下命令会看到<code>zipkin_annotations</code>, <code>zipkin_dependencies</code>, <code>zipkin_spans</code> 三张数据表，说明初始化成功了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show tables;</div></pre></td></tr></table></figure></p>
<p>退出 MySQL, 回到 Bash shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exit</div></pre></td></tr></table></figure></p>
<p><em>启动 Zipkin</em></p>
<p>注： 此处默认使用教程生成的密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /data/release/zipkin</div><div class="line">STORAGE_TYPE=mysql MYSQL_HOST=localhost MYSQL_TCP_PORT=3306 MYSQL_DB=zipkin MYSQL_USER=root MYSQL_PASS=&apos;Xx$Zipkin2017&apos; \</div><div class="line">nohup java -jar zipkin.jar &amp;</div></pre></td></tr></table></figure></p>
<p><strong>4. 创建具有数据上报能力的Demo</strong></p>
<p>搭建 NodeJS 环境</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -</div><div class="line">yum install nodejs -y</div></pre></td></tr></table></figure>
<p><em>创建Demo目录</em></p>
<p>创建 <code>/data/release/service_a</code> 目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/release/service_a &amp;&amp; cd &quot;$_&quot;</div></pre></td></tr></table></figure></p>
<p><em>使用 NPM 安装相关依赖</em></p>
<p>请在 <code>/data/release/service_a</code> 目录下创建并编辑 <code>package.json</code>，参考下面的内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;service_a&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;&quot;,</div><div class="line">  &quot;main&quot;: &quot;index.js&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;&#125;,</div><div class="line">  &quot;author&quot;: &quot;&quot;,</div><div class="line">  &quot;license&quot;: &quot;ISC&quot;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;express&quot;: &quot;^4.15.3&quot;,</div><div class="line">    &quot;zipkin&quot;: &quot;^0.7.2&quot;,</div><div class="line">    &quot;zipkin-instrumentation-express&quot;: &quot;^0.7.2&quot;,</div><div class="line">    &quot;zipkin-transport-http&quot;: &quot;^0.7.2&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>安装相关依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p><em>创建并编辑 <code>app.js</code></em></p>
<p>请在 <code>/data/release/service_a</code> 目录下创建 <code>app.js</code>，参考下面的内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">const express = require(&apos;express&apos;);</div><div class="line">const &#123;Tracer, ExplicitContext, BatchRecorder&#125; = require(&apos;zipkin&apos;);</div><div class="line">const &#123;HttpLogger&#125; = require(&apos;zipkin-transport-http&apos;);</div><div class="line">const zipkinMiddleware = require(&apos;zipkin-instrumentation-express&apos;).expressMiddleware;</div><div class="line"></div><div class="line">const ctxImpl = new ExplicitContext();</div><div class="line">const recorder = new BatchRecorder(&#123;</div><div class="line">    logger: new HttpLogger( &#123;</div><div class="line">        endpoint: &apos;http://127.0.0.1:9411/api/v1/spans&apos;</div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const tracer = new Tracer(&#123;ctxImpl, recorder&#125;);</div><div class="line"></div><div class="line">const app = express();</div><div class="line"></div><div class="line">app.use(zipkinMiddleware(&#123;</div><div class="line">  tracer,</div><div class="line">  serviceName: &apos;service-a&apos;</div><div class="line">&#125;));</div><div class="line"></div><div class="line">app.use(&apos;/&apos;, (req, res, next) =&gt; &#123;</div><div class="line">    res.send(&apos;hello world&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(3000, () =&gt; &#123;</div><div class="line">  console.log(&apos;service-a listening on port 3000!&apos;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><em>启动服务</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node app.js</div></pre></td></tr></table></figure></p>
<p>该服务监听 <code>3000</code> 端口， 使用浏览器访问 <a href="http://yourip:3000" target="_blank" rel="external">http://yourip:3000</a> 或 <a href="http://yourdomain.com:3000" target="_blank" rel="external">http://yourdomain.com:3000</a> 后，看到“hello world” 的文本字样说明服务已经正常工作</p>
<p><strong>5. 部署完成</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> linux zipkin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建JavaWeb开发环境]]></title>
      <url>/2017/10/18/CentOS%E6%90%AD%E5%BB%BAJavaWeb%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p><strong>1. 搭建 Java 开发环境</strong></p>
<p>此教程教大家如何配置 JDK 、Tomcat 和 Mysql</p>
<p><em>安装 JDK</em></p>
<p>JDK 是开发Java程序必须安装的软件，我们查看一下 <code>yum</code> 源里面的 JDK：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum list java*</div></pre></td></tr></table></figure></p>
<p>选择适合本机的JDK，并安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install java-1.7.0-openjdk* -y</div></pre></td></tr></table></figure></p>
<p>安装完成后，查看是否安装成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure></p>
<p><em>安装 Tomcat</em></p>
<p>Tomcat 是一个应用服务器，是开发和调试 <code>jsp</code> 程序的首选，可以利用它来响应 HTML 页面的访问请求。</p>
<p>进入本地文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/local</div></pre></td></tr></table></figure></p>
<p>到官网找到 Tomcat 的下载链接，并下载到服务器中, 这里提供了一个快速下载 Tomcat 的地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://mc.qcloudimg.com/static/archive/fa66329388f85c08e8d6c12ceb8b2ca3/apache-tomcat-7.0.77.tar.gz</div></pre></td></tr></table></figure></p>
<p>解压这个文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxf apache-tomcat-7.0.77.tar.gz</div></pre></td></tr></table></figure></p>
<p>重命名这个文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv apache-tomcat-7.0.77 /usr/local/tomcat7</div></pre></td></tr></table></figure></p>
<p>进入 bin 文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/tomcat7/bin</div></pre></td></tr></table></figure></p>
<p>给这个文件夹下的所有 <code>shell</code> 脚本授予权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 777 *.sh</div></pre></td></tr></table></figure>
<p>开启tomcat服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./startup.sh</div></pre></td></tr></table></figure></p>
<p><em>安装 MySQL</em><br>使用 <code>yum</code> 安装 MySQL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y mysql-server mysql mysql-devel</div></pre></td></tr></table></figure></p>
<p>安装完成后，启动 MySQL 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld restart</div></pre></td></tr></table></figure></p>
<p>设置 MySQL 账户 <code>root</code> 密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/mysqladmin -u root password &apos;NC7eKyAv&apos;</div></pre></td></tr></table></figure></p>
<p><strong>2. 访问 Tomcat</strong></p>
<p>访问 Tomcat</p>
<p>此时，访问 <a href="http://yourip:8080" target="_blank" rel="external">http://yourip:8080</a> 或 <a href="http://yourdomain.com" target="_blank" rel="external">http://yourdomain.com</a> 可访问到刚才启动的 Tomcat 的内置示例页面</p>
]]></content>
      
        
        <tags>
            
            <tag> linux java javaweb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建FireKylin个人博客]]></title>
      <url>/2017/10/18/CentOS%E6%90%AD%E5%BB%BAFireKylin%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><strong>1. 运行环境准备</strong></p>
<p><em>安装 Node.js</em></p>
<p>使用 <code>yum</code> 命令安装 Node.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nodejs -y</div></pre></td></tr></table></figure></p>
<p><em>使用 NPM 安装 PM2</em></p>
<p>通过 <code>NPM</code> 安装进程管理模块 <code>PM2</code>。它是 Node.js 的一个进程管理模块，之后我们会使用它来管理我们的个人网站进程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install pm2 -g</div></pre></td></tr></table></figure></p>
<p><em>安装 MySQL</em></p>
<p>使用 yum 安装 MySQL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</div><div class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</div><div class="line">yum install mysql-community-server -y</div></pre></td></tr></table></figure></p>
<p>启动 MySQL 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld restart</div></pre></td></tr></table></figure></p>
<p>设置 MySQL 账户 <code>root</code> 密码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/mysqladmin -u root password &apos;4aE5aOii4Firekylin&apos;</div></pre></td></tr></table></figure>
<p><em>安装 Nginx</em></p>
<p>在 CentOS 上，可直接使用 <code>yum</code> 来安装 Nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nginx -y</div></pre></td></tr></table></figure></p>
<p><strong>2. 安装并配置 Firekylin</strong></p>
<p><em>安装 Firekylin</em></p>
<p>在服务器上下载安装包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://firekylin.org/release/latest.tar.gz</div></pre></td></tr></table></figure></p>
<p>解压安装包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar zvxf latest.tar.gz</div></pre></td></tr></table></figure></p>
<p>安装程序依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd firekylin</div><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>复制项目下的 <code>pm2_default.json</code> 文件生成新文件 <code>pm2.json</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp pm2_default.json pm2.json</div></pre></td></tr></table></figure></p>
<p>修改 <code>pm2.json</code> 文件中的 <code>cwd</code> 配置值为项目的当前路径 <code>/root/firekylin</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;apps&quot;: [&#123;</div><div class="line">    &quot;name&quot;: &quot;firekylin&quot;,</div><div class="line">    &quot;script&quot;: &quot;www/production.js&quot;,</div><div class="line">    &quot;cwd&quot;: &quot;/root/firekylin&quot;,</div><div class="line">    &quot;exec_mode&quot;: &quot;fork&quot;,</div><div class="line">    &quot;max_memory_restart&quot;: &quot;1G&quot;,</div><div class="line">    &quot;autorestart&quot;: true,</div><div class="line">    &quot;node_args&quot;: [],</div><div class="line">    &quot;args&quot;: [],</div><div class="line">    &quot;env&quot;: &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">  &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后通过以下命令启动项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 startOrReload pm2.json</div></pre></td></tr></table></figure></p>
<p>Firekylin 已经启动成功，使用浏览器直接访问 <a href="http://yourip:8360/" target="_blank" rel="external">http://yourip:8360/</a> 或 <a href="http://yourdomain.com:8360即可看到" target="_blank" rel="external">http://yourdomain.com:8360即可看到</a> Firekylin 的配置界面。</p>
<p><em>配置信息</em></p>
<p>配置过程输入参数如截图所示，其中数据库信息中的帐号字段设置为 <code>root</code>，密码字段设置为 <code>4aE5aOii4Firekylin</code>，数据库名字段设置为 <code>firekylin</code>，主机字段设置为 <code>127.0.0.1</code>，其他字段使用默认值；后台管理帐号中的帐号字段使用默认值 <code>admin</code>，密码字段设置为 <code>4aE5aOii4Admin</code>：</p>
<p><img src="https://mc.qcloudimg.com/static/img/2b6b8757d891a5c67581f64b0c75cc42/1.png" alt=""></p>
<p>配置完成后可以通过后台管理帐号设置的<code>帐号</code>和<code>密码</code>登录博客管理后台，其值分别为 <code>admin</code> 和 <code>4aE5aOii4Admin</code>，截图如下所示：</p>
<p><img src="https://mc.qcloudimg.com/static/img/d5b5b0b892c165eb6d80e8a699d22657/1.png" alt=""></p>
<p><em>配置 Nginx</em></p>
<p>下面我们就配置 Nginx 使用域名访问我们的网站了。<br>复制项目下的 <code>nginx_default.conf</code> 为 <code>nginx.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp nginx_default.conf nginx.conf</div></pre></td></tr></table></figure></p>
<p>修改 <code>nginx.conf</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name www.yourdomain.com; #将 www.yourdomain.com 替换为之前注册并解析的域名</div><div class="line">    root /root/firekylin;</div><div class="line">    set $node_port 8360;</div><div class="line"></div><div class="line">    index index.js index.html index.htm;</div><div class="line"></div><div class="line">    location ^~ /.well-known/acme-challenge/ &#123;</div><div class="line">      alias /root/firekylin/ssl/challenges/;</div><div class="line">      try_files $uri = 404;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_http_version 1.1;</div><div class="line">        proxy_set_header X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_set_header Host $http_host;</div><div class="line">        proxy_set_header X-NginX-Proxy true;</div><div class="line">        proxy_set_header Upgrade $http_upgrade;</div><div class="line">        proxy_set_header Connection &quot;upgrade&quot;;</div><div class="line">        proxy_pass http://127.0.0.1:$node_port$request_uri;</div><div class="line">        proxy_redirect off;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location = /development.js &#123;</div><div class="line">        deny all;</div><div class="line">    &#125;</div><div class="line">    location = /testing.js &#123;</div><div class="line">        deny all;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location = /production.js &#123;</div><div class="line">        deny all;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将 <code>nginx.conf</code> 文件软链到 <code>nginx</code> 配置目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /root/firekylin/nginx.conf /etc/nginx/conf.d/firekylin.conf</div></pre></td></tr></table></figure></p>
<p>重启 <code>Nginx</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service nginx restart</div></pre></td></tr></table></figure></p>
<p><strong>3. 完成</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> linux firekylin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建PySpider爬虫服务]]></title>
      <url>/2017/10/18/CentOS%E6%90%AD%E5%BB%BAPySpider%E7%88%AC%E8%99%AB%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p><strong>1. 环境准备</strong></p>
<p><em>前置环境部署</em></p>
<p>在开始部署前，我们需要做一些前置准备 。</p>
<p><code>yum</code> 更新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum update -y</div></pre></td></tr></table></figure></p>
<p>安装开发编译工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gcc gcc-c++ -y</div></pre></td></tr></table></figure></p>
<p>安装依赖库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install python-pip python-devel python-distribute libxml2 libxml2-devel python-lxml libxslt libxslt-devel openssl openssl-devel -y</div></pre></td></tr></table></figure></p>
<p>升级pip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --upgrade pip</div></pre></td></tr></table></figure></p>
<p><strong>2. 部署 mariadb</strong></p>
<p>由于 CentOS 7 中 MySQL 数据库已从默认的程序列表中移除，我们使用 mariadb 代替。</p>
<p><em>安装 <code>mariadb</code></em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mariadb-server mariadb -y</div></pre></td></tr></table></figure></p>
<p><em>启动 <code>mariadb</code> 服务</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start mariadb</div></pre></td></tr></table></figure></p>
<p><em>设置 root 密码</em></p>
<p>默认的root用户密码为空，你可以使用以下命令来创建 root 用户的密码（password 后的 <code>uI7AAS5q</code> 可以改为任何你希望设置的密码）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin -u root password &quot;uI7AAS5q&quot;</div></pre></td></tr></table></figure></p>
<p><em>检查是否安装成功</em></p>
<p>现在你可以尝试通过以下命令来连接到 Mysql 服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure></p>
<p>然后输入您刚才设置的密码 （ 默认：<code>uI7AAS5q</code> ），如果一切正常，您应该可以在命令行看到以 <code>MariaDB [(none)]&gt;</code> 或 <code>mysql&gt;</code> 开头的提示了，说明连接成功。</p>
<p>此时输入 <code>SHOW DATABASES;</code> 并回车，应该可以看到类似下面这样的输出，说明一切正常。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SHOW DATABASES;</div><div class="line">+----------+</div><div class="line">| Database |</div><div class="line">+----------+</div><div class="line">| mysql    |</div><div class="line">| test     |</div><div class="line">+----------+</div><div class="line">2 rows in set (0.13 sec)</div></pre></td></tr></table></figure></p>
<p>完成后，可以通过快捷键 <code>Ctrl+C</code> 或命令行键入 <code>exit</code> 来退出，进入下一步。</p>
<p><strong>3. 部署 redis</strong></p>
<p><em>下载、解压安装包</em></p>
<p>下载安装包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://download.redis.io/redis-stable.tar.gz</div></pre></td></tr></table></figure></p>
<p>解压安装包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xzvf redis-stable.tar.gz</div></pre></td></tr></table></figure></p>
<p>移动解压包到 <code>/usr/local</code> 内</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv redis-stable /usr/local/redis</div></pre></td></tr></table></figure>
<p>编译安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/redis</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
<p><em>设置 redis 配置</em></p>
<p>设置配置文件路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /etc/redis</div><div class="line">cp /usr/local/redis/redis.conf /etc/redis/redis.conf</div></pre></td></tr></table></figure></p>
<p>修改 <code>/etc/redis/redis.conf</code> 文件的 <code>daemonize</code> 配置项为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">daemonize yes</div></pre></td></tr></table></figure></p>
<p><em>启动 redis 服务</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/bin/redis-server /etc/redis/redis.conf</div></pre></td></tr></table></figure></p>
<p><strong>4. 部署 pyspider</strong></p>
<p><em>安装依赖</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip install --upgrade chardet</div><div class="line">easy_install mysql-connector==2.1.3</div><div class="line">easy_install redis</div></pre></td></tr></table></figure></p>
<p><em>安装 <code>pyspider</code></em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pyspider</div></pre></td></tr></table></figure></p>
<p><em>配置 pyspider</em></p>
<p>首先创建配置目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/pyspider</div></pre></td></tr></table></figure></p>
<p>然后 <code>/etc/pyspider</code> 目录下创建 <code>pyspider.conf.json</code>，参考下面的内容。</p>
<p>具体配置的说明文档请参考 <a href="http://docs.pyspider.org/en/latest/Deployment/#configjson" target="_blank" rel="external">官方文档</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;taskdb&quot;: &quot;mysql+taskdb://root:uI7AAS5q@127.0.0.1:3306/taskdb&quot;,</div><div class="line">  &quot;projectdb&quot;: &quot;mysql+projectdb://root:uI7AAS5q@127.0.0.1:3306/projectdb&quot;,</div><div class="line">  &quot;resultdb&quot;: &quot;mysql+resultdb://root:uI7AAS5q@127.0.0.1:3306/resultdb&quot;,</div><div class="line">  &quot;message_queue&quot;: &quot;redis://127.0.0.1:6379/db&quot;,</div><div class="line">  &quot;webui&quot;: &#123;</div><div class="line">    &quot;username&quot;: &quot;root&quot;,</div><div class="line">    &quot;password&quot;: &quot;uI7AAS5q&quot;,</div><div class="line">    &quot;need-auth&quot;: true</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中 mysql 配置中的 <code>root</code> 为您 mysql 的用户名， <code>root:</code> 后面的 <code>uI7AAS5q</code> 为您刚设置的密码。</p>
<p><code>webui</code> 配置中的 <code>username</code> 及 <code>password</code> 为您访问 WebUI 时候需要的用户名，你也可以不设置用户名密码，直接将 <code>need-auth</code> 设为 <code>false</code> 即可。</p>
<p><em>启动服务</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyspider -c /etc/pyspider/pyspider.conf.json</div></pre></td></tr></table></figure></p>
<p>如果一切正常，现在访问 <a href="http://yourip:5000" target="_blank" rel="external">http://yourip:5000</a> 或 <a href="http://yourdomain.com:5000，您应该可以看到" target="_blank" rel="external">http://yourdomain.com:5000，您应该可以看到</a> <code>pyspider dashboard</code> 的首页了。</p>
<p>服务能够正常启动后，我们需要让它能够在后台运行，您可以通过以下命令让服务在后台运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup pyspider -c /etc/pyspider/pyspider.conf.json &amp;</div></pre></td></tr></table></figure></p>
<p>也可以使用官方推荐的 <a href="http://supervisord.org/" target="_blank" rel="external">Supervisor</a> 来启动，这里就不详细介绍了，具体用法可以参考 Supervisor 的文档</p>
<p><em>*5 部署完成</em></p>
]]></content>
      
        
        <tags>
            
            <tag> linux pyspider </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建ShowDoc文档工具]]></title>
      <url>/2017/10/18/CentOS%E6%90%AD%E5%BB%BAShowDoc%E6%96%87%E6%A1%A3%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p><strong>1. 准备 <code>Nginx</code> + <code>PHP</code> 环境</strong></p>
<p><em>安装 Nginx</em></p>
<p>使用 <code>yum</code> 安装 <code>Nginx</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nginx</div></pre></td></tr></table></figure></p>
<p>修改 <code>/etc/nginx/nginx.conf</code> 文件为如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">user nginx;</div><div class="line">worker_processes auto;</div><div class="line">error_log /var/log/nginx/error.log;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">include /usr/share/nginx/modules/*.conf;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections 1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    access_log  /var/log/nginx/access.log  main;</div><div class="line"></div><div class="line">    sendfile            on;</div><div class="line">    tcp_nopush          on;</div><div class="line">    tcp_nodelay         on;</div><div class="line">    keepalive_timeout   65;</div><div class="line">    types_hash_max_size 2048;</div><div class="line"></div><div class="line">    include             /etc/nginx/mime.types;</div><div class="line">    default_type        application/octet-stream;</div><div class="line">    include /etc/nginx/conf.d/*.conf;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  127.0.0.1;</div><div class="line">        root         /var/www/html;</div><div class="line">        index index.php index.html</div><div class="line">        error_page  404              /404.html;</div><div class="line">        location = /40x.html &#123;</div><div class="line">        &#125;</div><div class="line">        error_page   500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">        &#125;</div><div class="line">        location ~ .php$ &#123;</div><div class="line">            root           /var/www/html;</div><div class="line">            fastcgi_pass   127.0.0.1:9000;</div><div class="line">            fastcgi_index  index.php;</div><div class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class="line">            include        fastcgi_params;</div><div class="line">        &#125;</div><div class="line">        location ~ /.ht &#123;</div><div class="line">            deny  all;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动 Nginx 并设置为开机启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service nginx start</div><div class="line">chkconfig nginx on</div></pre></td></tr></table></figure></p>
<p><em>安装 PHP</em></p>
<p>使用 <code>yum</code> 安装 <code>php-fpm</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install php php-gd php-fpm php-mcrypt php-mbstring php-mysql php-pdo</div></pre></td></tr></table></figure></p>
<p>启动 <code>php-fpm</code> 并设置为开机启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service php-fpm start</div><div class="line">chkconfig php-fpm on</div></pre></td></tr></table></figure></p>
<p><strong>2. 创建项目</strong></p>
<p><em>下载安装 Composer</em></p>
<p><code>Composer</code> 是 PHP 的一个依赖管理工具，推荐使用 Composer 创建 ShowDoc 项目。</p>
<p>执行如下命令安装 <code>Composer</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -sS https://getcomposer.org/installer | php</div><div class="line">mv composer.phar /usr/local/bin/composer</div></pre></td></tr></table></figure></p>
<p><em>设置 Composer 使用国内镜像</em></p>
<p>执行命令设置 <code>Composer</code> 使用国内镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure></p>
<p><em>使用 Composer 创建项目</em></p>
<p>执行命令创建项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /var/www/html/ &amp;&amp; composer create-project  showdoc/showdoc</div></pre></td></tr></table></figure></p>
<p><em>设置 showdoc 目录写权限</em></p>
<p>执行命令赋予 <code>showdoc</code> 下部分目录的写权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">chmod a+w showdoc/install</div><div class="line">chmod a+w showdoc/Sqlite</div><div class="line">chmod a+w showdoc/Sqlite/showdoc.db.php</div><div class="line">chmod a+w showdoc/Public/Uploads/</div><div class="line">chmod a+w showdoc/Application/Runtime</div><div class="line">chmod a+w showdoc/server/Application/Runtime</div><div class="line">chmod a+w showdoc/Application/Common/Conf/config.php</div><div class="line">chmod a+w showdoc/Application/Home/Conf/config.php</div></pre></td></tr></table></figure></p>
<p>创建完毕，您现在可以通过浏览器访问 <a href="http://yourip/showdoc/install/" target="_blank" rel="external">http://yourip/showdoc/install/</a> 或 <a href="http://yourdomain.com/showdoc/install/" target="_blank" rel="external">http://yourdomain.com/showdoc/install/</a> ，进行语言的选择以后即可通过 <a href="http://yourip/showdoc" target="_blank" rel="external">http://yourip/showdoc</a> 或 <a href="http://yourdomain/showdoc" target="_blank" rel="external">http://yourdomain/showdoc</a> 查看站点效果。</p>
]]></content>
      
        
        <tags>
            
            <tag> linux showdoc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建LNMP环境]]></title>
      <url>/2017/10/17/CentOS%E6%90%AD%E5%BB%BALNMP%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p><strong>1. 搭建 Nginx 静态服务器</strong></p>
<p><em>安装 Nginx</em></p>
<p>使用 <code>yum</code> 安装 Nginx：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nginx -y</div></pre></td></tr></table></figure></p>
<p>修改 <code>/etc/nginx/conf.d/default.conf</code>，去除对 IPv6 地址的监听，可参考下面的代码示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80 default_server;</div><div class="line">    # listen       [::]:80 default_server;</div><div class="line">    server_name  _;</div><div class="line">    root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">    # Load configuration files for the default server block.</div><div class="line">    include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    error_page 404 /404.html;</div><div class="line">        location = /40x.html &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    error_page 500 502 503 504 /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改完成后，启动 <code>Nginx</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx</div></pre></td></tr></table></figure></p>
<p>此时，可访问实验机器外网 HTTP 服务（<a href="http://yourip" target="_blank" rel="external">http://yourip</a> 或 <a href="http://yourdomain.com）来确认是否已经安装成功。" target="_blank" rel="external">http://yourdomain.com）来确认是否已经安装成功。</a></p>
<p>将 Nginx 设置为开机自动启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig nginx on</div></pre></td></tr></table></figure></p>
<p><strong>2. 安装 MySQL 数据库服务</strong></p>
<p><em>安装 MySQL</em></p>
<p>使用 <code>yum</code> 安装 MySQL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mysql-server -y</div></pre></td></tr></table></figure></p>
<p>安装完成后，启动 MySQL 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld restart</div></pre></td></tr></table></figure></p>
<p>设置 MySQL 账户 root 密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/mysqladmin -u root password &apos;WyIGmACk&apos;</div></pre></td></tr></table></figure></p>
<p>将 MySQL 设置为开机自动启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig mysqld on</div></pre></td></tr></table></figure></p>
<p><strong>3. 搭建 PHP 环境</strong></p>
<p><em>安装 PHP</em></p>
<p>使用 <code>yum</code> 安装 PHP：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install php php-fpm php-mysql -y</div></pre></td></tr></table></figure></p>
<p>安装之后，启动 <code>PHP-FPM</code> 进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service php-fpm start</div></pre></td></tr></table></figure></p>
<p>启动之后，可以使用下面的命令查看 <code>PHP-FPM</code> 进程监听哪个端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -nlpt | grep php-fpm</div></pre></td></tr></table></figure></p>
<p>把 <code>PHP-FPM</code> 也设置成开机自动启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig php-fpm on</div></pre></td></tr></table></figure></p>
<p><strong>4. 配置 Nginx 并运行 PHP 程序</strong></p>
<p><em>配置 <code>Nginx</code></em></p>
<p>在 <code>/etc/nginx/conf.d</code> 目录中新建一个名为 <code>php.conf</code> 的文件，并配置 <code>Nginx</code> 端口 ，配置示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 8000;</div><div class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class="line">    location ~ .php$ &#123;</div><div class="line">        root           /usr/share/php;</div><div class="line">        fastcgi_pass   127.0.0.1:9000;</div><div class="line">        fastcgi_index  index.php;</div><div class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class="line">        include        fastcgi_params;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改配置完成后，重启 <code>nginx</code> 服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service nginx restart</div></pre></td></tr></table></figure></p>
<p>这时候，我们就可以在<code>/usr/share/php</code> 目录下新建一个 <code>info.php</code> 文件来检查 php 是否安装成功了，文件内容参考如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php phpinfo(); ?&gt;</div></pre></td></tr></table></figure></p>
<p>此时，访问 <a href="http://yourip:8000/info.php" target="_blank" rel="external">http://yourip:8000/info.php</a> 或 <a href="http://yourdomain.com:8000/info.php" target="_blank" rel="external">http://yourdomain.com:8000/info.php</a> 可浏览到我们刚刚创建的 info.php 页面了</p>
]]></content>
      
        
        <tags>
            
            <tag> linux nginx mysql php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建LAMP环境]]></title>
      <url>/2017/10/17/CentOS%E6%90%AD%E5%BB%BALAMP%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p><strong>1. 搭建 MySQL 数据库</strong></p>
<p><em>安装 MySQL</em></p>
<p>使用 <code>yum</code> 安装 MySQL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mysql-server -y</div></pre></td></tr></table></figure></p>
<p>安装完成后，启动 MySQL 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld restart</div></pre></td></tr></table></figure></p>
<p>设置 MySQL 账户 root 密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/mysqladmin -u root password &apos;NGky9EKq&apos;</div></pre></td></tr></table></figure></p>
<p><strong>2. 安装 Apache 服务</strong></p>
<p><em>安装 Apache</em></p>
<p>使用 <code>yum</code> 安装 Apache<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install httpd -y</div></pre></td></tr></table></figure></p>
<p>启动 Apache 服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service httpd start</div></pre></td></tr></table></figure></p>
<p><strong>3. 安装 PHP</strong></p>
<p><em>安装 <code>PHP</code> 和 <code>PHP-MYSQL</code> 支持工具：</em></p>
<p>使用 <code>yum</code> 安装 PHP：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install php php-mysql -y</div></pre></td></tr></table></figure></p>
<p><strong>4. 检查安装是否成功</strong></p>
<p><em>检验 PHP 是否安装成功</em></p>
<p>我们在 <code>/var/www/html</code> 目录下创建一个<code>info.php</code>文件来检查php是否安装成功，示例代码参考如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php phpinfo(); ?&gt;</div></pre></td></tr></table></figure></p>
<p>此时，访问 <a href="http://yourip/info.php" target="_blank" rel="external">http://yourip/info.php</a> 或 <a href="http://yourdomain.com/info.php" target="_blank" rel="external">http://yourdomain.com/info.php</a> 可浏览到我们刚刚创建的 info.php 页面了</p>
]]></content>
      
        
        <tags>
            
            <tag> linux apache mysql php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于CentOS搭建Postfix、Dovecot邮件服务]]></title>
      <url>/2017/10/17/%E5%9F%BA%E4%BA%8ECentOS%E6%90%AD%E5%BB%BAPostfix%E3%80%81Dovecot%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p><strong>1. 准备域名</strong></p>
<ul>
<li><p>域名注册</p>
</li>
<li><p>域名解析</p>
<p>  域名购买完成后, 需要将域名解析到你的服务器IP</p>
<p>  完成该实验共需要添加两条记录：</p>
<ul>
<li><p>A 记录</p>
<p>  记录类型：A<br>  主机记录：@<br>  记录值：yourip</p>
</li>
<li><p>MX 记录</p>
<p>  记录类型：MX<br>  主机记录：@<br>记录值：yourdomain.com（替换为自己域名）</p>
</li>
</ul>
</li>
<li><p>生效检查</p>
<p>  域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 ，如：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping yourdomain.com</div></pre></td></tr></table></figure>
<p>  如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。（使用 <code>ctrl + c</code> 停止）</p>
<p>  检查 MX 记录</p>
<p>  替换下面命令中的 <code>yourdomain.com</code> 为您自己的注册的域名：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nslookup -q=mx yourdomain.com</div></pre></td></tr></table></figure>
<p>  如果 <code>nslookup</code> 命令返回的信息中含有你设置的域名的记录值，说明解析成功。</p>
</li>
</ul>
<p><strong>2. 实验之前</strong></p>
<p>配置一个功能完善的邮件服务器并不是一项容易的工作，本实验只是搭建了一个简单的邮件服务器，一些更为强大的功能还需要你去探索。</p>
<ul>
<li><p>Postfix、Dovecot 简介</p>
<p>  <em>Postfix</em></p>
<p>  Postfix 是一个标准的 MTA「Mail Transfer Agent」服务器，它负责通过 SMTP 协议管理发送到本机的邮件以及由本机发向外界的邮件。</p>
<p>  <em>Dovecot</em></p>
<p>  Dovecot 是一个优秀的 IMAP/POP 服务器用以接收外界发送到本机的邮件。</p>
</li>
<li><p>Postfix、Dovecot 安装</p>
<p>  在 CentOS 7 上，我们可以直接使用 <code>yum</code> 进行下载安装：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install postfix dovecot</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>3. Postfix</strong></p>
<ul>
<li><p>配置 Postfix</p>
<p>  有关教程中配置参数的具体含义，请参照 <a href="http://www.postfix.org/documentation.html" target="_blank" rel="external">Postfix 配置文档</a>。</p>
<p>  <em>配置</em></p>
<p>  在终端中输入以下命令以修改 <code>Postfix</code> 相关配置：</p>
<blockquote>
<p>注意：<strong>记得将 yourdomain.com 替换为你自己的域名</strong></p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">postconf -e &apos;myhostname = server.yourdomain.com&apos;</div><div class="line">postconf -e &apos;mydestination = localhost, localhost.localdomain&apos;</div><div class="line">postconf -e &apos;myorigin = $mydomain&apos;</div><div class="line">postconf -e &apos;mynetworks = 127.0.0.0/8&apos;</div><div class="line">postconf -e &apos;inet_interfaces = all&apos;</div><div class="line">postconf -e &apos;inet_protocols = all&apos;</div><div class="line">postconf -e &apos;mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain&apos;</div><div class="line">postconf -e &apos;home_mailbox = Maildir/&apos;</div><div class="line">postconf -e &apos;smtpd_sasl_type = dovecot&apos;</div><div class="line">postconf -e &apos;smtpd_sasl_path = private/auth&apos;</div><div class="line">postconf -e &apos;smtpd_sasl_auth_enable = yes&apos;</div><div class="line">postconf -e &apos;broken_sasl_auth_clients = yes&apos;</div><div class="line">postconf -e &apos;smtpd_sasl_authenticated_header = yes&apos;</div><div class="line">postconf -e &apos;smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination&apos;</div><div class="line">postconf -e &apos;smtpd_use_tls = yes&apos;</div><div class="line">postconf -e &apos;smtpd_tls_cert_file = /etc/pki/dovecot/certs/dovecot.pem&apos;</div><div class="line">postconf -e &apos;smtpd_tls_key_file = /etc/pki/dovecot/private/dovecot.pem&apos;</div></pre></td></tr></table></figure>
<p>  配置中 <code>Postfix</code> 使用 <code>sasl</code> 和 <code>tls</code> 来完成身份认证和传输信息加密。</p>
<p>  试验中使用了 <code>Dovecot</code> 默认的 <code>ssl</code> 证书和私钥，如果你需要修改为自己的，请替换最后两行配置的路径。</p>
<p>  <em>配置 smtps</em></p>
<p>  部分邮件客户端依赖于使用 <code>465</code> 端口提供加密连接，所以我们修改配置，允许 <code>Postfix</code> 使用 <code>465</code> 端口发送邮件。</p>
<p>  打开 <code>/etc/postfix/master.cf</code> 文件，将如下两行前的 <code>#</code> 去除：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">smtps inet n - n - - smtpd</div><div class="line">-o smtpd_tls_wrappermode=yes</div></pre></td></tr></table></figure>
<p>  （注意： -o 前要保留空格）</p>
<p>  <em>启动</em></p>
<p>  使用以下命令，将 <code>Postfix</code> 设为自动启动并首次启动该服务：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl enable postfix.service</div><div class="line">systemctl start  postfix.service</div></pre></td></tr></table></figure>
</li>
<li><p>Postfix 日志</p>
<p>  <code>Postfix</code> 系统的日志文件在系统的这个目录下的 <code>/var/log/maillog</code> 文件，此文件记录了 <code>Postfix</code> 服务器的运行状态信息。</p>
</li>
</ul>
<p><strong>4. Dovecot</strong></p>
<ul>
<li><p>配置 Dovecot</p>
<p>  <em>修改 <code>dovecot.conf</code></em></p>
<p>  打开 <code>/etc/dovecot/dovecot.conf</code> 文件，在最下方加入以下配置：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ssl_cert = &lt;/etc/pki/dovecot/certs/dovecot.pem</div><div class="line">ssl_key = &lt;/etc/pki/dovecot/private/dovecot.pem</div><div class="line"></div><div class="line">protocols = imap pop3 lmtp</div><div class="line">listen = *</div><div class="line">mail_location = Maildir:~/Maildir</div><div class="line">disable_plaintext_auth = no</div></pre></td></tr></table></figure>
<p>  如果前面你修改为了自己的 ssl 证书和私钥，请替换开始两行配置的路径。</p>
<p>  <em>修改 <code>10-master.conf</code></em></p>
<p>  打开 <code>/etc/dovecot/conf.d/10-master.conf</code> 文件，找到 <code>service auth</code> 部分，将以下行前面的 <code>#</code> 去除：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">unix_listener /var/spool/postfix/private/auth &#123;  </div><div class="line">       mode = 0666  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>启动 Dovecot</p>
<p>  使用以下命令，将 <code>Dovecot</code> 设为自动启动并首次启动该服务：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl enable dovecot.service</div><div class="line">systemctl start  dovecot.service</div></pre></td></tr></table></figure>
<p>  查看 <code>/var/log/maillog</code> 文件，查看服务是否成功启动。</p>
<p>  如成功启动，日志里应包含如下信息：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Jun 26 12:00:28 localhost postfix/postfix-script[28338]: starting the Postfix mail system</div><div class="line">Jun 26 12:00:29 localhost postfix/master[28340]: daemon started -- version 2.10.1, configuration /etc/postfix</div><div class="line">Jun 26 12:28:40 localhost dovecot: master: Dovecot v2.2.10 starting up for imap, pop3, lmtp (core dumps disabled)</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>5. 创建账户</strong></p>
<p>该配置下邮箱账户依赖于系统用户，所以通过添加系统用户的方式创建邮箱账户。</p>
<p><em>添加用户</em></p>
<p>在终端中使用 <code>useradd</code> 命令添加用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useradd test</div></pre></td></tr></table></figure></p>
<p>使用 <code>passwd</code> 命令设置对应用户密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd test</div></pre></td></tr></table></figure></p>
<p><strong>6. 测试</strong></p>
<p>如测试中遇到异常，请查看 maillog 日志文件中的错误信息。</p>
<p><em>服务器端发送测试</em></p>
<p>使用 <code>su</code> 命令切换用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su test</div></pre></td></tr></table></figure></p>
<p>我们可以使用 <code>mail</code> 命令发送邮件，将 <code>xxxx@xxx.com</code> 替换为你的其他邮箱。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;Mail Content&quot; | mail -s &quot;Mail Subject&quot; xxxx@xxx.com</div></pre></td></tr></table></figure></p>
<p>然后可以前往你的接收方邮箱查收。</p>
]]></content>
      
        
        <tags>
            
            <tag> linux postfix dovecot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于CentOS搭建Docker环境]]></title>
      <url>/2017/10/17/%E5%9F%BA%E4%BA%8ECentOS%E6%90%AD%E5%BB%BADocker%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p><strong>1. 安装与配置 Docker</strong></p>
<ul>
<li><p>安装 Docker</p>
<p>  <code>Docker</code> 软件包已经包括在默认的 <code>CentOS-Extras</code> 软件源里。因此想要安装 <code>docker</code>，只需要运行下面的 <code>yum</code> 命令：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install docker-io -y</div></pre></td></tr></table></figure>
<p>  直接<code>yum</code>安装，安装成功后查看版本</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker -v</div></pre></td></tr></table></figure>
<p>  启动docker</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service docker start</div></pre></td></tr></table></figure>
<p>  设置开机启动</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig docker on</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>配置 Docker</p>
<p>  因为国内访问 Docker Hub 较慢, 可以使用腾讯云提供的国内镜像源, 加速访问 Docker Hub</p>
<p>  依次执行以下命令</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">echo &quot;OPTIONS=&apos;--registry-mirror=https://mirror.ccs.tencentyun.com&apos;&quot; &gt;&gt; /etc/sysconfig/docker</div><div class="line">systemctl daemon-reload</div><div class="line">service docker restart</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>2. Docker 的简单操作</strong></p>
<ul>
<li><p>下载镜像</p>
<p>  下载一个官方的 CentOS 镜像到本地</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull centos</div></pre></td></tr></table></figure>
<p>  下载好的镜像就会出现在镜像列表里</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure>
</li>
<li><p>运行容器</p>
<p>  这时我们可以在刚才下载的 CentOS 镜像生成的容器内操作了。</p>
<p>  生成一个 centos 镜像为模板的容器并使用 <code>bash shell</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it centos /bin/bash</div></pre></td></tr></table></figure>
<p>  这个时候可以看到命令行的前端已经变成了 [root@(一串 hash Id)] 的形式, 这说明我们已经成功进入了 CentOS 容器。</p>
<p>  在容器内执行任意命令, 不会影响到宿主机, 如下</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/simple_docker</div></pre></td></tr></table></figure>
<p>  可以看到 <code>/data</code> 目录下已经创建成功了 <code>simple_docker</code> 文件夹</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls /data</div></pre></td></tr></table></figure>
<p>  退出容器</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exit</div></pre></td></tr></table></figure>
<p>  查看宿主机的 <code>/data</code> 目录, 并没有 <code>simple_docker</code> 文件夹, 说明容器内的操作不会影响到宿主机</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls /data</div></pre></td></tr></table></figure>
</li>
<li><p>保存容器</p>
<p>  查看所有的容器信息， 能获取容器的id</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div></pre></td></tr></table></figure>
<p>  然后执行如下命令，保存镜像：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker commit -m=&quot;备注&quot; [CONTAINER_ID] [IMAGE]</div></pre></td></tr></table></figure>
</li>
<li><p>完成</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> linux docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于CentOS搭建SVN服务器]]></title>
      <url>/2017/10/17/%E5%9F%BA%E4%BA%8ECentOS%E6%90%AD%E5%BB%BASVN%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><strong>1. 安装 SVN 服务端</strong></p>
<p>安装 Subversion</p>
<p>Subversion 是一个版本控制系统，相对于的 RCS 、 CVS ，采用了分支管理系统，它的设计目标就是取代 CVS 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y subversion</div></pre></td></tr></table></figure></p>
<p><strong>2. 创建 SVN 版本库</strong></p>
<p>创建项目版本库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/svn/myproject</div><div class="line">svnadmin create /data/svn/myproject</div></pre></td></tr></table></figure></p>
<p><strong>3. 配置 SVN 信息</strong></p>
<ul>
<li><p>配置文件简介</p>
<p>  版本库中的配置目录 conf 有三个文件:</p>
<ul>
<li><code>authz</code> 是权限控制文件</li>
<li><code>passwd</code> 是帐号密码文件</li>
<li><code>svnserve.conf</code> 是SVN服务综合配置文件</li>
</ul>
</li>
<li><p>配置权限配置文件 <code>authz</code></p>
<p>  编辑 <code>authz</code> ，内容参考如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[groups]            </div><div class="line">#用户组</div><div class="line">admin = admin,root,test  </div><div class="line">#用户组所对应的用户</div><div class="line">[/]                 </div><div class="line">#库目录权限</div><div class="line">@admin = rw         </div><div class="line">#用户组权限</div><div class="line">*=r               </div><div class="line">#非用户组权限</div></pre></td></tr></table></figure>
</li>
<li><p>配置账号密码文件 <code>passwd</code></p>
<p>  编辑 <code>passwd</code> ，内容参考如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[users]</div><div class="line"># harry = harryssecret</div><div class="line"># sally = sallyssecret</div><div class="line">admin = 123456</div><div class="line">root = 123456</div><div class="line">test = 123456</div></pre></td></tr></table></figure>
</li>
<li><p>配置 SVN 服务综合配置文件 <code>svnserve.conf</code></p>
<p>  编辑 <code>svnserve.conf</code> ，内容参考如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[general]</div><div class="line"># force-username-case = none</div><div class="line"># 匿名访问的权限 可以是read、write，none，默认为read</div><div class="line">anon-access = none</div><div class="line">#使授权用户有写权限</div><div class="line">auth-access = write</div><div class="line">#密码数据库的路径</div><div class="line">password-db = passwd</div><div class="line">#访问控制文件</div><div class="line">authz-db = authz</div><div class="line">#认证命名空间，SVN会在认证提示里显示，并且作为凭证缓存的关键字</div><div class="line">realm = /data/svn/myproject</div><div class="line"></div><div class="line">[sasl]</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>4. 启动 SVN 服务</strong></p>
<ul>
<li><p>启动 SVN</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svnserve -d -r /data/svn</div></pre></td></tr></table></figure>
</li>
<li><p>checkout SVN项目</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/workspace/myproject</div><div class="line">svn co svn://127.0.0.1/myproject /data/workspace/myproject --username root --password 123456 --force --no-auth-cache</div></pre></td></tr></table></figure>
</li>
<li><p>提交文件到 SVN 服务器</p>
<p>  从本地提交文件到 SVN 服务器，其中 <code>root</code> 密码为 <code>/data/svn/myproject/conf/passwd</code> 文件存储的密码</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /data/workspace/myproject</div><div class="line">echo test &gt;&gt; test.txt</div><div class="line">svn add test.txt</div><div class="line">svn commit test.txt -m &apos;test&apos;</div></pre></td></tr></table></figure>
<p>  提交成功后可以通过如下命令从本地项目删除文件</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/workspace/myproject</div><div class="line">rm -rf test.txt</div></pre></td></tr></table></figure>
<p>  删除后可以通过 SVN 服务器恢复</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/workspace/myproject</div><div class="line">svn update</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>5. 完成</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> linux svn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于CentOS搭建GIT服务器]]></title>
      <url>/2017/10/17/%E5%9F%BA%E4%BA%8ECentOS%E6%90%AD%E5%BB%BAGIT%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><strong>1. 下载安装 git</strong></p>
<p>Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>
<p>此教程以 CentOS 7.2 x64 的系统为环境，搭建 git 服务器。</p>
<ul>
<li><p>安装依赖库和编译工具</p>
<p>  为了后续安装能正常进行，我们先来安装一些相关依赖库和编译工具</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</div></pre></td></tr></table></figure>
<p>  安装编译工具</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gcc perl-ExtUtils-MakeMaker</div></pre></td></tr></table></figure>
</li>
<li><p>下载 git</p>
<p>  选一个目录，用来放下载下来的安装包，这里将安装包放在 /usr/local/src 目录里</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/src</div></pre></td></tr></table></figure>
<p>  到官网找一个新版稳定的源码包下载到 <code>/usr/local/src</code> 文件夹里</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz</div></pre></td></tr></table></figure>
</li>
<li><p>解压和编译</p>
<p>  解压下载的源码包</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zvxf git-2.10.0.tar.gz</div></pre></td></tr></table></figure>
<p>  解压后进入 git-2.10.0 文件夹</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd git-2.10.0</div></pre></td></tr></table></figure>
<p>  执行编译</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make all prefix=/usr/local/git</div></pre></td></tr></table></figure>
<p>  编译完成后, 安装到 /usr/local/git 目录下</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make install prefix=/usr/local/git</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>2. 配置环境变量</strong></p>
<p>将 git 目录加入 PATH</p>
<p>将原来的 PATH 指向目录修改为现在的目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &apos;export PATH=$PATH:/usr/local/git/bin&apos; &gt;&gt; /etc/bashrc</div></pre></td></tr></table></figure>
<p>生效环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/bashrc</div></pre></td></tr></table></figure></p>
<p>此时我们能查看 git 版本号，说明我们已经安装成功了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git --version</div></pre></td></tr></table></figure></p>
<p><strong>3. 创建 git 账号密码</strong></p>
<p>创建 git 账号</p>
<p>为我们刚刚搭建好的 git 创建一个账号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useradd -m gituser</div></pre></td></tr></table></figure></p>
<p>然后为这个账号设置密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd gituser</div></pre></td></tr></table></figure></p>
<p><strong>4. 初始化 git 仓库并配置用户权限</strong></p>
<ul>
<li><p>创建 git 仓库并初始化</p>
<p>  我们创建 <code>/data/repositories</code> 目录用于存放 git 仓库</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/repositories</div></pre></td></tr></table></figure>
<p>  创建好后，初始化这个仓库</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /data/repositories/ &amp;&amp; git init --bare test.git</div></pre></td></tr></table></figure>
</li>
<li><p>配置用户权限</p>
<p>  给 git 仓库目录设置用户和用户组并设置权限</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chown -R gituser:gituser /data/repositories</div><div class="line">chmod 755 /data/repositories</div></pre></td></tr></table></figure>
<p>  查找 <code>git-shell</code> 所在目录 , 编辑 <code>/etc/passwd</code> 文件，将最后一行关于 <code>gituser</code> 的登录 <code>shell</code> 配置改为 <code>git-shell</code> 的目录，如下</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gituser:x:500:500::/home/gituser:/usr/local/git/bin/git-shell</div></pre></td></tr></table></figure>
</li>
<li><p>使用搭建好的 Git 服务</p>
<p>  克隆 test repo 到本地</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~ &amp;&amp; git clone gituser@yourip:/data/repositories/test.git #yourip可以你服务器的ip地址或域名</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> linux git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于CentOS搭建个人Leanote云笔记本]]></title>
      <url>/2017/10/17/%E5%9F%BA%E4%BA%8ECentOS%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BALeanote%E4%BA%91%E7%AC%94%E8%AE%B0%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>Leanote 依赖 MongoDB 作为数据存储，下面开始安装MongoDB：<br><strong>1. 下载启动 MongoDB</strong></p>
<ul>
<li><p>下载 MongoDB</p>
<p>  进入 /home 目录，并下载 MongoDB：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /home</div></pre></td></tr></table></figure>
<p>  下载源码：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz</div></pre></td></tr></table></figure>
<p>  解压缩源码包：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xzvf mongodb-linux-x86_64-3.0.1.tgz</div></pre></td></tr></table></figure>
</li>
<li><p>创建用于存储的文件夹目录</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/db</div></pre></td></tr></table></figure>
<p>  配置 MongoDB 的环境变量：</p>
<p>  编辑 <code>/etc/profile</code>，在文件末尾追加以下配置：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=$PATH:/home/mongodb-linux-x86_64-3.0.1/bin</div></pre></td></tr></table></figure>
<p>  并执行以下命令，使环境变量生效。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>启动 MongoDB（启动需要 3 ~ 5 分钟，耐心等待）：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --bind_ip localhost --port 27017 --dbpath /data/db/ --logpath=/var/log/mongod.log --fork</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>2. 安装 Leanote</strong></p>
<ul>
<li><p>下载 Leanote</p>
<p>  先进入 /home 目录</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /home</div></pre></td></tr></table></figure>
<p>  下载 Leanote 源码</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://iweb.dl.sourceforge.net/project/leanote-bin/2.4/leanote-linux-amd64-v2.4.bin.tar.gz</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>解开压缩包：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf leanote-linux-amd64-v2.4.bin.tar.gz</div></pre></td></tr></table></figure>
</li>
<li><p>编辑 Leanote 配置文件</p>
<p>  编辑文件 <code>app.conf</code>，在文件中找到 <code>app.secret=</code> 项，并修改为如下内容：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.secret=qcloud666</div></pre></td></tr></table></figure>
</li>
<li><p>初始化数据库</p>
<p>  导入初始化数据：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongorestore -h localhost -d leanote --dir /home/leanote/mongodb_backup/leanote_install_data/</div></pre></td></tr></table></figure>
</li>
<li><p>启动 Leanote 服务</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup /bin/bash /home/leanote/bin/run.sh &gt;&gt; /var/log/leanote.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>3. 访问 Leanote 云笔记本</strong></p>
<p>通过访问 <a href="http://yourip:9000" target="_blank" rel="external">http://yourip:9000</a> 或 <a href="http://yourdomain.com:9000就可以了使用自己的笔记本。" target="_blank" rel="external">http://yourdomain.com:9000就可以了使用自己的笔记本。</a></p>
<ul>
<li><p>初始化账户： admin</p>
</li>
<li><p>初始化密码： abc123</p>
</li>
</ul>
<p>请务必修改密码已确保使用安全！</p>
]]></content>
      
        
        <tags>
            
            <tag> linux leanote </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于CentOS搭建个人网盘]]></title>
      <url>/2017/10/16/%E5%9F%BA%E4%BA%8ECentOS%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98/</url>
      <content type="html"><![CDATA[<p><strong>1. 安装 Seafile</strong></p>
<ul>
<li><p>安装依赖环境</p>
<p>  使用 yum 安装 Python 及 MySQL：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install python python-setuptools python-imaging python-ldap python-memcached MySQL-python mariadb mariadb-server</div></pre></td></tr></table></figure>
<p>  启动 MariaDB 服务：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo systemctl start mariadb.service</div><div class="line">sudo systemctl enable mariadb.service</div></pre></td></tr></table></figure>
<p>  配置 MySQL：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/mysql_secure_installation</div></pre></td></tr></table></figure>
<p>  配置过程输入参数如截图所示，其中 <code>New password</code> 和 <code>Re-enter new password</code> 字段都设置为 <code>QcE7gi1g</code>（最好自己定义一个密码），其他字段一路回车使用默认值：</p>
<p>  <img src="https://mc.qcloudimg.com/static/img/a1f15db10f82310eca74a3b8e32ae608/1.png" alt="图片"></p>
</li>
<li><p>安装 Seafile</p>
<p>  下载 Seafile 安装包：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://mc.qcloudimg.com/static/archive/3d8addbe52be88df4f6139ec7e35b453/seafile-server_5.1.4_x86-64.tar.gz</div></pre></td></tr></table></figure>
<p>  解压 Seafile 安装包：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf seafile-server_5.1.4_x86-64.tar.gz</div></pre></td></tr></table></figure>
<p>  安装 Seafile 安装包：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo mkdir -p /opt/seafile/installed</div><div class="line">sudo mv seafile-server_5.1.4_x86-64.tar.gz /opt/seafile/installed</div><div class="line">sudo mv seafile-server-5.1.4/ /opt/seafile</div><div class="line">cd /opt/seafile/seafile-server-5.1.4</div><div class="line">sudo ./setup-seafile-mysql.sh</div></pre></td></tr></table></figure>
<p>  执行过程输入参数如截图所示，<code>[server name]</code> 字段输入 <code>Seafile</code>，<code>[ This server&#39;s ip or domain ]</code> 字段输入你的域名或服务器IP，<code>[ 1 or 2 ]</code> 字段选择 <code>1</code>，mysql 的 <code>[ root password ]</code> 字段输入 <code>QcE7gi1g</code>（这个是上面步骤你设置的密码），其他字段一路回车使用默认值：</p>
<p>  <img src="https://mc.qcloudimg.com/static/img/de2fb7e13f26794671aec59bcd0c9165/1.png" alt="这里写图片描述"></p>
</li>
</ul>
<p><strong>2. 启动 Seafile 及修改防火墙规则</strong></p>
<ul>
<li><p>启动 Seafile</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo ./seafile.sh start</div><div class="line">sudo ./seahub.sh start</div></pre></td></tr></table></figure>
<p>  执行过程输入参数如截图所示，其中 <code>[ admin email ]</code> 设置为您登录网盘的帐号，如 <code>admin@qcloudlab.wang</code>，<code>[ admin password ]</code> 和 <code>[ admin password again ]</code> 设置为登录网盘的密码，如 <code>admin_QcE7gi1g</code>（最好自己定义一个密码）：</p>
<p>  <img src="https://mc.qcloudimg.com/static/img/d243d5763695b4d926e9d7fdd0e0e924/1.png" alt="这里写图片描述"></p>
</li>
<li><p>修改防火墙规则</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo firewall-cmd --zone=public --permanent --add-port=8082/tcp</div><div class="line">sudo firewall-cmd --zone=public --permanent --add-port=8000/tcp</div><div class="line">sudo firewall-cmd --reload</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> linux seafile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于CentOS搭建WordPress个人博客]]></title>
      <url>/2017/10/16/%E5%9F%BA%E4%BA%8ECentOS%E6%90%AD%E5%BB%BAWordPress%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p> <strong>1. 准备 LNMP 环境</strong></p>
<p>LNMP 是 Linux、Nginx、MySQL 和 PHP 的缩写，是 WordPress 博客系统依赖的基础运行环境。我们先来准备 LNMP 环境</p>
<ul>
<li><p>安装 Nginx</p>
<p>  使用 <code>yum</code> 安装 Nginx：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nginx -y</div></pre></td></tr></table></figure>
<p>  修改 <code>/etc/nginx/conf.d/default.conf</code>，去除对 IPv6 地址的监听，可参考下面的示例：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80 default_server;</div><div class="line">    # listen       [::]:80 default_server;</div><div class="line">    server_name  _;</div><div class="line">    root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">    # Load configuration files for the default server block.</div><div class="line">    include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    error_page 404 /404.html;</div><div class="line">        location = /40x.html &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    error_page 500 502 503 504 /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  修改完成后，启动 Nginx：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx</div></pre></td></tr></table></figure>
<p>  此时，可访问云服务器外网 HTTP 服务（<a href="http://yourdomain.com）来确认是否已经安装成功。" target="_blank" rel="external">http://yourdomain.com）来确认是否已经安装成功。</a></p>
<p>  将 Nginx 设置为开机自动启动：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig nginx on</div></pre></td></tr></table></figure>
</li>
<li><p>安装 MySQL</p>
<p>  使用 <code>yum</code> 安装 MySQL：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mysql-server -y</div></pre></td></tr></table></figure>
<p>  安装完成后，启动 MySQL 服务：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld restart</div></pre></td></tr></table></figure>
<p>  设置 MySQL 账户 <code>root</code> 密码：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/mysqladmin -u root password &apos;MyPas$word4Word_Press&apos;</div></pre></td></tr></table></figure>
<p>  将 MySQL 设置为开机自动启动：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig mysqld on</div></pre></td></tr></table></figure>
</li>
<li><p>安装 PHP</p>
<p>  使用 yum 安装 PHP：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install php-fpm php-mysql -y</div></pre></td></tr></table></figure>
<p>  安装之后，启动 PHP-FPM 进程：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service php-fpm start</div></pre></td></tr></table></figure>
<p>  启动之后，可以使用下面的命令查看 PHP-FPM 进程监听哪个端口 </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -nlpt | grep php-fpm</div></pre></td></tr></table></figure>
<p>  把 PHP-FPM 也设置成开机自动启动：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig php-fpm on</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>2. 安装并配置 WordPress</strong></p>
<ul>
<li><p>安装 WordPress</p>
<p>  配置好 LNMP 环境后，继续使用 <code>yum</code> 来安装 WordPress：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install wordpress -y</div></pre></td></tr></table></figure>
<p>  安装完成后，就可以在 <code>/usr/share/wordpress</code> 看到 WordPress 的源代码了。</p>
<p>  由于上面的安装方法默认安装的是英文版，所以我们还要下载中文语言包，如果不需要中文安装可跳过此步骤</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget https://cn.wordpress.org/wordpress-4.8.1-zh_CN.tar.gz</div><div class="line">tar -zxvf wordpress*</div><div class="line">mv -r wordpress/wp-content/languages /usr/share/wordpress/wp-content</div><div class="line">rm -rf wordpress*</div></pre></td></tr></table></figure>
</li>
<li><p>配置数据库</p>
<p>  进入 MySQL：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -uroot --password=&apos;MyPas$word4Word_Press&apos;</div></pre></td></tr></table></figure>
<p>  为 WordPress 创建一个数据库：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE wordpress;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>MySQL 部分设置完了，我们退出 MySQL 环境：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exit</div></pre></td></tr></table></figure></p>
<pre><code>把上述的 DB 配置同步到 WordPress 的配置文件 `wp-config.php` 中，可参考下面的配置：
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">/**</div><div class="line"> * The base configuration for WordPress</div><div class="line"> *</div><div class="line"> * The wp-config.php creation script uses this file during the</div><div class="line"> * installation. You don&apos;t have to use the web site, you can</div><div class="line"> * copy this file to &quot;wp-config.php&quot; and fill in the values.</div><div class="line"> *</div><div class="line"> * This file contains the following configurations:</div><div class="line"> *</div><div class="line"> * * MySQL settings</div><div class="line"> * * Secret keys</div><div class="line"> * * Database table prefix</div><div class="line"> * * ABSPATH</div><div class="line"> *</div><div class="line"> * @link https://codex.wordpress.org/Editing_wp-config.php</div><div class="line"> *</div><div class="line"> * @package WordPress</div><div class="line"> */</div><div class="line"></div><div class="line">// ** MySQL settings - You can get this info from your web host ** //</div><div class="line">/** The name of the database for WordPress */</div><div class="line">define(&apos;DB_NAME&apos;, &apos;wordpress&apos;);</div><div class="line"></div><div class="line">/** MySQL database username */</div><div class="line">define(&apos;DB_USER&apos;, &apos;root&apos;);</div><div class="line"></div><div class="line">/** MySQL database password */</div><div class="line">define(&apos;DB_PASSWORD&apos;, &apos;MyPas$word4Word_Press&apos;);</div><div class="line"></div><div class="line">/** MySQL hostname */</div><div class="line">define(&apos;DB_HOST&apos;, &apos;localhost&apos;);</div><div class="line"></div><div class="line">/** Database Charset to use in creating database tables. */</div><div class="line">define(&apos;DB_CHARSET&apos;, &apos;utf8&apos;);</div><div class="line"></div><div class="line">/** The Database Collate type. Don&apos;t change this if in doubt. */</div><div class="line">define(&apos;DB_COLLATE&apos;, &apos;&apos;);</div><div class="line"></div><div class="line">define(&apos;WPLANG&apos;, &apos;zh_CN&apos;);</div><div class="line"></div><div class="line">/**#@+</div><div class="line"> * Authentication Unique Keys and Salts.</div><div class="line"> *</div><div class="line"> * Change these to different unique phrases!</div><div class="line"> * You can generate these using the &#123;@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service&#125;</div><div class="line"> * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.</div><div class="line"> *</div><div class="line"> * @since 2.6.0</div><div class="line"> */</div><div class="line">define(&apos;AUTH_KEY&apos;,         &apos;put your unique phrase here&apos;);</div><div class="line">define(&apos;SECURE_AUTH_KEY&apos;,  &apos;put your unique phrase here&apos;);</div><div class="line">define(&apos;LOGGED_IN_KEY&apos;,    &apos;put your unique phrase here&apos;);</div><div class="line">define(&apos;NONCE_KEY&apos;,        &apos;put your unique phrase here&apos;);</div><div class="line">define(&apos;AUTH_SALT&apos;,        &apos;put your unique phrase here&apos;);</div><div class="line">define(&apos;SECURE_AUTH_SALT&apos;, &apos;put your unique phrase here&apos;);</div><div class="line">define(&apos;LOGGED_IN_SALT&apos;,   &apos;put your unique phrase here&apos;);</div><div class="line">define(&apos;NONCE_SALT&apos;,       &apos;put your unique phrase here&apos;);</div><div class="line"></div><div class="line">/**#@-*/</div><div class="line"></div><div class="line">/**</div><div class="line"> * WordPress Database Table prefix.</div><div class="line"> *</div><div class="line"> * You can have multiple installations in one database if you give each</div><div class="line"> * a unique prefix. Only numbers, letters, and underscores please!</div><div class="line"> */</div><div class="line">$table_prefix  = &apos;wp_&apos;;</div><div class="line"></div><div class="line">/**</div><div class="line"> * See http://make.wordpress.org/core/2013/10/25/the-definitive-guide-to-disabling-auto-updates-in-wordpress-3-7</div><div class="line"> */</div><div class="line"></div><div class="line">/* Disable all file change, as RPM base installation are read-only */</div><div class="line">define(&apos;DISALLOW_FILE_MODS&apos;, true);</div><div class="line"></div><div class="line">/* Disable automatic updater, in case you want to allow</div><div class="line">   above FILE_MODS for plugins, themes, ... */</div><div class="line">define(&apos;AUTOMATIC_UPDATER_DISABLED&apos;, true);</div><div class="line"></div><div class="line">/* Core update is always disabled, WP_AUTO_UPDATE_CORE value is ignore */</div><div class="line"></div><div class="line">/**</div><div class="line"> * For developers: WordPress debugging mode.</div><div class="line"> *</div><div class="line"> * Change this to true to enable the display of notices during development.</div><div class="line"> * It is strongly recommended that plugin and theme developers use WP_DEBUG</div><div class="line"> * in their development environments.</div><div class="line"> *</div><div class="line"> * For information on other constants that can be used for debugging,</div><div class="line"> * visit the Codex.</div><div class="line"> *</div><div class="line"> * @link https://codex.wordpress.org/Debugging_in_WordPress</div><div class="line"> */</div><div class="line">define(&apos;WP_DEBUG&apos;, false);</div><div class="line"></div><div class="line">/* That&apos;s all, stop editing! Happy blogging. */</div><div class="line"></div><div class="line">/** Absolute path to the WordPress directory. */</div><div class="line">if ( !defined(&apos;ABSPATH&apos;) )</div><div class="line">    define(&apos;ABSPATH&apos;, &apos;/usr/share/wordpress&apos;);</div><div class="line"></div><div class="line">/** Sets up WordPress vars and included files. */</div><div class="line">require_once(ABSPATH . &apos;wp-settings.php&apos;);</div></pre></td></tr></table></figure>
</code></pre><ul>
<li><p>配置 Nginx</p>
<p>  WordPress 已经安装完毕，我们配置 Nginx 把请求转发给 PHP-FPM 来处理</p>
<p>  首先，重命名默认的配置文件：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /etc/nginx/conf.d/</div><div class="line">mv default.conf defaut.conf.bak</div></pre></td></tr></table></figure>
<p>  在 <code>/etc/nginx/conf.d</code> 创建 <code>wordpress.conf</code> 配置，参考下面的内容：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    root /usr/share/wordpress;</div><div class="line">    location / &#123;</div><div class="line">        index index.php index.html index.htm;</div><div class="line">        try_files $uri $uri/ /index.php index.php;</div><div class="line">    &#125;</div><div class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class="line">    location ~ .php$ &#123;</div><div class="line">        fastcgi_pass   127.0.0.1:9000;</div><div class="line">        fastcgi_index  index.php;</div><div class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class="line">        include        fastcgi_params;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  配置后，通知 Nginx 进程重新加载：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s reload</div></pre></td></tr></table></figure>
</li>
<li><p>大功告成</p>
<p>  恭喜，您的 WordPress 博客已经部署完成，您可以通过浏览器访问博客查看效果。博客访问地址：<a href="http://yourdomain.com/wp-admin/install.php" target="_blank" rel="external">http://yourdomain.com/wp-admin/install.php</a></p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> linux wordpress </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于CentOS搭建搭建FTP文件服务]]></title>
      <url>/2017/10/16/%E5%9F%BA%E4%BA%8ECentOS%E6%90%AD%E5%BB%BA%E6%90%AD%E5%BB%BAFTP%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p><strong>1. 安装并启动 FTP 服务</strong></p>
<ul>
<li><p>安装 VSFTPD</p>
<p>  使用 <code>yum</code> 安装 <code>vsftpd</code>：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install vsftpd -y</div></pre></td></tr></table></figure>
</li>
<li><p>启动 VSFTPD</p>
<p>  安装完成后，启动 FTP 服务：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service vsftpd start</div></pre></td></tr></table></figure>
<p>  启动后，可以看到系统已经监听了 21 端口：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -nltp | grep 21</div></pre></td></tr></table></figure>
<p>  此时，访问 ftp://yourdomain.com 可浏览机器上的 /var/ftp 目录了。</p>
</li>
</ul>
<p><strong>2. 配置 FTP 权限</strong></p>
<p>目前 FTP 服务登陆允许匿名登陆，也无法区分用户访问，我们需要配置 FTP 访问权限</p>
<ul>
<li><p>了解 VSFTP 配置</p>
<p>  vsftpd 的配置目录为 <code>/etc/vsftpd</code>，包含下列的配置文件：</p>
<ul>
<li><code>vsftpd.conf</code> 为主要配置文件</li>
<li><code>ftpusers</code> 配置禁止访问 FTP 服务器的用户列表</li>
<li><code>user_list</code> 配置用户访问控制</li>
</ul>
</li>
<li><p>阻止匿名访问和切换根目录</p>
<p>  匿名访问和切换根目录都会给服务器带来安全风险，我们把这两个功能关闭。</p>
<p>  编辑 <code>/etc/vsftpd/vsftpd.conf</code>，找到下面两处配置并修改：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 禁用匿名用户</div><div class="line">anonymous_enable=NO</div><div class="line"></div><div class="line"># 禁止切换根目录</div><div class="line">chroot_local_user=YES</div></pre></td></tr></table></figure>
<p>  重新启动 FTP 服务</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service vsftpd restart</div></pre></td></tr></table></figure>
</li>
<li><p>创建 FTP 用户</p>
<p>  创建一个用户 <code>ftpuser</code> ：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useradd ftpuser</div></pre></td></tr></table></figure>
<p>  为用户 <code>ftpuser</code> 设置密码 ：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;3oEiU5s7&quot; | passwd ftpuser --stdin</div></pre></td></tr></table></figure>
</li>
<li><p>限制该用户仅能通过 FTP 访问</p>
<p>  限制用户 <code>ftpuser</code> 只能通过 FTP 访问服务器，而不能直接登录服务器：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usermod -s /sbin/nologin ftpuser</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>为用户分配主目录</p>
<p>  为用户 <code>ftpuser</code> 创建主目录并约定：</p>
<p>  <code>/data/ftp</code> 为主目录, 该目录不可上传文件</p>
<p>  <code>/data/ftp/pub</code> 文件只能上传到该目录下</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/ftp/pub</div></pre></td></tr></table></figure>
<p>  创建登录欢迎文件 ：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;Welcome to use FTP service.&quot; &gt; /data/ftp/welcome.txt</div></pre></td></tr></table></figure>
<p>  设置访问权限：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod a-w /data/ftp &amp;&amp; chmod 777 -R /data/ftp/pub</div></pre></td></tr></table></figure>
<p>  设置为用户的主目录：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usermod -d /data/ftp ftpuser</div></pre></td></tr></table></figure>
</li>
<li><p>完成</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> linux ftp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于CentOS搭建Discuz]]></title>
      <url>/2017/10/16/%E5%9F%BA%E4%BA%8ECentOS%E6%90%AD%E5%BB%BADiscuz/</url>
      <content type="html"><![CDATA[<p><strong>1. 购买服务器和域名</strong></p>
<p><strong>2. 准备 LAMP 环境</strong></p>
<p>LAMP 是 Linux、Apache、MySQL 和 PHP 的缩写，是 Discuz 论坛系统依赖的基础运行环境。我们先来准备 LAMP 环境</p>
<ul>
<li><p>安装 MySQL</p>
<p>  使用 <code>yum</code> 安装 MySQL：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mysql-server -y</div></pre></td></tr></table></figure>
<p>  安装完成后，启动 MySQL 服务：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld restart</div></pre></td></tr></table></figure>
<p>  此教程使用 mysql 默认账户名和密码，您也可以设置自己的 MySQL 账户名和密码，参考下面的内容：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/mysqladmin -u root password &apos;NGky9EKq&apos;</div></pre></td></tr></table></figure>
<p>  将 MySQL 设置为开机自动启动：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig mysqld on</div></pre></td></tr></table></figure>
</li>
<li><p>安装 Apache 组件</p>
<p>  使用 <code>yum</code> 安装 Apache 组件：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install httpd -y</div></pre></td></tr></table></figure>
<p>  安装之后，启动 httpd 进程：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service httpd start</div></pre></td></tr></table></figure>
<p>  把 httpd 也设置成开机自动启动：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig httpd on</div></pre></td></tr></table></figure>
</li>
<li><p>安装 PHP</p>
<p>  使用 <code>yum</code> 安装 PHP：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install php php-fpm php-mysql -y</div></pre></td></tr></table></figure>
<p>  安装之后，启动 PHP-FPM 进程：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service php-fpm start</div></pre></td></tr></table></figure>
<p>  启动之后，可以使用下面的命令查看 PHP-FPM 进程监听哪个端口 </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -nlpt | grep php-fpm</div></pre></td></tr></table></figure>
<p>  把 PHP-FPM 也设置成开机自动启动：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig php-fpm on</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>3. 安装并配置 Discuz</strong></p>
<ul>
<li><p>安装 Discuz</p>
<p>  CentOS 6 没有Discuz 的 <code>yum</code> 源，所以我们需要下载一个Discuz 压缩包：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://download.comsenz.com/DiscuzX/3.2/Discuz_X3.2_SC_UTF8.zip</div></pre></td></tr></table></figure>
<p>  下载完成后，解压这个压缩包</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip Discuz_X3.2_SC_UTF8.zip</div></pre></td></tr></table></figure>
</li>
<li><p>配置 Discuz</p>
<p>  由于PHP默认访问 <code>/var/www/html/</code> 文件夹，所以我们需要把upload文件夹里的文件都复制到 <code>/var/www/html/</code> 文件夹</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd Discuz*</div><div class="line">cp -r upload/* /var/www/html/</div></pre></td></tr></table></figure>
<p>  给 /var/www/html 目录及其子目录赋予权限</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod -R 777 /var/www/html</div></pre></td></tr></table></figure>
<p>  重启 Apache</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service httpd restart</div></pre></td></tr></table></figure>
</li>
<li><p>完成</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> linux discuz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建微信订阅号后台服务]]></title>
      <url>/2017/10/16/%E6%90%AD%E5%BB%BA%E5%BE%AE%E4%BF%A1%E8%AE%A2%E9%98%85%E5%8F%B7%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p><strong>1. 准备域名和服务器</strong></p>
<p>微信公众平台需要配置服务器地址 URL 访问，在实验开始之前，我们要准备域名。</p>
<ul>
<li><p>购买服务器（<a href="https://cloud.tencent.com/product/cvm" target="_blank" rel="external">腾讯云</a>）</p>
</li>
<li><p>域名注册</p>
</li>
<li><p>域名解析</p>
<p>  域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 ，如：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping www.yourdomain.com</div></pre></td></tr></table></figure>
<p>  如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p>
</li>
</ul>
<p><strong>2. 申请微信个人订阅号</strong></p>
<p>在开始搭建我们的订阅号服务器之前，需要先拿到订阅号相关信息。</p>
<ul>
<li><p>注册开发者账号</p>
<p>  如果你还不是微信订阅号开发者，请先在微信公众平台注册：<br><a href="https://mp.weixin.qq.com" target="_blank" rel="external">https://mp.weixin.qq.com</a></p>
</li>
<li><p>获取微信订阅号公众平台认证字段信息</p>
<p>  我们需要获取3个字段：<code>AppID</code> <code>Token</code> <code>EncodingAESKey</code>。</p>
<p>  登录微信公众平台，依次进入 <code>开发</code> - <code>基本配置</code> 可以拿到 AppID。</p>
<p>  在<code>基本配置</code> - <code>服务器配置</code> - <code>修改配置</code> 表单中：<br>URL 填第一步申请的域名;</p>
<p>  Token 用户根据提示填写，用于后面校验服务端合法性;</p>
<p>  EncodingAESKey 点击 <code>随机生成</code> 按钮来生成。</p>
<p>  当点击表单 <code>提交</code> 按钮时，微信会通过 Token 来校验 URL 的合法性，这个我们在后面步骤实现，此界面暂时保留不关闭。</p>
</li>
</ul>
<p><strong>3. 搭建 HTTP 服务</strong></p>
<p>下面的步骤，将带大家在服务器上使用 Node 和 Express 搭建一个 HTTP 服务器</p>
<ul>
<li><p>安装 NodeJS 和 NPM</p>
<p>  使用下面的命令安装 NodeJS 和 NPM</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -</div><div class="line">yum install nodejs -y</div></pre></td></tr></table></figure>
<p>  安装完成后，使用下面的命令测试安装结果</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure>
</li>
<li><p>编写 HTTP Server 源码</p>
<p>  <em>创建工作目录</em></p>
<p>  使用下面的命令在服务器创建一个工作目录：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/release/weapp</div></pre></td></tr></table></figure>
<p>  进入此工作目录</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /data/release/weapp</div></pre></td></tr></table></figure>
<p>  创建 package.json</p>
<p>  在刚才创建的工作目录创建 <code>package.json</code>，添加我们服务器包的名称和版本号，可参考下面的示例。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;name&quot;: &quot;weapp&quot;,</div><div class="line">    &quot;version&quot;: &quot;1.0.0&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <em>添加 Server 源码</em></p>
<p>  在工作目录创建 <code>app.js</code>，使用 <code>Express.js</code> 来监听 <code>5050</code> 端口，可参考下面的示例代码(注：请将 <code>app.js</code> 文件中的<code>token</code>/<code>appid</code>/<code>encodingAESKey</code>等配置项替换为您的订阅号对应的取值)。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">// 引用 express 来支持 HTTP Server 的实现</div><div class="line">const express = require(&apos;express&apos;);</div><div class="line"></div><div class="line">// 引用微信公共平台自动回复消息接口服务中间件</div><div class="line">var wechat = require(&apos;wechat&apos;);</div><div class="line"></div><div class="line">// 创建一个 express 实例</div><div class="line">const app = express();</div><div class="line"></div><div class="line">// 配置微信公众平台参数，在教程第二步中获取</div><div class="line">var config = &#123;</div><div class="line">    token: &apos;your token&apos;, // 填第二步中获取的 `token`</div><div class="line">    appid: &apos;your appid&apos;, // 填第二步中获取的 `appid`</div><div class="line">    encodingAESKey: &apos;your encodingAESKey&apos;, // 填第二步中获取的 `encodingAESKey`</div><div class="line">    checkSignature: true // 可选，默认为true。由于微信公众平台接口调试工具在明文模式下不发送签名，所以如要使用该测试工具，请将其设置为false </div><div class="line">&#125;;</div><div class="line"></div><div class="line">app.use(express.query());</div><div class="line"></div><div class="line">app.use(&apos;/&apos;, wechat(config, function (req, res, next) &#123;</div><div class="line">    res.reply(&#123;</div><div class="line">        content: &apos;你好，Hello World!&apos;,</div><div class="line">        type: &apos;text&apos;</div><div class="line">    &#125;);</div><div class="line">&#125;));</div><div class="line"></div><div class="line">// 监听端口，等待连接</div><div class="line">const port = 5050;</div><div class="line">app.listen(port);</div><div class="line"></div><div class="line">// 输出服务器启动日志</div><div class="line">console.log(`Server listening at http://127.0.0.1:$&#123;port&#125;`);</div></pre></td></tr></table></figure>
</li>
<li><p>运行 HTTP 服务</p>
<p>  <em>安装 PM2</em></p>
<p>  在开始之前，我们先来安装 PM2</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install pm2 --global</div></pre></td></tr></table></figure>
<p>  PM2 安装时间可能稍长，请耐心等候 </p>
<p>  <em>安装 Express</em></p>
<p>  我们的服务器源码里使用到了 Express 模块，下面的命令使用 NPM 来安装 Express</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/release/weapp</div><div class="line">npm install express --save</div></pre></td></tr></table></figure>
<p>  <em>安装 Wechat</em></p>
<p>  我们的服务器源码里使用到了 Wechat 模块，下面的命令使用 NPM 来安装 Wechat</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/release/weapp</div><div class="line">npm install wechat --save</div></pre></td></tr></table></figure>
<p>  <em>启动服务</em></p>
<p>  安装完成后，使用 PM2 来启动 HTTP 服务</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/release/weapp</div><div class="line">pm2 start app.js</div></pre></td></tr></table></figure>
<p>  现在，您的 HTTP 服务已经在 <a href="http://yourdomain.com:5050" target="_blank" rel="external">http://yourdomain.com:5050</a> 运行要查看服务输出的日志，可以使用下面的命令：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 logs</div></pre></td></tr></table></figure>
<p>  如果要重启服务，可以使用下面的命令：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 restart app</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>4. 搭建 nginx 对外服务</strong></p>
<p>NodeJs只是侦听的机器上的 5050 端口，我们使用 nginx 侦听 80 端口提供对外域名服务</p>
<ul>
<li><p>安装 Nginx</p>
<p>  在 CentOS 上，可直接使用 <code>yum</code> 来安装 Nginx</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nginx -y</div></pre></td></tr></table></figure>
<p>  安装完成后，使用 <code>nginx</code> 命令启动 Nginx：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx</div></pre></td></tr></table></figure>
<p>  此时，访问 <a href="http://yourdomain.com" target="_blank" rel="external">http://yourdomain.com</a> 可以看到 Nginx 的测试页面</p>
</li>
<li><p>配置 HTTP 反向代理</p>
<p>  外网用户访问服务器的 Web 服务由 Nginx 提供，Nginx 需要配置反向代理才能使得 Web 服务转发到本地的 Node 服务。</p>
<p>  Nginx 配置目录在 <code>/etc/nginx/conf.d</code>，我们在该目录创建 <code>wechat.conf</code>，参考示例代码如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">       listen 80;</div><div class="line">       server_name www.example.com; # 改为第一步申请的域名</div><div class="line">       </div><div class="line">       location / &#123;</div><div class="line">           proxy_pass http://127.0.0.1:5050;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>  重新加载配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s reload</div></pre></td></tr></table></figure>
<p>  在浏览器通过 http 的方式访问你解析的域名来测试 HTTP 是否成功启动</p>
</li>
</ul>
<p><strong>5. 使用Server端回复微信消息</strong></p>
<ul>
<li><p>提交服务端配置</p>
<p>  我们将第二步微信公众平台中保留的表单提交，同时将 <code>基本配置</code> - <code>服务器配置</code> 启用</p>
</li>
<li><p>关注、发送与消息回复</p>
<p>  首先通过二维码关注微信订阅号</p>
<p>  在聊天界面向微信公众号发送一条消息</p>
<p>  最终我们会回到一条 <code>你好，Hello World!</code> 的回复</p>
</li>
<li><p>大功搞成</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> weixin linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于CentOS搭建微信小程序服务]]></title>
      <url>/2017/10/16/%E5%9F%BA%E4%BA%8ECentOS%E6%90%AD%E5%BB%BA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p><strong>1. 准备域名、证书和服务器</strong></p>
<p>小程序后台服务需要通过 HTTPS 访问，在实验开始之前，我们要准备域名和 SSL 证书。</p>
<ul>
<li><p>购买云服务器（<a href="https://cloud.tencent.com/product/cvm" target="_blank" rel="external">腾讯云</a>）</p>
</li>
<li><p>域名解析</p>
<p>  域名购买完成后, 需要将域名解析到云主机</p>
<p>  域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 ，如：<code>ping www.yourdomain.com</code>。</p>
<p>  如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p>
</li>
<li><p>申请 SSL 证书</p>
</li>
</ul>
<p><strong>2. 搭建小程序开发环境</strong></p>
<p>在开始搭建我们的小程序服务器之前，需要先完成客户端小程序开发环境的搭建。</p>
<ul>
<li><p>注册开发者账号</p>
<p>  如果你还不是小程序开发者，请先在微信公众平台并注册：<a href="https://mp.weixin.qq.com" target="_blank" rel="external">https://mp.weixin.qq.com</a></p>
</li>
<li><p>配置小程序服务器信息</p>
<p>  登录微信公众平台后，依次进入 <code>设置</code> - <code>开发设置</code> - <code>服务器域名</code> - <code>修改</code>。</p>
<p>  扫码完成身份校验后，request 合法域名和 socket 合法域名均填写在上一步准备好的域名地址。</p>
<p>  配置完成后，点击 <code>保存并提交</code>。</p>
</li>
<li><p>运行配套小程序代码</p>
<p>  要运行本实验配套的小程序代码，请下载下列资源：</p>
<ul>
<li><a href="https://codeload.github.com/tencentyun/lab-weapp-client/zip/master" target="_blank" rel="external">实验配套源码</a></li>
<li><p><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html" target="_blank" rel="external">微信小程序开发工具</a></p>
<p>源码下载后，请解压到本地工作目录。</p>
<p>开发工具下载后，请安装并启动，然后用微信扫码登录。</p>
<p>登录后，选择 <code>本地小程序项目</code> - <code>添加项目</code>，使用以下配置：</p>
</li>
<li><p>AppID：填写小程序的 AppID，请登录<a href="https://mp.weixin.qq.com/" target="_blank" rel="external">公众平台</a>后在 <code>设置</code> - <code>开发设置</code> - <code>开发者 ID</code> 中查看</p>
</li>
<li><p>项目名称：填写任意您喜欢的名称</p>
</li>
<li><p>项目目录：选择刚才解压的配套源码目录（目录包含 <code>app.js</code>）</p>
<p>填写完成后，点击 添加项目。</p>
</li>
</ul>
</li>
<li><p>设置实验域名</p>
<p>  在开发工具的 <code>编辑</code> 面板中，选中 <code>app.js</code> 进行编辑，需要修改小程序通信域名，请参考下面的配置：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">App(&#123;</div><div class="line">    config: &#123;</div><div class="line">        host: &apos;&apos; // 这个地方填写你的域名</div><div class="line">    &#125;,</div><div class="line">    onLaunch () &#123;</div><div class="line">        console.log(&apos;App.onLaunch()&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>3. 搭建 HTTP 服务</strong></p>
<p>下面的步骤，将带大家在服务器上使用 Node 和 Express 搭建一个 HTTP 服务器</p>
<ul>
<li><p>安装 NodeJS 和 NPM</p>
<p>  使用下面的命令安装 NodeJS 和 NPM</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -</div><div class="line">yum install nodejs -y</div></pre></td></tr></table></figure>
<p>  安装完成后，使用下面的命令测试安装结果</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure>
</li>
<li><p>编写 HTTP Server 源码</p>
<p>  <em>创建工作目录</em></p>
<p>  使用下面的命令在服务器创建一个工作目录：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/release/weapp</div></pre></td></tr></table></figure>
<p>  <em>进入此工作目录</em></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /data/release/weapp</div></pre></td></tr></table></figure>
<p>  <em>创建 package.json</em></p>
<p>  在刚才创建的工作目录创建 <code>package.json</code>，添加我们服务器包的名称和版本号，可参考下面的示例。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;name&quot;: &quot;weapp&quot;,</div><div class="line">    &quot;version&quot;: &quot;1.0.0&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  <em>添加 Server 源码</em></p>
<p>  在工作目录创建 <code>app.js</code>，使用 Express.js 来监听 <code>8765</code> 端口<br>，可参考下面的示例代码。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 引用 express 来支持 HTTP Server 的实现</div><div class="line">const express = require(&apos;express&apos;);</div><div class="line"></div><div class="line">// 创建一个 express 实例</div><div class="line">const app = express();</div><div class="line"></div><div class="line">// 实现唯一的一个中间件，对于所有请求，都输出 &quot;Response from express&quot;</div><div class="line">app.use((request, response, next) =&gt; &#123;</div><div class="line">    response.write(&apos;Response from express&apos;);</div><div class="line">    response.end();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 监听端口，等待连接</div><div class="line">const port = 8765;</div><div class="line">app.listen(port);</div><div class="line"></div><div class="line">// 输出服务器启动日志</div><div class="line">console.log(`Server listening at http://127.0.0.1:$&#123;port&#125;`);</div></pre></td></tr></table></figure>
</li>
<li><p>运行 HTTP 服务</p>
<p>  <em>安装 PM2</em></p>
<p>  在开始之前，我们先来安装 PM2</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install pm2 --global</div></pre></td></tr></table></figure>
<p>  PM2 安装时间可能稍长，请耐心等候 </p>
<p>  <em>安装 Express</em></p>
<p>  我们的服务器源码里使用到了 Express 模块，下面的命令使用 NPM 来安装 Express</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/release/weapp</div><div class="line">npm install express --save</div></pre></td></tr></table></figure>
<p>  <em>启动服务</em></p>
<p>  安装完成后，使用 PM2 来启动 HTTP 服务</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/release/weapp</div><div class="line">pm2 start app.js</div></pre></td></tr></table></figure>
<p>  现在，您的 HTTP 服务已经在 <a href="http://yourdomain.com:8765" target="_blank" rel="external">http://yourdomain.com:8765</a> 运行</p>
<p>  要查看服务输出的日志，可以使用下面的命令：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 logs</div></pre></td></tr></table></figure>
<p>  如果要重启服务，可以使用下面的命令：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 restart app</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>4. 搭建 HTTPS 服务</strong></p>
<p>微信小程序要求和服务器的通信都通过 HTTPS 进行</p>
<ul>
<li><p>安装 Nginx</p>
<p>  在 CentOS 上，可直接使用 <code>yum</code> 来安装 Nginx</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nginx -y</div></pre></td></tr></table></figure>
<p>  安装完成后，使用 <code>nginx</code> 命令启动 Nginx：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx</div></pre></td></tr></table></figure>
<p>  此时，访问 <a href="http://yourdomain.com" target="_blank" rel="external">http://yourdomain.com</a> 可以看到 Nginx 的测试页面</p>
</li>
<li><p>配置 HTTPS 反向代理</p>
<p>  外网用户访问服务器的 Web 服务由 Nginx 提供，Nginx 需要配置反向代理才能使得 Web 服务转发到本地的 Node 服务。</p>
<p>  先将之前下载的 SSL 证书(解压后 Nginx 目录分别以 crt 和 key 作为后缀的文件)通过 <code>PuTTy</code>（Windows） 或者 <code>sftp</code>（MacOS 或 Linux） 上传到服务器的 <code>/etc/nginx</code> 目录。</p>
<blockquote>
<p>参考：<a href="http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/putty.html" target="_blank" rel="external">putty教程</a>、<a href="http://blog.csdn.net/qq_26954773/article/details/78199365" target="_blank" rel="external">sftp教程</a></p>
</blockquote>
<p>  Nginx 配置目录在 <code>/etc/nginx/conf.d</code>，我们在该目录创建 <code>ssl.conf</code>，内容如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen 443;</div><div class="line">        server_name www.example.com; # 改为绑定证书的域名</div><div class="line">        # ssl 配置</div><div class="line">        ssl on;</div><div class="line">        ssl_certificate 1_www.example.com_bundle.crt; # 改为自己申请得到的 crt 文件的名称</div><div class="line">        ssl_certificate_key 2_www.example.com.key; # 改为自己申请得到的 key 文件的名称</div><div class="line">        ssl_session_timeout 5m;</div><div class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</div><div class="line">        ssl_prefer_server_ciphers on;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            proxy_pass http://127.0.0.1:8765;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>  让 Nginx 重新加载配置使其生效</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s reload</div></pre></td></tr></table></figure>
<p>  在浏览器通过 https 的方式访问你解析的域名来测试 HTTPS 是否成功启动</p>
</li>
<li><p>在小程序中测试 HTTPS 访问</p>
<p>  打开配套的小程序，点击 <code>实验一：HTTPS</code>，点击 <code>发送请求</code> 来测试访问结果。</p>
</li>
</ul>
<p><strong>5. 小程序会话</strong></p>
<p>小程序不支持 Cookie 存储和跟踪，服务器需要自行实现会话层</p>
<ul>
<li><p>安装 MongoDB</p>
<p>  使用 Yum 在机器上安装 MongoDB及其客户端命令行工具：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mongodb-server mongodb -y</div></pre></td></tr></table></figure>
<p>  安装结束后，可以使用下面的命令查看安装的版本：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mongod --version</div><div class="line">mongo --version</div></pre></td></tr></table></figure>
</li>
<li><p>启动 MongoDB</p>
<p>  创建目录，用于 MongoDB 数据和日志存储：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/mongodb</div><div class="line">mkdir -p /data/logs/mongodb</div></pre></td></tr></table></figure>
<p>  创建后，使用下面的命令来启动 MongoDB：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --fork --dbpath /data/mongodb --logpath /data/logs/mongodb/weapp.log</div></pre></td></tr></table></figure>
<p>  可以使用下面的命令来检查是否启动成功 </p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -ltp | grep 27017</div></pre></td></tr></table></figure>
</li>
<li><p>添加 MongoDB 用户</p>
<p>  登录本地 MongoDB 服务：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo</div></pre></td></tr></table></figure>
<p>  登录后，创建一个用户 <code>weapp</code> ：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use weapp;</div><div class="line">db.createUser(&#123; user: &apos;weapp&apos;, pwd: &apos;weapp-dev&apos;, roles: [&apos;dbAdmin&apos;, &apos;readWrite&apos;]&#125;);</div></pre></td></tr></table></figure>
<p>  创建完成后，使用 <code>exit</code> 退出命令行工具。</p>
</li>
<li><p>安装 Node 模块</p>
<p>  实现小程序的会话功能，我们需要安装 <code>connect-mongo</code><br>和 <code>wafer-node-session</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/release/weapp</div><div class="line">npm install connect-mongo wafer-node-session --save</div></pre></td></tr></table></figure>
</li>
<li><p>实现小程序会话</p>
<p>  在工作目录创建配置文件 <code>config.js</code>，用于保存我们服务所用的配置，可参考下面的实现(注：请将参考配置文件中的 <code>YORU_APP_ID</code> 和 <code>YOUR_APP_SECRET</code> 替换为你申请的小程序对应的 AppID 和 AppSecret)：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123; </div><div class="line">    serverPort: &apos;8765&apos;, </div><div class="line"></div><div class="line">    // 小程序 appId 和 appSecret </div><div class="line">    // 请到 https://mp.weixin.qq.com 获取 AppID 和 AppSecret</div><div class="line">    appId: &apos;YORU_APP_ID&apos;, </div><div class="line">    appSecret: &apos;YOUR_APP_SECRET&apos;, </div><div class="line"></div><div class="line">    // mongodb 连接配置，生产环境请使用更复杂的用户名密码</div><div class="line">    mongoHost: &apos;127.0.0.1&apos;, </div><div class="line">    mongoPort: &apos;27017&apos;, </div><div class="line">    mongoUser: &apos;weapp&apos;, </div><div class="line">    mongoPass: &apos;weapp-dev&apos;, </div><div class="line">    mongoDb: &apos;weapp&apos;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>  编辑 <code>app.js</code>，添加会话实现逻辑，可参考下面的代码：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">// 引用 express 来支持 HTTP Server 的实现</div><div class="line">const express = require(&apos;express&apos;);</div><div class="line">// 引用 wafer-session 支持小程序会话</div><div class="line">const waferSession = require(&apos;wafer-node-session&apos;); </div><div class="line">// 使用 MongoDB 作为会话的存储</div><div class="line">const MongoStore = require(&apos;connect-mongo&apos;)(waferSession); </div><div class="line">// 引入配置文件</div><div class="line">const config = require(&apos;./config&apos;); </div><div class="line"></div><div class="line">// 创建一个 express 实例</div><div class="line">const app = express();</div><div class="line"></div><div class="line">// 添加会话中间件，登录地址是 /login</div><div class="line">app.use(waferSession(&#123; </div><div class="line">    appId: config.appId, </div><div class="line">    appSecret: config.appSecret, </div><div class="line">    loginPath: &apos;/login&apos;,</div><div class="line">    store: new MongoStore(&#123; </div><div class="line">	url: `mongodb://$&#123;config.mongoUser&#125;:$&#123;config.mongoPass&#125;@$&#123;config.mongoHost&#125;:$&#123;config.mongoPort&#125;/$&#123;config.mongoDb&#125;` </div><div class="line">    &#125;) </div><div class="line">&#125;)); </div><div class="line"></div><div class="line">// 在路由 /me 下，输出会话里包含的用户信息</div><div class="line">app.use(&apos;/me&apos;, (request, response, next) =&gt; &#123; </div><div class="line">	    response.json(request.session ? request.session.userInfo : &#123; noBody: true &#125;); </div><div class="line">    if (request.session) &#123;</div><div class="line">        console.log(`Wafer session success with openId=$&#123;request.session.userInfo.openId&#125;`);</div><div class="line">    &#125;</div><div class="line">&#125;); </div><div class="line"></div><div class="line">// 实现一个中间件，对于未处理的请求，都输出 &quot;Response from express&quot;</div><div class="line">app.use((request, response, next) =&gt; &#123;</div><div class="line">    response.write(&apos;Response from express&apos;);</div><div class="line">    response.end();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 监听端口，等待连接</div><div class="line">app.listen(config.serverPort);</div><div class="line"></div><div class="line">// 输出服务器启动日志</div><div class="line">console.log(`Server listening at http://127.0.0.1:$&#123;config.serverPort&#125;`);</div></pre></td></tr></table></figure>
<p>  源码编写完成后，重启服务：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 restart app</div></pre></td></tr></table></figure>
<p>  重启后，使用配套的小程序完成会话测试：打开配套小程序 - 点击 <code>实验二：会话</code> - <code>获取会话</code>，如果您能看到您的微信头像，那就表示会话已经成功获取了。</p>
</li>
</ul>
<p><strong>6. WebSocket 服务</strong></p>
<ul>
<li><p>安装 Node 模块</p>
<p>  本实验使用 <code>ws</code> 模块来在服务器上支持 WebSocket 协议，下面使用 NPM 来安装：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/release/weapp</div><div class="line">npm install ws --save</div></pre></td></tr></table></figure>
</li>
<li><p>实现 WebSocket 服务器</p>
<p>  创建 <code>websocket.js</code>，实现 WebSocket 服务，可参考下面的代码：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">// 引入 ws 支持 WebSocket 的实现</div><div class="line">const ws = require(&apos;ws&apos;);</div><div class="line"></div><div class="line">// 导出处理方法</div><div class="line">exports.listen = listen;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 在 HTTP Server 上处理 WebSocket 请求</div><div class="line"> * @param &#123;http.Server&#125; server</div><div class="line"> * @param &#123;wafer.SessionMiddleware&#125; sessionMiddleware</div><div class="line"> */</div><div class="line">function listen(server, sessionMiddleware) &#123;</div><div class="line">    // 使用 HTTP Server 创建 WebSocket 服务，使用 path 参数指定需要升级为 WebSocket 的路径</div><div class="line">    const wss = new ws.Server(&#123; server, path: &apos;/ws&apos; &#125;);</div><div class="line"></div><div class="line">    // 监听 WebSocket 连接建立</div><div class="line">    wss.on(&apos;connection&apos;, (ws,request) =&gt; &#123;// 要升级到 WebSocket 协议的 HTTP 连接</div><div class="line"></div><div class="line">	    // 被升级到 WebSocket 的请求不会被 express 处理，</div><div class="line">        // 需要使用会话中间节获取会话</div><div class="line">        sessionMiddleware(request, null, () =&gt; &#123;</div><div class="line">            const session = request.session;</div><div class="line">            if (!session) &#123;</div><div class="line">                // 没有获取到会话，强制断开 WebSocket 连接</div><div class="line">                ws.send(JSON.stringify(request.sessionError) || &quot;No session avaliable&quot;);</div><div class="line">                ws.close();</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            // 保留这个日志的输出可让实验室能检查到当前步骤是否完成</div><div class="line">            console.log(`WebSocket client connected with openId=$&#123;session.userInfo.openId&#125;`);</div><div class="line">            serveMessage(ws, session.userInfo);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // 监听 WebSocket 服务的错误</div><div class="line">    wss.on(&apos;error&apos;, (err) =&gt; &#123;</div><div class="line">	        console.log(err);</div><div class="line">	    &#125;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 进行简单的 WebSocket 服务，对于客户端发来的所有消息都回复回去</div><div class="line"> */</div><div class="line">function serveMessage(ws, userInfo) &#123;</div><div class="line">    // 监听客户端发来的消息</div><div class="line">    ws.on(&apos;message&apos;, (message) =&gt; &#123;</div><div class="line">        console.log(`WebSocket received: $&#123;message&#125;`);</div><div class="line">        ws.send(`Server: Received($&#123;message&#125;)`);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // 监听关闭事件</div><div class="line">    ws.on(&apos;close&apos;, (code, message) =&gt; &#123;</div><div class="line">        console.log(`WebSocket client closed (code: $&#123;code&#125;, message: $&#123;message || &apos;none&apos;&#125;)`);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // 连接后马上发送 hello 消息给会话对应的用户</div><div class="line">    ws.send(`Server: 恭喜，$&#123;userInfo.nickName&#125;`);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  编辑 <code>app.js</code>，调用 WebSocket 服务，可参考下面代码：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">// HTTP 模块同时支持 Express 和 WebSocket</div><div class="line">const http = require(&apos;http&apos;); </div><div class="line">// 引用 express 来支持 HTTP Server 的实现</div><div class="line">const express = require(&apos;express&apos;);</div><div class="line">// 引用 wafer-session 支持小程序会话</div><div class="line">const waferSession = require(&apos;wafer-node-session&apos;); </div><div class="line">// 使用 MongoDB 作为会话的存储</div><div class="line">const MongoStore = require(&apos;connect-mongo&apos;)(waferSession); </div><div class="line">// 引入配置文件</div><div class="line">const config = require(&apos;./config&apos;); </div><div class="line">// 引入 WebSocket 服务实现</div><div class="line">const websocket = require(&apos;./websocket&apos;);</div><div class="line"></div><div class="line">// 创建一个 express 实例</div><div class="line">const app = express();</div><div class="line"></div><div class="line">// 独立出会话中间件给 express 和 ws 使用</div><div class="line">const sessionMiddleware = waferSession(&#123;</div><div class="line">    appId: config.appId,</div><div class="line">    appSecret: config.appSecret,</div><div class="line">    loginPath: &apos;/login&apos;,</div><div class="line">    store: new MongoStore(&#123;</div><div class="line">        url: `mongodb://$&#123;config.mongoUser&#125;:$&#123;config.mongoPass&#125;@$&#123;config.mongoHost&#125;:$&#123;config.mongoPort&#125;/$&#123;config.mongoDb&#125;`</div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line">app.use(sessionMiddleware);</div><div class="line"></div><div class="line">// 在路由 /me 下，输出会话里包含的用户信息</div><div class="line">app.use(&apos;/me&apos;, (request, response, next) =&gt; &#123; </div><div class="line">    response.json(request.session ? request.session.userInfo : &#123; noBody: true &#125;); </div><div class="line">    if (request.session) &#123;</div><div class="line">        console.log(`Wafer session success with openId=$&#123;request.session.userInfo.openId&#125;`);</div><div class="line">    &#125;</div><div class="line">&#125;); </div><div class="line"></div><div class="line">// 实现一个中间件，对于未处理的请求，都输出 &quot;Response from express&quot;</div><div class="line">app.use((request, response, next) =&gt; &#123;</div><div class="line">    response.write(&apos;Response from express&apos;);</div><div class="line">    response.end();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 创建 HTTP Server 而不是直接使用 express 监听</div><div class="line">const server = http.createServer(app);</div><div class="line"></div><div class="line">// 让 WebSocket 服务在创建的 HTTP 服务器上监听</div><div class="line">websocket.listen(server, sessionMiddleware);</div><div class="line"></div><div class="line">// 启动 HTTP 服务</div><div class="line">server.listen(config.serverPort);</div><div class="line"></div><div class="line">// 输出服务器启动日志</div><div class="line">console.log(`Server listening at http://127.0.0.1:$&#123;config.serverPort&#125;`);</div></pre></td></tr></table></figure>
<p>  重启服务</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 restart app</div></pre></td></tr></table></figure>
</li>
<li><p>更新 Nginx 代理</p>
<p>  编辑 Nginx 配置 <code>ssl.conf</code>，添加 WebSocket 支持，可参考下面的配置(注：请将参考配置文件中的 www.example.com 替换为前面步骤申请的域名，将 1_www.example.com.crt 和 2_www.example.com.key 替换为前面步骤申请并上传的 SSL 证书的名称)：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># WebSocket 配置</div><div class="line">map $http_upgrade $connection_upgrade &#123;</div><div class="line">    default upgrade;</div><div class="line">    &apos;&apos;      close;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">       listen 443;</div><div class="line">       server_name www.example.com; # 改为绑定证书的域名</div><div class="line">       # ssl 配置</div><div class="line">       ssl on;</div><div class="line">       ssl_certificate 1_www.example.com.crt; # 改为自己申请得到的 crt 文件的名称</div><div class="line">       ssl_certificate_key 2_www.example.com.key; # 改为自己申请得到的 key 文件的名称</div><div class="line">       ssl_session_timeout 5m;</div><div class="line">       ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">       ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</div><div class="line">       ssl_prefer_server_ciphers on;</div><div class="line"></div><div class="line">       # WebSocket 配置</div><div class="line">       proxy_set_header Upgrade $http_upgrade;</div><div class="line">       proxy_set_header Connection $connection_upgrade;</div><div class="line"></div><div class="line">       location / &#123;</div><div class="line">           proxy_pass http://127.0.0.1:8765;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>  通知 Nginx 进程重新加载配置：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s reload</div></pre></td></tr></table></figure>
</li>
<li><p>测试 WebSocket</p>
<p>  打开配套的小程序，点击 <code>实验三：WebSocket</code>。进入测试页面后，点击 <code>连接</code> 按钮，如果出现连接成功的提示，表示 WebSocket 服务已经正常运行，可以收发消息。</p>
</li>
</ul>
<p><strong>7. 剪刀石头布小游戏</strong></p>
<ul>
<li><p>实现游戏房间逻辑</p>
<p>  创建 <code>/data/release/weapp/game</code> 目录用于存放剪刀石头布小游戏的代码</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/release/weapp/game</div></pre></td></tr></table></figure>
<p>  添加 <code>game/Room.js</code> 实现游戏房间逻辑，可参考下面的代码：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">enum GameChoice &#123;</div><div class="line">    // 剪刀</div><div class="line">    Scissors = 1,</div><div class="line">    // 石头</div><div class="line">    Rock = 2,</div><div class="line">    // 布</div><div class="line">    Paper = 3</div><div class="line">&#125;</div><div class="line">*/</div><div class="line">function judge(choice1, choice2) &#123;</div><div class="line">    // 和局</div><div class="line">    if (choice1 == choice2) return 0;</div><div class="line">    // Player 1 没出，Player 2 胜出</div><div class="line">    if (!choice1) return 1;</div><div class="line">    // Player 2 没出，Player 1 胜出</div><div class="line">    if (!choice2) return -1;</div><div class="line">    // 都出了就这么算</div><div class="line">    return (choice1 - choice2 + 3) % 3 == 1 ? -1 : 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/** @type &#123;Room[]&#125; */</div><div class="line">const globalRoomList = [];</div><div class="line"></div><div class="line">// 每个房间最多两人</div><div class="line">const MAX_ROOT_MEMBER = 2;</div><div class="line"></div><div class="line">// 游戏时间，单位秒</div><div class="line">const GAME_TIME = 3;</div><div class="line"></div><div class="line">let nextRoomId = 0;</div><div class="line"></div><div class="line">/** 表示一个房间 */</div><div class="line">module.exports = class Room &#123;</div><div class="line"></div><div class="line">    /** 获取所有房间 */</div><div class="line">    static all() &#123;</div><div class="line">        return globalRoomList.slice();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** 获取有座位的房间 */</div><div class="line">    static findRoomWithSeat() &#123;</div><div class="line">        return globalRoomList.find(x =&gt; !x.isFull());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** 创建新房间 */</div><div class="line">    static create() &#123;</div><div class="line">        const room = new Room();</div><div class="line">        globalRoomList.unshift(room);</div><div class="line">        return room;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    constructor() &#123;</div><div class="line">        this.id = `room$&#123;nextRoomId++&#125;`;</div><div class="line">        this.players = [];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** 添加玩家 */</div><div class="line">    addPlayer(player) &#123;</div><div class="line">        const &#123; uid, uname &#125; = player.user;</div><div class="line">        console.log(`Player $&#123;uid&#125;($&#123;uname&#125;) enter $&#123;this.id&#125;`);</div><div class="line">        this.players.push(player);</div><div class="line">        if (this.isFull()) &#123;</div><div class="line">            this.startGame();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** 删除玩家 */</div><div class="line">    removePlayer(player) &#123;</div><div class="line">        const &#123; uid, uname &#125; = player.user;</div><div class="line">        console.log(`Player $&#123;uid&#125;($&#123;uname&#125;) leave $&#123;this.id&#125;`);</div><div class="line">        const playerIndex = this.players.indexOf(player);</div><div class="line">        if (playerIndex != -1) &#123;</div><div class="line">            this.players.splice(playerIndex, 1);</div><div class="line">        &#125;</div><div class="line">        if (this.players.length === 0) &#123;</div><div class="line">            console.log(`Room $&#123;this.id&#125; is empty now`);</div><div class="line">            const roomIndex = globalRoomList.indexOf(this);</div><div class="line">            if (roomIndex &gt; -1) &#123;</div><div class="line">                globalRoomList.splice(roomIndex, 1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** 玩家已满 */</div><div class="line">    isFull() &#123;</div><div class="line">        return this.players.length == MAX_ROOT_MEMBER;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** 开始游戏 */</div><div class="line">    startGame() &#123;</div><div class="line">        // 保留这行日志输出可以让实验室检查到实验的完成情况</div><div class="line">        console.log(&apos;game started!&apos;);</div><div class="line"></div><div class="line">        // 当局积分清零</div><div class="line">        this.players.forEach(player =&gt; player.gameData.roundScore = 0);</div><div class="line"></div><div class="line">        // 集合玩家用户和游戏数据</div><div class="line">        const players = this.players.map(player =&gt; Object.assign(&#123;&#125;, player.user, player.gameData));</div><div class="line"></div><div class="line">        // 通知所有玩家开始</div><div class="line">        for (let player of this.players) &#123;</div><div class="line">            player.send(&apos;start&apos;, &#123;</div><div class="line">                gameTime: GAME_TIME,</div><div class="line">                players</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 计时结束</div><div class="line">        setTimeout(() =&gt; this.finishGame(), GAME_TIME * 1000);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** 结束游戏 */</div><div class="line">    finishGame() &#123;</div><div class="line">        const players = this.players;</div><div class="line"></div><div class="line">        // 两两对比算分</div><div class="line">        for (let i = 0; i &lt; MAX_ROOT_MEMBER; i++) &#123;</div><div class="line">            let p1 = players[i];</div><div class="line">            if (!p1) break;</div><div class="line">            for (let j = i + 1; j &lt; MAX_ROOT_MEMBER; j++) &#123;</div><div class="line">                let p2 = players[j];</div><div class="line">                const result = judge(p1.gameData.choice, p2.gameData.choice);</div><div class="line">                p1.gameData.roundScore -= result;</div><div class="line">                p2.gameData.roundScore += result;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        // 计算连胜奖励</div><div class="line">        for (let player of players) &#123;</div><div class="line">            const gameData = player.gameData;</div><div class="line">            // 胜局积分</div><div class="line">            if (gameData.roundScore &gt; 0) &#123;</div><div class="line">                gameData.winStreak++;</div><div class="line">                gameData.roundScore *= gameData.winStreak;</div><div class="line">            &#125;</div><div class="line">            // 败局清零</div><div class="line">            else if (gameData.roundScore &lt; 0) &#123;</div><div class="line">                gameData.roundScore = 0;</div><div class="line">                gameData.winStreak = 0;</div><div class="line">            &#125;</div><div class="line">            // 累积总分</div><div class="line">            gameData.totalScore += gameData.roundScore;</div><div class="line">        &#125;</div><div class="line">        // 计算结果</div><div class="line">        const result = players.map(player =&gt; &#123;</div><div class="line">            const &#123; uid &#125; = player.user;</div><div class="line">            const &#123; roundScore, totalScore, winStreak, choice &#125; = player.gameData;</div><div class="line">            return &#123; uid, roundScore, totalScore, winStreak, choice &#125;;</div><div class="line">        &#125;);</div><div class="line">        // 通知所有玩家游戏结果</div><div class="line">        for (let player of players) &#123;</div><div class="line">            player.send(&apos;result&apos;, &#123; result &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实现玩家逻辑</p>
<p>  添加 game/Player.js 实现玩家逻辑，可参考下面的代码：<br>const Room = require(“./Room”);</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 表示一个玩家，处理玩家的公共游戏逻辑，消息处理部分需要具体的玩家实现（请参考 ComputerPlayer 和 HumanPlayer）</div><div class="line"> */</div><div class="line">module.exports = class Player &#123;</div><div class="line">    constructor(user) &#123;</div><div class="line">        this.id = user.uid;</div><div class="line">        this.user = user;</div><div class="line">        this.room = null;</div><div class="line">        this.gameData = &#123;</div><div class="line">            // 当前的选择（剪刀/石头/布）</div><div class="line">            choice: null,</div><div class="line">            // 局积分</div><div class="line">            roundScore: 0,</div><div class="line">            // 总积分</div><div class="line">            totalScore: 0,</div><div class="line">            // 连胜次数</div><div class="line">            winStreak: 0</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 上线当前玩家，并且异步返回给玩家分配的房间</div><div class="line">     */</div><div class="line">    online(room) &#123;</div><div class="line">        // 处理玩家 &apos;join&apos; 消息</div><div class="line">        // 为玩家寻找一个可用的房间，并且异步返回</div><div class="line">        this.receive(&apos;join&apos;, () =&gt; &#123;</div><div class="line">            if (this.room) &#123;</div><div class="line">                this.room.removePlayer(this);</div><div class="line">            &#125;</div><div class="line">            room = this.room = room || Room.findRoomWithSeat() || Room.create();</div><div class="line">            room.addPlayer(this);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        // 处理玩家 &apos;choise&apos; 消息</div><div class="line">        // 需要记录玩家当前的选择，并且通知到房间里的其它玩家</div><div class="line">        this.receive(&apos;choice&apos;, (&#123; choice &#125;) =&gt; &#123;</div><div class="line">            this.gameData.choice = choice;</div><div class="line">            this.broadcast(&apos;movement&apos;, &#123;</div><div class="line">                uid: this.user.uid,</div><div class="line">                movement: &quot;choice&quot;</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        // 处理玩家 &apos;leave&apos; 消息</div><div class="line">        // 让玩家下线</div><div class="line">        this.receive(&apos;leave&apos;, () =&gt; this.offline);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 下线当前玩家，从房间离开</div><div class="line">     */</div><div class="line">    offline() &#123;</div><div class="line">        if (this.room) &#123;</div><div class="line">            this.room.removePlayer(this);</div><div class="line">            this.room = null;</div><div class="line">        &#125;</div><div class="line">        this.user = null;</div><div class="line">        this.gameData = null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 发送指定消息给当前玩家，需要具体子类实现</div><div class="line">     * @abstract</div><div class="line">     * @param &#123;string&#125; message 消息类型</div><div class="line">     * @param &#123;*&#125; data 消息数据</div><div class="line">     */</div><div class="line">    send(message, data) &#123;</div><div class="line">        throw new Error(&apos;Not implement: AbstractPlayer.send()&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 处理玩家发送的消息，需要具体子类实现</div><div class="line">     * @abstract</div><div class="line">     * @param &#123;string&#125; message 消息类型</div><div class="line">     * @param &#123;Function&#125; handler</div><div class="line">     */</div><div class="line">    receive(message, handler) &#123;</div><div class="line">        throw new Error(&apos;Not implement: AbstractPlayer.receive()&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 给玩家所在房间里的其它玩家发送消息</div><div class="line">     * @param &#123;string&#125; message 消息类型</div><div class="line">     * @param &#123;any&#125; data 消息数据</div><div class="line">     */</div><div class="line">    broadcast(message, data) &#123;</div><div class="line">        if (!this.room) return;</div><div class="line">        this.others().forEach(neighbor =&gt; neighbor.send(message, data));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获得玩家所在房间里的其他玩家</div><div class="line">     */</div><div class="line">    others() &#123;</div><div class="line">        return this.room.players.filter(player =&gt; player != this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实现电脑玩家</p>
<p>  在实现人类玩家之前，我们先来创建 <code>ComputerPlayer.js</code> 来实现电脑玩家</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">const EventEmitter = require(&apos;events&apos;);</div><div class="line">const Player = require(&apos;./Player&apos;);</div><div class="line"></div><div class="line">let nextComputerId = 0;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 机器人玩家实现，使用 EventEmitter 接收和发送消息</div><div class="line"> */</div><div class="line">module.exports = class ComputerPlayer extends Player &#123;</div><div class="line">    constructor() &#123;</div><div class="line">        const computerId = `robot-$&#123;++nextComputerId&#125;`;</div><div class="line">        super(&#123;</div><div class="line">            uid: computerId,</div><div class="line">            uname: computerId,</div><div class="line">            uavatar: &apos;http://www.scoutiegirl.com/wp-content/uploads/2015/06/Blue-Robot.png&apos;</div><div class="line">        &#125;);</div><div class="line">        this.emitter = new EventEmitter();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 模拟玩家行为</div><div class="line">     */</div><div class="line">    simulate() &#123;</div><div class="line">        this.receive(&apos;start&apos;, () =&gt; this.play());</div><div class="line">        this.receive(&apos;result&apos;, () =&gt; this.stop());</div><div class="line">        this.send(&apos;join&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 游戏开始后，随机时间后随机选择</div><div class="line">     */</div><div class="line">    play() &#123;</div><div class="line">        this.playing = true;</div><div class="line">        const randomTime = () =&gt; Math.floor(100 + Math.random() * 2000);</div><div class="line">        const randomChoice = () =&gt; &#123;</div><div class="line">            if (!this.playing) return;</div><div class="line">            this.send(&quot;choice&quot;, &#123;</div><div class="line">                choice: Math.floor(Math.random() * 10000) % 3 + 1</div><div class="line">            &#125;);</div><div class="line">            setTimeout(randomChoice, randomTime());</div><div class="line">        &#125;</div><div class="line">        setTimeout(randomChoice, 10);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 游戏结束后，标记起来，阻止继续随机选择</div><div class="line">     */</div><div class="line">    stop() &#123;</div><div class="line">        this.playing = false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 发送消息给当前玩家，直接转发到 emitter</div><div class="line">     */</div><div class="line">    send(message, data) &#123;</div><div class="line">        this.emitter.emit(message, data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 从当前的 emitter 处理消息</div><div class="line">     */</div><div class="line">    receive(message, handle) &#123;</div><div class="line">        this.emitter.on(message, handle);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实现人类玩家</p>
<p>  人类玩家通过 WebSocket 信道来实现玩家的输入输出<br>，我们需要添加 <code>game/Tunnel.js</code> 和 <code>game/HumanPlayer.js</code> 来实现人类玩家逻辑，可参考下面的代码：</p>
<p>  Tunnel.js</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">const EventEmitter = require(&apos;events&apos;);</div><div class="line"></div><div class="line">/**</div><div class="line"> * 封装 WebSocket 信道</div><div class="line"> */</div><div class="line">module.exports = class Tunnel &#123;</div><div class="line">    constructor(ws) &#123;</div><div class="line">        this.emitter = new EventEmitter();</div><div class="line">        this.ws = ws;</div><div class="line">        ws.on(&apos;message&apos;, packet =&gt; &#123;</div><div class="line">            try &#123;</div><div class="line">                // 约定每个数据包格式：&#123; message: &apos;type&apos;, data: any &#125;</div><div class="line">                const &#123; message, data &#125; = JSON.parse(packet);</div><div class="line">                this.emitter.emit(message, data);</div><div class="line">            &#125; catch (err) &#123;</div><div class="line">                console.log(&apos;unknown packet: &apos; + packet);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    on(message, handle) &#123;</div><div class="line">        this.emitter.on(message, handle);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    emit(message, data) &#123;</div><div class="line">        this.ws.send(JSON.stringify(&#123; message, data &#125;));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  HumanPlayer.js</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">const co = require(&apos;co&apos;);</div><div class="line">const Player = require(&apos;./Player&apos;);</div><div class="line">const ComputerPlayer = require(&apos;./ComputerPlayer&apos;);</div><div class="line">const Tunnel = require(&apos;./Tunnel&apos;);</div><div class="line"></div><div class="line">/**</div><div class="line"> * 人类玩家实现，通过 WebSocket 信道接收和发送消息</div><div class="line"> */</div><div class="line">module.exports = class HumanPlayer extends Player &#123;</div><div class="line">    constructor(user, ws) &#123;</div><div class="line">        super(user);</div><div class="line">        this.ws = ws;</div><div class="line">        this.tunnel = new Tunnel(ws);</div><div class="line">        this.send(&apos;id&apos;, user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 人类玩家上线后，还需要监听信道关闭，让玩家下线</div><div class="line">     */</div><div class="line">    online(room) &#123;</div><div class="line">        super.online(room);</div><div class="line">        this.ws.on(&apos;close&apos;, () =&gt; this.offline());</div><div class="line"></div><div class="line">        // 人类玩家请求电脑玩家</div><div class="line">        this.receive(&apos;requestComputer&apos;, () =&gt; &#123;</div><div class="line">            const room = this.room;</div><div class="line">            while(room &amp;&amp; !room.isFull()) &#123;</div><div class="line">                const computer = new ComputerPlayer();</div><div class="line">                computer.online(room);</div><div class="line">                computer.simulate();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 下线后关闭信道</div><div class="line">     */</div><div class="line">    offline() &#123;</div><div class="line">        super.offline();</div><div class="line">        if (this.ws &amp;&amp; this.ws.readyState == this.ws.OPEN) &#123;</div><div class="line">            this.ws.close();</div><div class="line">        &#125;</div><div class="line">        this.ws = null;</div><div class="line">        this.tunnel = null;</div><div class="line">        if (this.room) &#123;</div><div class="line">            // 清理房间里面的电脑玩家</div><div class="line">            for (let player of this.room.players) &#123;</div><div class="line">                if (player instanceof ComputerPlayer) &#123;</div><div class="line">                    this.room.removePlayer(player);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            this.room = null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 通过 WebSocket 信道发送消息给玩家</div><div class="line">     */</div><div class="line">    send(message, data) &#123;</div><div class="line">        this.tunnel.emit(message, data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 从 WebSocket 信道接收玩家的消息</div><div class="line">     */</div><div class="line">    receive(message, callback) &#123;</div><div class="line">        this.tunnel.on(message, callback);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>添加游戏服务入口</p>
<p>  游戏的实现已经完成了，接下来，编辑 <code>websocket.js</code> 添加服务入口，可参考下面的代码：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">// 引入 url 模块用于解析 URL</div><div class="line">const url = require(&apos;url&apos;);</div><div class="line">// 引入 ws 支持 WebSocket 的实现</div><div class="line">const ws = require(&apos;ws&apos;);</div><div class="line">// 引入人类玩家</div><div class="line">const HumanPlayer = require(&apos;./game/HumanPlayer&apos;);</div><div class="line"></div><div class="line">// 导出处理方法</div><div class="line">exports.listen = listen;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 在 HTTP Server 上处理 WebSocket 请求</div><div class="line"> * @param &#123;http.Server&#125; server</div><div class="line"> * @param &#123;wafer.SessionMiddleware&#125; sessionMiddleware</div><div class="line"> */</div><div class="line">function listen(server, sessionMiddleware) &#123;</div><div class="line">    // 使用 HTTP Server 创建 WebSocket 服务，使用 path 参数指定需要升级为 WebSocket 的路径</div><div class="line">    const wss = new ws.Server(&#123; server &#125;);</div><div class="line"></div><div class="line">    // 同时支持 /ws 和 /game 的 WebSocket 连接请求 </div><div class="line">    wss.shouldHandle = (request) =&gt; &#123; </div><div class="line">        const path = url.parse(request.url).pathname; </div><div class="line">        request.path = path; </div><div class="line">        return [&apos;/ws&apos;, &apos;/game&apos;].indexOf(path) &gt; -1; </div><div class="line">    &#125;; </div><div class="line"></div><div class="line">    // 监听 WebSocket 连接建立</div><div class="line">    wss.on(&apos;connection&apos;, (ws, request) =&gt; &#123;</div><div class="line">        // request: 要升级到 WebSocket 协议的 HTTP 连接</div><div class="line"></div><div class="line">        // 被升级到 WebSocket 的请求不会被 express 处理，</div><div class="line">        // 需要使用会话中间节获取会话</div><div class="line">        sessionMiddleware(request, null, () =&gt; &#123;</div><div class="line">            const session = request.session;</div><div class="line">            if (!session) &#123;</div><div class="line">                // 没有获取到会话，强制断开 WebSocket 连接</div><div class="line">                ws.send(JSON.stringify(request.sessionError) || &quot;No session avaliable&quot;);</div><div class="line">                ws.close();</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            console.log(`WebSocket client connected with openId=$&#123;session.userInfo.openId&#125;`);</div><div class="line"></div><div class="line">            // 根据请求的地址进行不同处理 </div><div class="line">            switch (request.path) &#123; </div><div class="line">                case &apos;/ws&apos;: return serveMessage(ws, session.userInfo); </div><div class="line">                case &apos;/game&apos;: return serveGame(ws, session.userInfo); </div><div class="line">                default: return ws.close();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // 监听 WebSocket 服务的错误</div><div class="line">    wss.on(&apos;error&apos;, (err) =&gt; &#123;</div><div class="line">        console.log(err);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 进行简单的 WebSocket 服务，对于客户端发来的所有消息都回复回去</div><div class="line"> */</div><div class="line">function serveMessage(ws, userInfo) &#123;</div><div class="line">    // 监听客户端发来的消息</div><div class="line">    ws.on(&apos;message&apos;, (message) =&gt; &#123;</div><div class="line">        console.log(`WebSocket received: $&#123;message&#125;`);</div><div class="line">        ws.send(`Server: Received($&#123;message&#125;)`);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // 监听关闭事件</div><div class="line">    ws.on(&apos;close&apos;, (code, message) =&gt; &#123;</div><div class="line">        console.log(`WebSocket client closed (code: $&#123;code&#125;, message: $&#123;message || &apos;none&apos;&#125;)`);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // 连接后马上发送 hello 消息给会话对应的用户</div><div class="line">    ws.send(`Server: 恭喜，$&#123;userInfo.nickName&#125;`);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 使用 WebSocket 进行游戏服务</div><div class="line"> */</div><div class="line">function serveGame(ws, userInfo) &#123;</div><div class="line">    const user = &#123; </div><div class="line">        uid: userInfo.openId, </div><div class="line">        uname: userInfo.nickName, </div><div class="line">        uavatar: userInfo.avatarUrl </div><div class="line">    &#125;; </div><div class="line">    // 创建玩家 </div><div class="line">    const player = new HumanPlayer(user, ws); </div><div class="line">    // 玩家上线</div><div class="line">    player.online();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>安装 co 模块</p>
<p>  我们的源码中使用到了 <code>co</code> 进行协程管理，启动游戏服务前，需要先安装：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/release/weapp</div><div class="line">npm install co --save</div></pre></td></tr></table></figure>
</li>
<li><p>测试游戏服务</p>
<p>  重启 Node 服务：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 restart app</div></pre></td></tr></table></figure>
<p>  打开配套的小程序，点击 <code>实验四 - 剪刀石头布小游戏</code>，点击 <code>开始</code> 按钮进行游戏。</p>
</li>
<li><p>测试完成</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> linux weixin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[七牛云——对象存储管理工具介绍]]></title>
      <url>/2017/10/15/%E4%B8%83%E7%89%9B%E4%BA%91%E2%80%94%E2%80%94%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p><strong>由于我是一个七牛的重度使用者（主要是对象存储），每次上传文件、复制链接、下载文件都必须用浏览器打开网页，而且还要登录，感觉好麻烦啊，干脆就自己开发了一个这样的工具（使用JavaFX编写），打包成可执行的jar包。</strong></p>
<p><strong>主要功能就是文件的上传下载，获取存储空间中的文件列表，搜索文件（支持正则表达式），复制文件外链，删除文件，移动（或复制）文件，重命名文件名，设置文件的生存时间等。</strong></p>
<p><strong>功能截图：</strong></p>
<p><strong>1. 主窗口界面：</strong></p>
<p><img src="http://img.blog.csdn.net/20171019104749116?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="程序主界面"></p>
<ul>
<li><p>设置文件前缀</p>
<p>  路径前缀可以用来分类文件，例如： <code>image/jpg/</code>your-file-name.jpg</p>
</li>
<li><p>添加存储空间</p>
<p>  添加存储空间，需要同时指定空间名称，空间域名以及所在区域</p>
<p>  <img src="http://img.blog.csdn.net/20171017122858110?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="添加存储空间"></p>
</li>
<li><p>重置密钥</p>
<p>  如果你修改了Key，可以在此处修改密钥</p>
<p>  <img src="http://img.blog.csdn.net/20171017123714044?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="重置密钥"></p>
<blockquote>
<p>说明：出于安全考虑，建议您周期性地更换密钥。<a href="https://portal.qiniu.com/user/key" target="_blank" rel="external">查看我的密钥</a> <a href="https://developer.qiniu.com/kodo/kb/1334/the-access-key-secret-key-encryption-key-safe-use-instructions" target="_blank" rel="external">密钥安全使用须知</a></p>
</blockquote>
</li>
<li><p>配置文件</p>
<p>  Windows使用路径：<code>C:/ProgramData/QiniuTool</code></p>
<p>  MacOS 或 Linux 使用路径：<code>$user.home/tool</code></p>
<p>  其中 <code>config.json</code> 为配置文件</p>
</li>
<li><p>文件上传</p>
<p>  除了可（支持断点和覆盖）上传本地文件外，还可抓取网络文件到空间中，如：</p>
<p>  <img src="http://img.blog.csdn.net/20171019105056517?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="上传网络文件"></p>
<p>  然后点击 <code>开始上传</code> 即可</p>
</li>
</ul>
<p><strong>2. 资源管理界面：</strong></p>
<p><img src="http://img.blog.csdn.net/20171019105225191?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="资源管理界面"></p>
<ul>
<li><p>刷新列表</p>
<p>  刷新当前存储空间的资源列表</p>
</li>
<li><p>复制链接</p>
<p>  复制你选中文件的外链</p>
</li>
<li><p>删除文件</p>
<p>  从存储空间中删除你选中的所有文件</p>
</li>
<li><p>移动文件</p>
<p>  移动（或复制）选中的所有文件到指定的存储空间中（目前好像七牛还不支持跨区域移动文件）</p>
<p>  <img src="http://img.blog.csdn.net/20171015222512819?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="移动文件界面"></p>
<blockquote>
<p>说明：勾选“保存文件副本”时表示当前操作为复制，不勾选时表示移动（会删除本存储空间的文件），默认勾选。</p>
</blockquote>
</li>
<li><p>生存时间</p>
<p>  设置选中文件的生存时间，到期后七牛会自动删除这些文件</p>
</li>
<li><p>更新镜像</p>
<p>  此功能首先需要你配置了镜像存储</p>
<blockquote>
<p>官方解释：对于配置了镜像存储的空间，如果镜像源站更新了文件内容，则默认情况下，七牛不会再主动从客户镜像源站同步新的副本，这个时候就需要利用这个prefetch接口来主动地将空间中的文件和更新后的源站副本进行同步。</p>
</blockquote>
</li>
<li><p>公有下载</p>
<p>  直接下载选中的文件（私有的存储空间不可用）</p>
</li>
<li><p>私有下载</p>
<p>  下载选中的私有存储空间的文件</p>
</li>
<li><p>打开文件</p>
<p>  用浏览器打开你选中的文件</p>
</li>
<li><p>链接下载</p>
<p>  由于这两天迅雷抽风了，下载出现BUG，所以提供了这样一个临时的下载方案，打开后直接输入链接即可下载</p>
</li>
<li><p>文件刷新</p>
<p>  从七牛云镜像源刷新你选中的文件，保证用户下载的是最新上传的文件，而不是之前的旧版本（个人感觉和 <code>更新镜像</code> 是一样的）</p>
</li>
<li><p>日志下载</p>
<p>  从七牛下载指定日期的操作日志</p>
</li>
</ul>
<blockquote>
<p>说明：操作文件时，需要选中文件才能操作（支持多选）。由于下载私有空间的文件需要临时授权，所以文件的下载分为私有下载（生成临时授权然后下载文件）和公有下载（直接下载文件）。</p>
</blockquote>
<p><strong>3. 数据统计界面</strong></p>
<p><img src="http://img.blog.csdn.net/20171019105531070?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="数据统计界面"></p>
<blockquote>
<p>说明：时间范围不超过31天，否则无法获取数据，这是七牛官方规定的。</p>
</blockquote>
<p><strong>4. 其他</strong></p>
<ul>
<li><p><a href="http://oq3iwfipo.bkt.clouddn.com/tools/zhazhapan/qiniu.jar" title="七牛云——对象存储管理工具jar包下载地址" target="_blank" rel="external"><strong>下载可执行的jar包</strong></a></p>
</li>
<li><p><a href="https://github.com/zhazhapan/qiniu/releases" target="_blank" rel="external"><strong>历史版本</strong></a> </p>
</li>
<li><p><a href="https://github.com/zhazhapan/qiniu" title="七牛云——对象存储管理工具项目源码地址" target="_blank" rel="external"><strong>项目源代码</strong></a></p>
</li>
<li><p><a href="https://developer.qiniu.com/kodo/sdk/1239/java" target="_blank" rel="external"><strong>官方JavaSDK文档</strong></a></p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> qiniu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaFX Dialog对话框]]></title>
      <url>/2017/10/12/JavaFX-Dialog%E5%AF%B9%E8%AF%9D%E6%A1%86/</url>
      <content type="html"><![CDATA[<h2 id="1-标准对话框"><a href="#1-标准对话框" class="headerlink" title="1. 标准对话框"></a>1. 标准对话框</h2><ul>
<li><strong>消息对话框</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Alert alert = <span class="keyword">new</span> Alert(AlertType.INFORMATION);</div><div class="line">alert.setTitle(<span class="string">"Information Dialog"</span>);</div><div class="line">alert.setHeaderText(<span class="string">"Look, an Information Dialog"</span>);</div><div class="line">alert.setContentText(<span class="string">"I have a great message for you!"</span>);</div><div class="line"></div><div class="line">alert.showAndWait();</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://img.blog.csdn.net/20171012144601083?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="information dialog"></p>
<ul>
<li><strong>没有标题的消息对话框</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Alert alert = <span class="keyword">new</span> Alert(AlertType.INFORMATION);</div><div class="line">alert.setTitle(<span class="string">"Information Dialog"</span>);</div><div class="line">alert.setHeaderText(<span class="keyword">null</span>);</div><div class="line">alert.setContentText(<span class="string">"I have a great message for you!"</span>);</div><div class="line"></div><div class="line">alert.showAndWait();</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://img.blog.csdn.net/20171012144719712?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="information dialog no header"></p>
<h2 id="2-警告对话框"><a href="#2-警告对话框" class="headerlink" title="2. 警告对话框"></a>2. 警告对话框</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Alert alert = <span class="keyword">new</span> Alert(AlertType.WARNING);</div><div class="line">alert.setTitle(<span class="string">"Warning Dialog"</span>);</div><div class="line">alert.setHeaderText(<span class="string">"Look, a Warning Dialog"</span>);</div><div class="line">alert.setContentText(<span class="string">"Careful with the next step!"</span>);</div><div class="line"></div><div class="line">alert.showAndWait();</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20171012144949166?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="warning dialog"></p>
<h2 id="3-错误对话框"><a href="#3-错误对话框" class="headerlink" title="3. 错误对话框"></a>3. 错误对话框</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Alert alert = <span class="keyword">new</span> Alert(AlertType.ERROR);</div><div class="line">alert.setTitle(<span class="string">"Error Dialog"</span>);</div><div class="line">alert.setHeaderText(<span class="string">"Look, an Error Dialog"</span>);</div><div class="line">alert.setContentText(<span class="string">"Ooops, there was an error!"</span>);</div><div class="line"></div><div class="line">alert.showAndWait();</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20171012145044099?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="error dialog"></p>
<h2 id="4-异常对话框"><a href="#4-异常对话框" class="headerlink" title="4. 异常对话框"></a>4. 异常对话框</h2><p>这不是一个完整的异常对话框。但我们可以很容易地将 <code>TextArea</code> 作为可扩展的内容。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">Alert alert = <span class="keyword">new</span> Alert(AlertType.ERROR);</div><div class="line">alert.setTitle(<span class="string">"Exception Dialog"</span>);</div><div class="line">alert.setHeaderText(<span class="string">"Look, an Exception Dialog"</span>);</div><div class="line">alert.setContentText(<span class="string">"Could not find file blabla.txt!"</span>);</div><div class="line"></div><div class="line">Exception ex = <span class="keyword">new</span> FileNotFoundException(<span class="string">"Could not find file blabla.txt"</span>);</div><div class="line"></div><div class="line"><span class="comment">// Create expandable Exception.</span></div><div class="line">StringWriter sw = <span class="keyword">new</span> StringWriter();</div><div class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(sw);</div><div class="line">ex.printStackTrace(pw);</div><div class="line">String exceptionText = sw.toString();</div><div class="line"></div><div class="line">Label label = <span class="keyword">new</span> Label(<span class="string">"The exception stacktrace was:"</span>);</div><div class="line"></div><div class="line">TextArea textArea = <span class="keyword">new</span> TextArea(exceptionText);</div><div class="line">textArea.setEditable(<span class="keyword">false</span>);</div><div class="line">textArea.setWrapText(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">textArea.setMaxWidth(Double.MAX_VALUE);</div><div class="line">textArea.setMaxHeight(Double.MAX_VALUE);</div><div class="line">GridPane.setVgrow(textArea, Priority.ALWAYS);</div><div class="line">GridPane.setHgrow(textArea, Priority.ALWAYS);</div><div class="line"></div><div class="line">GridPane expContent = <span class="keyword">new</span> GridPane();</div><div class="line">expContent.setMaxWidth(Double.MAX_VALUE);</div><div class="line">expContent.add(label, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">expContent.add(textArea, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// Set expandable Exception into the dialog pane.</span></div><div class="line">alert.getDialogPane().setExpandableContent(expContent);</div><div class="line"></div><div class="line">alert.showAndWait();</div></pre></td></tr></table></figure></p>
<p><img src="http://img.blog.csdn.net/20171012145457913?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="exception dialog"></p>
<h2 id="5-确认对话框"><a href="#5-确认对话框" class="headerlink" title="5. 确认对话框"></a>5. 确认对话框</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Alert alert = <span class="keyword">new</span> Alert(AlertType.CONFIRMATION);</div><div class="line">alert.setTitle(<span class="string">"Confirmation Dialog"</span>);</div><div class="line">alert.setHeaderText(<span class="string">"Look, a Confirmation Dialog"</span>);</div><div class="line">alert.setContentText(<span class="string">"Are you ok with this?"</span>);</div><div class="line"></div><div class="line">Optional&lt;ButtonType&gt; result = alert.showAndWait();</div><div class="line"><span class="keyword">if</span> (result.get() == ButtonType.OK)&#123;</div><div class="line">    <span class="comment">// ... user chose OK</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// ... user chose CANCEL or closed the dialog</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20171012145724063?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="confirmation dialog"></p>
<h2 id="6-自定义确认对话框"><a href="#6-自定义确认对话框" class="headerlink" title="6. 自定义确认对话框"></a>6. 自定义确认对话框</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Alert alert = <span class="keyword">new</span> Alert(AlertType.CONFIRMATION);</div><div class="line">alert.setTitle(<span class="string">"Confirmation Dialog with Custom Actions"</span>);</div><div class="line">alert.setHeaderText(<span class="string">"Look, a Confirmation Dialog with Custom Actions"</span>);</div><div class="line">alert.setContentText(<span class="string">"Choose your option."</span>);</div><div class="line"></div><div class="line">ButtonType buttonTypeOne = <span class="keyword">new</span> ButtonType(<span class="string">"One"</span>);</div><div class="line">ButtonType buttonTypeTwo = <span class="keyword">new</span> ButtonType(<span class="string">"Two"</span>);</div><div class="line">ButtonType buttonTypeThree = <span class="keyword">new</span> ButtonType(<span class="string">"Three"</span>);</div><div class="line">ButtonType buttonTypeCancel = <span class="keyword">new</span> ButtonType(<span class="string">"Cancel"</span>, ButtonData.CANCEL_CLOSE);</div><div class="line"></div><div class="line">alert.getButtonTypes().setAll(buttonTypeOne, buttonTypeTwo, buttonTypeThree, buttonTypeCancel);</div><div class="line"></div><div class="line">Optional&lt;ButtonType&gt; result = alert.showAndWait();</div><div class="line"><span class="keyword">if</span> (result.get() == buttonTypeOne)&#123;</div><div class="line">    <span class="comment">// ... user chose "One"</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.get() == buttonTypeTwo) &#123;</div><div class="line">    <span class="comment">// ... user chose "Two"</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (result.get() == buttonTypeThree) &#123;</div><div class="line">    <span class="comment">// ... user chose "Three"</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// ... user chose CANCEL or closed the dialog</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20171012150009401?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="custom action confirmation dialog"></p>
<h2 id="7-可输入的对话框"><a href="#7-可输入的对话框" class="headerlink" title="7. 可输入的对话框"></a>7. 可输入的对话框</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">TextInputDialog dialog = <span class="keyword">new</span> TextInputDialog(<span class="string">"walter"</span>);</div><div class="line">dialog.setTitle(<span class="string">"Text Input Dialog"</span>);</div><div class="line">dialog.setHeaderText(<span class="string">"Look, a Text Input Dialog"</span>);</div><div class="line">dialog.setContentText(<span class="string">"Please enter your name:"</span>);</div><div class="line"></div><div class="line"><span class="comment">// Traditional way to get the response value.</span></div><div class="line">Optional&lt;String&gt; result = dialog.showAndWait();</div><div class="line"><span class="keyword">if</span> (result.isPresent())&#123;</div><div class="line">    System.out.println(<span class="string">"Your name: "</span> + result.get());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// The Java 8 way to get the response value (with lambda expression).</span></div><div class="line">result.ifPresent(name -&gt; System.out.println(<span class="string">"Your name: "</span> + name));</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20171012150524109?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="text input dialog"></p>
<blockquote>
<p>说明：如果用户点击了取消按钮<code>result.isPresent()</code>将会返回false</p>
</blockquote>
<h2 id="8-可选择的对话框"><a href="#8-可选择的对话框" class="headerlink" title="8. 可选择的对话框"></a>8. 可选择的对话框</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; choices = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">choices.add(<span class="string">"a"</span>);</div><div class="line">choices.add(<span class="string">"b"</span>);</div><div class="line">choices.add(<span class="string">"c"</span>);</div><div class="line"></div><div class="line">ChoiceDialog&lt;String&gt; dialog = <span class="keyword">new</span> ChoiceDialog&lt;&gt;(<span class="string">"b"</span>, choices);</div><div class="line">dialog.setTitle(<span class="string">"Choice Dialog"</span>);</div><div class="line">dialog.setHeaderText(<span class="string">"Look, a Choice Dialog"</span>);</div><div class="line">dialog.setContentText(<span class="string">"Choose your letter:"</span>);</div><div class="line"></div><div class="line"><span class="comment">// Traditional way to get the response value.</span></div><div class="line">Optional&lt;String&gt; result = dialog.showAndWait();</div><div class="line"><span class="keyword">if</span> (result.isPresent())&#123;</div><div class="line">    System.out.println(<span class="string">"Your choice: "</span> + result.get());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// The Java 8 way to get the response value (with lambda expression).</span></div><div class="line">result.ifPresent(letter -&gt; System.out.println(<span class="string">"Your choice: "</span> + letter));</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20171012150757770?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="choice dialog"></p>
<blockquote>
<p>说明：如果用户没有选择或点击了取消，<code>result.isPresent()</code>将会返回false</p>
</blockquote>
<h2 id="9-自定义登录框"><a href="#9-自定义登录框" class="headerlink" title="9. 自定义登录框"></a>9. 自定义登录框</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create the custom dialog.</span></div><div class="line">Dialog&lt;Pair&lt;String, String&gt;&gt; dialog = <span class="keyword">new</span> Dialog&lt;&gt;();</div><div class="line">dialog.setTitle(<span class="string">"Login Dialog"</span>);</div><div class="line">dialog.setHeaderText(<span class="string">"Look, a Custom Login Dialog"</span>);</div><div class="line"></div><div class="line"><span class="comment">// Set the icon (must be included in the project).</span></div><div class="line">dialog.setGraphic(<span class="keyword">new</span> ImageView(<span class="keyword">this</span>.getClass().getResource(<span class="string">"login.png"</span>).toString()));</div><div class="line"></div><div class="line"><span class="comment">// Set the button types.</span></div><div class="line">ButtonType loginButtonType = <span class="keyword">new</span> ButtonType(<span class="string">"Login"</span>, ButtonData.OK_DONE);</div><div class="line">dialog.getDialogPane().getButtonTypes().addAll(loginButtonType, ButtonType.CANCEL);</div><div class="line"></div><div class="line"><span class="comment">// Create the username and password labels and fields.</span></div><div class="line">GridPane grid = <span class="keyword">new</span> GridPane();</div><div class="line">grid.setHgap(<span class="number">10</span>);</div><div class="line">grid.setVgap(<span class="number">10</span>);</div><div class="line">grid.setPadding(<span class="keyword">new</span> Insets(<span class="number">20</span>, <span class="number">150</span>, <span class="number">10</span>, <span class="number">10</span>));</div><div class="line"></div><div class="line">TextField username = <span class="keyword">new</span> TextField();</div><div class="line">username.setPromptText(<span class="string">"Username"</span>);</div><div class="line">PasswordField password = <span class="keyword">new</span> PasswordField();</div><div class="line">password.setPromptText(<span class="string">"Password"</span>);</div><div class="line"></div><div class="line">grid.add(<span class="keyword">new</span> Label(<span class="string">"Username:"</span>), <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">grid.add(username, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">grid.add(<span class="keyword">new</span> Label(<span class="string">"Password:"</span>), <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">grid.add(password, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// Enable/Disable login button depending on whether a username was entered.</span></div><div class="line">Node loginButton = dialog.getDialogPane().lookupButton(loginButtonType);</div><div class="line">loginButton.setDisable(<span class="keyword">true</span>);</div><div class="line"></div><div class="line"><span class="comment">// Do some validation (using the Java 8 lambda syntax).</span></div><div class="line">username.textProperty().addListener((observable, oldValue, newValue) -&gt; &#123;</div><div class="line">    loginButton.setDisable(newValue.trim().isEmpty());</div><div class="line">&#125;);</div><div class="line"></div><div class="line">dialog.getDialogPane().setContent(grid);</div><div class="line"></div><div class="line"><span class="comment">// Request focus on the username field by default.</span></div><div class="line">Platform.runLater(() -&gt; username.requestFocus());</div><div class="line"></div><div class="line"><span class="comment">// Convert the result to a username-password-pair when the login button is clicked.</span></div><div class="line">dialog.setResultConverter(dialogButton -&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (dialogButton == loginButtonType) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pair&lt;&gt;(username.getText(), password.getText());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Optional&lt;Pair&lt;String, String&gt;&gt; result = dialog.showAndWait();</div><div class="line"></div><div class="line">result.ifPresent(usernamePassword -&gt; &#123;</div><div class="line">    System.out.println(<span class="string">"Username="</span> + usernamePassword.getKey() + <span class="string">", Password="</span> + usernamePassword.getValue());</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20171012151145160?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="login dialog"></p>
<h2 id="10-修改对话框样式"><a href="#10-修改对话框样式" class="headerlink" title="10. 修改对话框样式"></a>10. 修改对话框样式</h2><ul>
<li><strong>自定义图标</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Get the Stage.</span></div><div class="line">Stage stage = (Stage) dialog.getDialogPane().getScene().getWindow();</div><div class="line"></div><div class="line"><span class="comment">// Add a custom icon.</span></div><div class="line">stage.getIcons().add(<span class="keyword">new</span> Image(<span class="keyword">this</span>.getClass().getResource(<span class="string">"login.png"</span>).toString()));</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://img.blog.csdn.net/20171012151651236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="custom icon"></p>
<p>说明：根据JavaFX 8u40最终版本的BUG报告，应该使用与它正在运行的应用程序相同的图标。在这种情况下，你还需要设置它的所有者，对话框会得到所有者的图标:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dialog.initOwner(otherStage);</div></pre></td></tr></table></figure></p>
<ul>
<li>不使用图标<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dialog.initStyle(StageStyle.UTILITY);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://img.blog.csdn.net/20171012152131364?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="minimal"></p>
<h2 id="11-其他操作"><a href="#11-其他操作" class="headerlink" title="11. 其他操作"></a>11. 其他操作</h2><ul>
<li>设置拥有者<br>你可以为每一个对话框指定所有者。如果指定所有者或拥有者为null，那么它是一个顶级的、未拥有的对话框。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dialog.initOwner(parentWindow);</div><div class="line">``` </div><div class="line">- 设置模式</div><div class="line">你可以指定对话框的模式，包括`Modality.NONE`、`WINDOW_MODAL`或`Modality.APPLICATION_MODAL`。</div><div class="line">``` java</div><div class="line">dialog.initModality(Modality.NONE);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="12-API-文档"><a href="#12-API-文档" class="headerlink" title="12. API 文档"></a>12. API 文档</h2><p>关于对话框的更多信息，请看JavaFX API官方文档:</p>
<ul>
<li><a href="http://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Alert.html" target="_blank" rel="external">Alert</a></li>
<li><a href="http://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Dialog.html" target="_blank" rel="external">Dialog</a></li>
<li><a href="http://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/TextInputDialog.html" target="_blank" rel="external">TextInputDialog</a></li>
<li><a href="http://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/ChoiceDialog.html" target="_blank" rel="external">ChoiceDialog</a></li>
<li><a href="http://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/DialogPane.html" target="_blank" rel="external">DialogPane</a></li>
</ul>
<blockquote>
<p><a href="http://code.makery.ch/blog/javafx-dialogs-official/" target="_blank" rel="external">阅读原文点击这里</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> java javafx dialog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaFX HelloWord]]></title>
      <url>/2017/10/11/JavaFX-HelloWord/</url>
      <content type="html"><![CDATA[<p><strong>1. 安装插件，e(fx)clipse</strong></p>
<p><img src="http://img.blog.csdn.net/20171011225431899?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="e(fx)clipse"></p>
<p><strong>2. 新建JavaFX项目</strong></p>
<p><img src="http://img.blog.csdn.net/20171011225544316?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="javafx"></p>
<p><strong>3. 新建一个测试类，代码如下</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">import javafx.application.Application;</div><div class="line">import javafx.scene.Scene;</div><div class="line">import javafx.scene.control.Label;</div><div class="line">import javafx.scene.layout.GridPane;</div><div class="line">import javafx.stage.Stage;</div><div class="line"></div><div class="line">public class Test extends Application &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void start(Stage primaryStage) &#123;</div><div class="line">		Label label = new Label(&quot;Hello JavaFX&quot;);</div><div class="line">		GridPane gp = new GridPane();</div><div class="line">		gp.getChildren().add(label);</div><div class="line">		Scene scene = new Scene(gp, 300, 300);</div><div class="line"></div><div class="line">		primaryStage.setTitle(&quot;My First JavaFX&quot;);</div><div class="line">		primaryStage.setScene(scene);</div><div class="line">		primaryStage.show();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		//启动JavaFX应用程序</div><div class="line">		launch(args);</div><div class="line">		//Application.launch(args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> java javafx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用sftp在Linux（MacOS）之间进行文件传输]]></title>
      <url>/2017/10/10/%E4%BD%BF%E7%94%A8sftp%E5%9C%A8Linux%EF%BC%88MacOS%EF%BC%89%E4%B9%8B%E9%97%B4%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/</url>
      <content type="html"><![CDATA[<p><strong>1. 打开终端，连接远程Linux</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sftp user@host</div><div class="line">例如：sftp root@192.168.1.2</div></pre></td></tr></table></figure></p>
<p><strong>2. 上传文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">put local_path remote_path</div><div class="line">例如：put -r /home/share/read.txt /home/root</div></pre></td></tr></table></figure></p>
<p><strong>3. 上传文件夹以文件夹里的所有内容</strong></p>
<p>比如上传文件夹 <code>folder</code>，首先需要在远程机上创建这个文件夹，然后使用下面命令 <code>put</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">put -r /home/share/folder/* /home/root/folder</div></pre></td></tr></table></figure></p>
<p><strong>4. 下载文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">get remote_path local_path</div><div class="line">例如：get -r /usr/local/some.zip /home/share</div></pre></td></tr></table></figure></p>
<p><strong>5. 下载文件夹以文件夹里的所有内容</strong></p>
<p>比如下载文件夹 <code>folder</code>，首先需要在本机上创建这个文件夹，然后使用下面命令 <code>get</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">get -r /usr/local/folder/* /home/share/folder</div></pre></td></tr></table></figure></p>
<p><strong>6. 退出</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exit</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> linux sftp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[代码生成器JHipster入门教程——安装]]></title>
      <url>/2017/10/10/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8JHipster%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p><strong>JHipster是一个代码生成器，可以用来生成基于Spring Boot 和 AngularJS的项目</strong></p>
<p><strong>1. 安装 Node.js</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install node</div></pre></td></tr></table></figure></p>
<p><strong>2. 安装Git客户端</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure></p>
<p><strong>3. 安装npm包管理器</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install npm</div></pre></td></tr></table></figure></p>
<p><strong>4. 安装Yeoman generator</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g yo</div></pre></td></tr></table></figure></p>
<p><strong>5. 安装Bower</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g bower</div></pre></td></tr></table></figure></p>
<p><strong>6. 安装Grunt</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g grunt-cli</div></pre></td></tr></table></figure></p>
<p><strong>7. 安装Yarn</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install yarn</div></pre></td></tr></table></figure></p>
<p><strong>8. 使用JHipster生成项目</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir hello</div><div class="line">cd hello</div><div class="line">yo jhipster</div></pre></td></tr></table></figure></p>
<p><strong>9. 接下来按照向导进行操作即可</strong></p>
<p><img src="http://img.blog.csdn.net/20171010220454974?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="jhipster01"></p>
<blockquote>
<p>到后面会有多项选择，使用空格选择或取消选择，a和i全选或全不选</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20171010220840244?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="jhipster02"></p>
<p><img src="http://img.blog.csdn.net/20171010221239500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="jhipster03"></p>
<pre><code>接下来等待完成即可。
</code></pre><p><strong>10. 修改数据库连接信息</strong></p>
<pre><code>进入目录src/main/resources/config找到配置文件application-dev.yml和application-prod.yml修改以下内容：
</code></pre><p><img src="http://img.blog.csdn.net/20171010222655034?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="database"></p>
<p><strong>11. 运行项目</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./mvnw</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> java jhipster </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse插件推荐]]></title>
      <url>/2017/09/30/Eclipse%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      <content type="html"><![CDATA[<blockquote>
<p>打开Eclipse Marketplace搜索插件名即可</p>
</blockquote>
<ol>
<li><p><code>Properties Editor</code>：一个好用的属性编辑器</p>
</li>
<li><p><code>Class Decompiler</code>：Java反编译插件</p>
</li>
<li><p><code>Color Theme</code>：编辑器主题修改，有很多好看的主题</p>
</li>
<li><p><code>Darkest Dask Theme</code>：Eclipse暗黑主题，很好看</p>
</li>
<li><p><code>Spring Tools</code>：Spring开发必备工具</p>
</li>
<li><p><code>Subversion</code>：版本管理</p>
</li>
<li><p><code>JBoss Tools</code>：Hibernate开发必备</p>
</li>
<li><p><code>DevUtils</code>：一个好用的开发者工具</p>
</li>
<li><p><code>FindBug</code>：代码检查，默认是不触发，需要到设置里设置</p>
</li>
<li><p><code>Checkstyle</code>：代码风格检查</p>
</li>
<li><p><code>QuickImage</code>：可在Eclipse内查看图片</p>
</li>
<li><p><code>UML Designer</code>：UML插件工具</p>
</li>
<li><p><code>pmd</code>：代码分析工具</p>
</li>
<li><p><code>TestNG</code>：单元测试工具</p>
</li>
<li><p><code>Maven Integration for Eclipse</code>：Maven项目管理插件</p>
</li>
<li><p><code>DevStyle</code>：美化Eclipse，请你的Eclipse和IntelliJ一样好看</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> eclipse </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Eclipse新建Spring Boot项目]]></title>
      <url>/2017/09/30/Eclipse%E6%96%B0%E5%BB%BASpring-Boot%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p><strong>1. 下载Spring Tool Suite插件</strong></p>
<p><img src="http://img.blog.csdn.net/20170925193715631?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="spring tool suite"></p>
<p><strong>2. 新建Spring Boot项目</strong></p>
<p><img src="http://img.blog.csdn.net/20170925193908949?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="spring starter project"></p>
<p><strong>3. 填写项目信息</strong></p>
<p><img src="http://img.blog.csdn.net/20170925194308898?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="填写项目信息"></p>
<p><strong>4. 选择项目依赖</strong></p>
<p><img src="http://img.blog.csdn.net/20170925194616038?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="项目依赖"></p>
<p><strong>5. 完成项目新建</strong></p>
<p><img src="http://img.blog.csdn.net/20170925194809527?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="完成项目新建"></p>
<p><strong>6. 添加一个测试控制器，代码如下</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * </div><div class="line"> */</div><div class="line">package com.zhazhapan.spring.springboot;</div><div class="line"></div><div class="line">import org.springframework.boot.SpringApplication;</div><div class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @author pantao</div><div class="line"> *</div><div class="line"> */</div><div class="line">@RestController</div><div class="line">@SpringBootApplication // 开启自动配置</div><div class="line">public class BootTestApplication &#123;</div><div class="line">	@RequestMapping(&quot;/&quot;)</div><div class="line">	String index() &#123;</div><div class="line">		return &quot;Hello Spring Boot&quot;;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		SpringApplication.run(BootTestApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>7. 右键项目，选择Spring Boot App运行，并选择一个项目入口</strong></p>
<p><img src="http://img.blog.csdn.net/20170925214045257?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="spring boot app"></p>
<p><img src="http://img.blog.csdn.net/20170925214549614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="run"></p>
<p><strong>8. 运行效果</strong></p>
<p><img src="http://img.blog.csdn.net/20170925213649015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="运行效果"></p>
]]></content>
      
        
        <tags>
            
            <tag> elipse java spring springboot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VMware Workstation 14永久激活密钥]]></title>
      <url>/2017/09/30/VMware-Workstation-14%E6%B0%B8%E4%B9%85%E6%BF%80%E6%B4%BB%E5%AF%86%E9%92%A5/</url>
      <content type="html"><![CDATA[<p>VMware Workstation是一款功能强大的桌面虚拟计算机软件，简单来说就是最强的中文虚拟机了，可以在桌面上运行不同的操作系统，下面就把VMware Workstation 14的激活密钥分享给大家！</p>
<p><strong>VMware workstation 14永久激活密钥分享：</strong></p>
<pre><code>CG54H-D8D0H-H8DHY-C6X7X-N2KG6

ZC3WK-AFXEK-488JP-A7MQX-XL8YF

AC5XK-0ZD4H-088HP-9NQZV-ZG2R4

ZC5XK-A6E0M-080XQ-04ZZG-YF08D

ZY5H0-D3Y8K-M89EZ-AYPEG-MYUA8

FF590-2DX83-M81LZ-XDM7E-MKUT4

FF31K-AHZD1-H8ETZ-8WWEZ-WUUVA

CV7T2-6WY5Q-48EWP-ZXY7X-QGUWD

AALYG-20HVE-WHQ13-67MUP-XVMF3
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> vmware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MacOS安装Docker]]></title>
      <url>/2017/09/30/MacOS%E5%AE%89%E8%A3%85Docker/</url>
      <content type="html"><![CDATA[<p><strong>1. <a href="https://download.docker.com/mac/stable/Docker.dmg" title="下载Docker for mac" target="_blank" rel="external">下载Docker for Mac</a></strong></p>
<p><strong>2. 系统要求，只有在满足以下需求的情况下，Docker才会启动</strong></p>
<ul>
<li><p>Mac必须是2010年或更新的型号，英特尔的硬件支持内存管理单元(MMU)虚拟化。即扩展页表(概念)和不受限制的模式。</p>
</li>
<li><p>OS X El Capitan 10.11和更新的macOS版本。至少，对于Mac来说，Docker需要macOS Yosemite的10.10.3或更新的版本。</p>
</li>
<li><p>从Docker开始，Mac稳定版本1.13(即将发布)和并行发布版本，我们将不再讨论OS X Yosemite 10.10所特有的问题。在未来的版本中，由于Mac OS X版本的弃用，Mac版的Docker可能会停止在OS X Yosemite上的工作。我们建议升级到最新版的macOS。</p>
</li>
<li><p>至少4GB的内存</p>
</li>
<li><p>在版本4.3.30之前的VirtualBox不能安装(它与此版本的Docker不兼容)。如果你安装了一个新版本的VirtualBox，是可以的。</p>
</li>
</ul>
<p><strong>3. 安装Docker。双击Docker.dmg，运行即可。</strong></p>
<p><strong>4. 运行Docker，首次运行Docker需要请求权限，确定并输入密码即可</strong></p>
<p><img src="http://img.blog.csdn.net/20170929162142852?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Docker"></p>
<p><img src="http://img.blog.csdn.net/20170929162235325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Docker"></p>
<p><strong>5. 启动一个Web服务，在终端执行以下命令：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 80:80 --name webserver nginx</div><div class="line"><span class="comment">#停止运行服务执行命令 `docker stop webserver` 即可</span></div><div class="line"><span class="comment">#再次运行执行命令 `docker start webserver` 即可</span></div></pre></td></tr></table></figure></p>
<p>访问localhost看到如下内容表示Docker安装成功：</p>
<p><img src="http://img.blog.csdn.net/20170929162926173?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Docker"></p>
<p><strong>7. 查看Docker运行的容器可执行以下命令</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker ps -l	<span class="comment">#或docker ps -a</span></div><div class="line"><span class="comment">#退出并删除容器可执行以下命令</span></div><div class="line">docker <span class="built_in">kill</span> &lt;CONTAINER ID&gt;</div><div class="line">docker rm &lt;CONTAINER ID&gt;</div></pre></td></tr></table></figure></p>
<p><strong>8. 停止并删除Web服务器，可执行以下命令</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker stop webserver</div><div class="line">docker rm webserver</div></pre></td></tr></table></figure></p>
<blockquote>
<p><a href="https://docs.docker.com/docker-for-mac/" title="Docker for Mac官方文档" target="_blank" rel="external">参考自Docker for Mac官方文档</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> mac docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/09/29/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
