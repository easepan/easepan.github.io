{"meta":{"title":"渣渣潘的博客","subtitle":"Code is lovely","description":"欢迎来到渣渣的博客","author":"渣渣潘","url":"http://hexo.zhazhapan.com"},"pages":[],"posts":[{"title":"CentOS搭建基于ZIPKIN的数据追踪系统","date":"2017-10-18T03:32:54.000Z","path":"2017/10/18/CentOS搭建基于ZIPKIN的数据追踪系统/","text":"1. 配置 Java 环境 安装 JDK Zipkin 使用 Java81yum install java-1.8.0-openjdk* -y 安装完成后，查看是否安装成功：1java -version 2. 安装 Zipkin 新建目录1mkdir -p /data/release/zipkin &amp;&amp; cd &quot;$_&quot; 下载 Zipkin1wget -O zipkin.jar &apos;https://search.maven.org/remote_content?g=io.zipkin.java&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec&apos; 启动 Zipkin1java -jar zipkin.jar Zipkin 默认监听 9411 端口， 使用浏览器访问 http://yourip:9411 或 http://yourdomain.com:9411 即可看到 Zipkin 自带的图形化界面 3. 配置 MySQL 数据持久化方案 Zipkin 支持的持久化方案很多，如： Cassandra, MySQL, Elasticsearch。本实验使用 MySQL 5.7 作为数据持久化方案。 安装 MySQL 5.7 使用 Ctrl + C 退出上个步骤的 Java 进程并下载 rmp 包1wget http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm 安装 rpm 包1rpm -Uvh mysql57-community-release-el7-9.noarch.rpm 安装 MySQL1yum install mysql-community-server -y 启动 MySQL 服务1systemctl start mysqld.service 设置 MySQL 密码 获取 root 临时密码1grep &apos;temporary password&apos; /var/log/mysqld.log | awk &apos;&#123;print $NF&#125;&apos; 使用上一步的获得的临时密码登入 MySQL1mysql -uroot -p 设置 MySQL 账户 root 密码1ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;Xx$Zipkin2017&apos;; 退出 MySQL, 回到 Bash shell1exit; 初始化 Zipkin 数据库 编写初始化脚本 请在 /data/release/zipkin 目录下创建 zipkin_init.sql，参考下面的内容。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647CREATE TABLE IF NOT EXISTS zipkin_spans ( `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT &apos;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&apos;, `trace_id` BIGINT NOT NULL, `id` BIGINT NOT NULL, `name` VARCHAR(255) NOT NULL, `parent_id` BIGINT, `debug` BIT(1), `start_ts` BIGINT COMMENT &apos;Span.timestamp(): epoch micros used for endTs query and to implement TTL&apos;, `duration` BIGINT COMMENT &apos;Span.duration(): micros used for minDuration and maxDuration query&apos;) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;ALTER TABLE zipkin_spans ADD UNIQUE KEY(`trace_id_high`, `trace_id`, `id`) COMMENT &apos;ignore insert on duplicate&apos;;ALTER TABLE zipkin_spans ADD INDEX(`trace_id_high`, `trace_id`, `id`) COMMENT &apos;for joining with zipkin_annotations&apos;;ALTER TABLE zipkin_spans ADD INDEX(`trace_id_high`, `trace_id`) COMMENT &apos;for getTracesByIds&apos;;ALTER TABLE zipkin_spans ADD INDEX(`name`) COMMENT &apos;for getTraces and getSpanNames&apos;;ALTER TABLE zipkin_spans ADD INDEX(`start_ts`) COMMENT &apos;for getTraces ordering and range&apos;;CREATE TABLE IF NOT EXISTS zipkin_annotations ( `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT &apos;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&apos;, `trace_id` BIGINT NOT NULL COMMENT &apos;coincides with zipkin_spans.trace_id&apos;, `span_id` BIGINT NOT NULL COMMENT &apos;coincides with zipkin_spans.id&apos;, `a_key` VARCHAR(255) NOT NULL COMMENT &apos;BinaryAnnotation.key or Annotation.value if type == -1&apos;, `a_value` BLOB COMMENT &apos;BinaryAnnotation.value(), which must be smaller than 64KB&apos;, `a_type` INT NOT NULL COMMENT &apos;BinaryAnnotation.type() or -1 if Annotation&apos;, `a_timestamp` BIGINT COMMENT &apos;Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp&apos;, `endpoint_ipv4` INT COMMENT &apos;Null when Binary/Annotation.endpoint is null&apos;, `endpoint_ipv6` BINARY(16) COMMENT &apos;Null when Binary/Annotation.endpoint is null, or no IPv6 address&apos;, `endpoint_port` SMALLINT COMMENT &apos;Null when Binary/Annotation.endpoint is null&apos;, `endpoint_service_name` VARCHAR(255) COMMENT &apos;Null when Binary/Annotation.endpoint is null&apos;) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;ALTER TABLE zipkin_annotations ADD UNIQUE KEY(`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT &apos;Ignore insert on duplicate&apos;;ALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`, `span_id`) COMMENT &apos;for joining with zipkin_spans&apos;;ALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`) COMMENT &apos;for getTraces/ByIds&apos;;ALTER TABLE zipkin_annotations ADD INDEX(`endpoint_service_name`) COMMENT &apos;for getTraces and getServiceNames&apos;;ALTER TABLE zipkin_annotations ADD INDEX(`a_type`) COMMENT &apos;for getTraces&apos;;ALTER TABLE zipkin_annotations ADD INDEX(`a_key`) COMMENT &apos;for getTraces&apos;;ALTER TABLE zipkin_annotations ADD INDEX(`trace_id`, `span_id`, `a_key`) COMMENT &apos;for dependencies job&apos;;CREATE TABLE IF NOT EXISTS zipkin_dependencies ( `day` DATE NOT NULL, `parent` VARCHAR(255) NOT NULL, `child` VARCHAR(255) NOT NULL, `call_count` BIGINT) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;ALTER TABLE zipkin_dependencies ADD UNIQUE KEY(`day`, `parent`, `child`); 登录 Mysql1mysql -u root --password=&apos;Xx$Zipkin2017&apos; 创建 Zipkin 数据库1create database zipkin; 切换数据库1use zipkin; 初始化表及索引1source /data/release/zipkin/zipkin_init.sql 执行以下命令会看到zipkin_annotations, zipkin_dependencies, zipkin_spans 三张数据表，说明初始化成功了1show tables; 退出 MySQL, 回到 Bash shell1exit 启动 Zipkin 注： 此处默认使用教程生成的密码123cd /data/release/zipkinSTORAGE_TYPE=mysql MYSQL_HOST=localhost MYSQL_TCP_PORT=3306 MYSQL_DB=zipkin MYSQL_USER=root MYSQL_PASS=&apos;Xx$Zipkin2017&apos; \\nohup java -jar zipkin.jar &amp; 4. 创建具有数据上报能力的Demo 搭建 NodeJS 环境 12curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -yum install nodejs -y 创建Demo目录 创建 /data/release/service_a 目录1mkdir -p /data/release/service_a &amp;&amp; cd &quot;$_&quot; 使用 NPM 安装相关依赖 请在 /data/release/service_a 目录下创建并编辑 package.json，参考下面的内容。 123456789101112131415&#123; &quot;name&quot;: &quot;service_a&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123;&#125;, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;dependencies&quot;: &#123; &quot;express&quot;: &quot;^4.15.3&quot;, &quot;zipkin&quot;: &quot;^0.7.2&quot;, &quot;zipkin-instrumentation-express&quot;: &quot;^0.7.2&quot;, &quot;zipkin-transport-http&quot;: &quot;^0.7.2&quot; &#125;&#125; 安装相关依赖1npm install 创建并编辑 app.js 请在 /data/release/service_a 目录下创建 app.js，参考下面的内容。 12345678910111213141516171819202122232425262728const express = require(&apos;express&apos;);const &#123;Tracer, ExplicitContext, BatchRecorder&#125; = require(&apos;zipkin&apos;);const &#123;HttpLogger&#125; = require(&apos;zipkin-transport-http&apos;);const zipkinMiddleware = require(&apos;zipkin-instrumentation-express&apos;).expressMiddleware;const ctxImpl = new ExplicitContext();const recorder = new BatchRecorder(&#123; logger: new HttpLogger( &#123; endpoint: &apos;http://127.0.0.1:9411/api/v1/spans&apos; &#125;)&#125;);const tracer = new Tracer(&#123;ctxImpl, recorder&#125;);const app = express();app.use(zipkinMiddleware(&#123; tracer, serviceName: &apos;service-a&apos;&#125;));app.use(&apos;/&apos;, (req, res, next) =&gt; &#123; res.send(&apos;hello world&apos;);&#125;);app.listen(3000, () =&gt; &#123; console.log(&apos;service-a listening on port 3000!&apos;)&#125;); 启动服务1node app.js 该服务监听 3000 端口， 使用浏览器访问 http://yourip:3000 或 http://yourdomain.com:3000 后，看到“hello world” 的文本字样说明服务已经正常工作 5. 部署完成","raw":"---\ntitle: CentOS搭建基于ZIPKIN的数据追踪系统\ndate: 2017-10-18 11:32:54\ntags: linux zipkin\ncategories: linux zipkin\n---\n**1. 配置 Java 环境**\n\n*安装 JDK*\n\n`Zipkin` 使用 Java8\n```\nyum install java-1.8.0-openjdk* -y\n```\n安装完成后，查看是否安装成功：\n```\njava -version\n```\n\n**2. 安装 Zipkin**\n\n新建目录\n```\nmkdir -p /data/release/zipkin && cd \"$_\"\n```\n下载 Zipkin\n```\nwget -O zipkin.jar 'https://search.maven.org/remote_content?g=io.zipkin.java&a=zipkin-server&v=LATEST&c=exec'\n```\n启动 Zipkin\n```\njava -jar zipkin.jar\n```\nZipkin 默认监听 9411 端口， 使用浏览器访问 http://yourip:9411 或 http://yourdomain.com:9411 即可看到 Zipkin 自带的图形化界面\n\n**3. 配置 MySQL 数据持久化方案**\n\nZipkin 支持的持久化方案很多，如： Cassandra, MySQL, Elasticsearch。本实验使用 MySQL 5.7 作为数据持久化方案。\n\n*安装 MySQL 5.7*\n\n使用 `Ctrl + C` 退出上个步骤的 Java 进程并下载 rmp 包\n```\nwget http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm\n```\n安装 rpm 包\n```\nrpm -Uvh mysql57-community-release-el7-9.noarch.rpm\n```\n安装 MySQL\n```\nyum install mysql-community-server -y\n```\n启动 MySQL 服务\n```\nsystemctl start mysqld.service\n```\n*设置 MySQL 密码*\n\n获取 `root` 临时密码\n```\ngrep 'temporary password' /var/log/mysqld.log | awk '{print $NF}'\n```\n使用上一步的获得的临时密码登入 MySQL\n```\nmysql -uroot -p\n```\n设置 MySQL 账户 `root` 密码\n```\nALTER USER 'root'@'localhost' IDENTIFIED BY 'Xx$Zipkin2017';\n```\n退出 MySQL, 回到 Bash shell\n```\nexit;\n```\n*初始化 Zipkin 数据库*\n\n编写初始化脚本\n\n请在 `/data/release/zipkin` 目录下创建 `zipkin_init.sql`，参考下面的内容。\n\n```\nCREATE TABLE IF NOT EXISTS zipkin_spans (\n  `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',\n  `trace_id` BIGINT NOT NULL,\n  `id` BIGINT NOT NULL,\n  `name` VARCHAR(255) NOT NULL,\n  `parent_id` BIGINT,\n  `debug` BIT(1),\n  `start_ts` BIGINT COMMENT 'Span.timestamp(): epoch micros used for endTs query and to implement TTL',\n  `duration` BIGINT COMMENT 'Span.duration(): micros used for minDuration and maxDuration query'\n) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;\n\nALTER TABLE zipkin_spans ADD UNIQUE KEY(`trace_id_high`, `trace_id`, `id`) COMMENT 'ignore insert on duplicate';\nALTER TABLE zipkin_spans ADD INDEX(`trace_id_high`, `trace_id`, `id`) COMMENT 'for joining with zipkin_annotations';\nALTER TABLE zipkin_spans ADD INDEX(`trace_id_high`, `trace_id`) COMMENT 'for getTracesByIds';\nALTER TABLE zipkin_spans ADD INDEX(`name`) COMMENT 'for getTraces and getSpanNames';\nALTER TABLE zipkin_spans ADD INDEX(`start_ts`) COMMENT 'for getTraces ordering and range';\n\nCREATE TABLE IF NOT EXISTS zipkin_annotations (\n  `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',\n  `trace_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.trace_id',\n  `span_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.id',\n  `a_key` VARCHAR(255) NOT NULL COMMENT 'BinaryAnnotation.key or Annotation.value if type == -1',\n  `a_value` BLOB COMMENT 'BinaryAnnotation.value(), which must be smaller than 64KB',\n  `a_type` INT NOT NULL COMMENT 'BinaryAnnotation.type() or -1 if Annotation',\n  `a_timestamp` BIGINT COMMENT 'Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp',\n  `endpoint_ipv4` INT COMMENT 'Null when Binary/Annotation.endpoint is null',\n  `endpoint_ipv6` BINARY(16) COMMENT 'Null when Binary/Annotation.endpoint is null, or no IPv6 address',\n  `endpoint_port` SMALLINT COMMENT 'Null when Binary/Annotation.endpoint is null',\n  `endpoint_service_name` VARCHAR(255) COMMENT 'Null when Binary/Annotation.endpoint is null'\n) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;\n\nALTER TABLE zipkin_annotations ADD UNIQUE KEY(`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT 'Ignore insert on duplicate';\nALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`, `span_id`) COMMENT 'for joining with zipkin_spans';\nALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`) COMMENT 'for getTraces/ByIds';\nALTER TABLE zipkin_annotations ADD INDEX(`endpoint_service_name`) COMMENT 'for getTraces and getServiceNames';\nALTER TABLE zipkin_annotations ADD INDEX(`a_type`) COMMENT 'for getTraces';\nALTER TABLE zipkin_annotations ADD INDEX(`a_key`) COMMENT 'for getTraces';\nALTER TABLE zipkin_annotations ADD INDEX(`trace_id`, `span_id`, `a_key`) COMMENT 'for dependencies job';\n\nCREATE TABLE IF NOT EXISTS zipkin_dependencies (\n  `day` DATE NOT NULL,\n  `parent` VARCHAR(255) NOT NULL,\n  `child` VARCHAR(255) NOT NULL,\n  `call_count` BIGINT\n) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;\n\nALTER TABLE zipkin_dependencies ADD UNIQUE KEY(`day`, `parent`, `child`);\n```\n登录 Mysql\n```\nmysql -u root --password='Xx$Zipkin2017'\n```\n创建 Zipkin 数据库\n```\ncreate database zipkin;\n```\n切换数据库\n```\nuse zipkin;\n```\n初始化表及索引\n```\nsource /data/release/zipkin/zipkin_init.sql\n```\n执行以下命令会看到`zipkin_annotations`, `zipkin_dependencies`, `zipkin_spans` 三张数据表，说明初始化成功了\n```\nshow tables;\n```\n退出 MySQL, 回到 Bash shell\n```\nexit\n```\n*启动 Zipkin*\n\n注： 此处默认使用教程生成的密码\n```\ncd /data/release/zipkin\nSTORAGE_TYPE=mysql MYSQL_HOST=localhost MYSQL_TCP_PORT=3306 MYSQL_DB=zipkin MYSQL_USER=root MYSQL_PASS='Xx$Zipkin2017' \\\nnohup java -jar zipkin.jar &\n```\n\n**4. 创建具有数据上报能力的Demo**\n\n搭建 NodeJS 环境\n\n```\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\nyum install nodejs -y\n```\n*创建Demo目录*\n\n创建 `/data/release/service_a` 目录\n```\nmkdir -p /data/release/service_a && cd \"$_\"\n```\n*使用 NPM 安装相关依赖*\n\n请在 `/data/release/service_a` 目录下创建并编辑 `package.json`，参考下面的内容。\n\n```\n{\n  \"name\": \"service_a\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {},\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.15.3\",\n    \"zipkin\": \"^0.7.2\",\n    \"zipkin-instrumentation-express\": \"^0.7.2\",\n    \"zipkin-transport-http\": \"^0.7.2\"\n  }\n}\n```\n安装相关依赖\n```\nnpm install\n```\n*创建并编辑 `app.js`*\n\n请在 `/data/release/service_a` 目录下创建 `app.js`，参考下面的内容。\n\n```\nconst express = require('express');\nconst {Tracer, ExplicitContext, BatchRecorder} = require('zipkin');\nconst {HttpLogger} = require('zipkin-transport-http');\nconst zipkinMiddleware = require('zipkin-instrumentation-express').expressMiddleware;\n\nconst ctxImpl = new ExplicitContext();\nconst recorder = new BatchRecorder({\n    logger: new HttpLogger( {\n        endpoint: 'http://127.0.0.1:9411/api/v1/spans'\n    })\n});\n\nconst tracer = new Tracer({ctxImpl, recorder});\n\nconst app = express();\n\napp.use(zipkinMiddleware({\n  tracer,\n  serviceName: 'service-a'\n}));\n\napp.use('/', (req, res, next) => {\n    res.send('hello world');\n});\n\napp.listen(3000, () => {\n  console.log('service-a listening on port 3000!')\n});\n```\n*启动服务*\n```\nnode app.js\n```\n该服务监听 `3000` 端口， 使用浏览器访问 http://yourip:3000 或 http://yourdomain.com:3000 后，看到“hello world” 的文本字样说明服务已经正常工作\n\n**5. 部署完成**","content":"<p><strong>1. 配置 Java 环境</strong></p>\n<p><em>安装 JDK</em></p>\n<p><code>Zipkin</code> 使用 Java8<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install java-1.8.0-openjdk* -y</div></pre></td></tr></table></figure></p>\n<p>安装完成后，查看是否安装成功：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -version</div></pre></td></tr></table></figure></p>\n<p><strong>2. 安装 Zipkin</strong></p>\n<p>新建目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /data/release/zipkin &amp;&amp; cd &quot;$_&quot;</div></pre></td></tr></table></figure></p>\n<p>下载 Zipkin<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -O zipkin.jar &apos;https://search.maven.org/remote_content?g=io.zipkin.java&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec&apos;</div></pre></td></tr></table></figure></p>\n<p>启动 Zipkin<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -jar zipkin.jar</div></pre></td></tr></table></figure></p>\n<p>Zipkin 默认监听 9411 端口， 使用浏览器访问 <a href=\"http://yourip:9411\" target=\"_blank\" rel=\"external\">http://yourip:9411</a> 或 <a href=\"http://yourdomain.com:9411\" target=\"_blank\" rel=\"external\">http://yourdomain.com:9411</a> 即可看到 Zipkin 自带的图形化界面</p>\n<p><strong>3. 配置 MySQL 数据持久化方案</strong></p>\n<p>Zipkin 支持的持久化方案很多，如： Cassandra, MySQL, Elasticsearch。本实验使用 MySQL 5.7 作为数据持久化方案。</p>\n<p><em>安装 MySQL 5.7</em></p>\n<p>使用 <code>Ctrl + C</code> 退出上个步骤的 Java 进程并下载 rmp 包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</div></pre></td></tr></table></figure></p>\n<p>安装 rpm 包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -Uvh mysql57-community-release-el7-9.noarch.rpm</div></pre></td></tr></table></figure></p>\n<p>安装 MySQL<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install mysql-community-server -y</div></pre></td></tr></table></figure></p>\n<p>启动 MySQL 服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl start mysqld.service</div></pre></td></tr></table></figure></p>\n<p><em>设置 MySQL 密码</em></p>\n<p>获取 <code>root</code> 临时密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">grep &apos;temporary password&apos; /var/log/mysqld.log | awk &apos;&#123;print $NF&#125;&apos;</div></pre></td></tr></table></figure></p>\n<p>使用上一步的获得的临时密码登入 MySQL<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -uroot -p</div></pre></td></tr></table></figure></p>\n<p>设置 MySQL 账户 <code>root</code> 密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;Xx$Zipkin2017&apos;;</div></pre></td></tr></table></figure></p>\n<p>退出 MySQL, 回到 Bash shell<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">exit;</div></pre></td></tr></table></figure></p>\n<p><em>初始化 Zipkin 数据库</em></p>\n<p>编写初始化脚本</p>\n<p>请在 <code>/data/release/zipkin</code> 目录下创建 <code>zipkin_init.sql</code>，参考下面的内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE TABLE IF NOT EXISTS zipkin_spans (</div><div class=\"line\">  `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT &apos;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&apos;,</div><div class=\"line\">  `trace_id` BIGINT NOT NULL,</div><div class=\"line\">  `id` BIGINT NOT NULL,</div><div class=\"line\">  `name` VARCHAR(255) NOT NULL,</div><div class=\"line\">  `parent_id` BIGINT,</div><div class=\"line\">  `debug` BIT(1),</div><div class=\"line\">  `start_ts` BIGINT COMMENT &apos;Span.timestamp(): epoch micros used for endTs query and to implement TTL&apos;,</div><div class=\"line\">  `duration` BIGINT COMMENT &apos;Span.duration(): micros used for minDuration and maxDuration query&apos;</div><div class=\"line\">) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;</div><div class=\"line\"></div><div class=\"line\">ALTER TABLE zipkin_spans ADD UNIQUE KEY(`trace_id_high`, `trace_id`, `id`) COMMENT &apos;ignore insert on duplicate&apos;;</div><div class=\"line\">ALTER TABLE zipkin_spans ADD INDEX(`trace_id_high`, `trace_id`, `id`) COMMENT &apos;for joining with zipkin_annotations&apos;;</div><div class=\"line\">ALTER TABLE zipkin_spans ADD INDEX(`trace_id_high`, `trace_id`) COMMENT &apos;for getTracesByIds&apos;;</div><div class=\"line\">ALTER TABLE zipkin_spans ADD INDEX(`name`) COMMENT &apos;for getTraces and getSpanNames&apos;;</div><div class=\"line\">ALTER TABLE zipkin_spans ADD INDEX(`start_ts`) COMMENT &apos;for getTraces ordering and range&apos;;</div><div class=\"line\"></div><div class=\"line\">CREATE TABLE IF NOT EXISTS zipkin_annotations (</div><div class=\"line\">  `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT &apos;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&apos;,</div><div class=\"line\">  `trace_id` BIGINT NOT NULL COMMENT &apos;coincides with zipkin_spans.trace_id&apos;,</div><div class=\"line\">  `span_id` BIGINT NOT NULL COMMENT &apos;coincides with zipkin_spans.id&apos;,</div><div class=\"line\">  `a_key` VARCHAR(255) NOT NULL COMMENT &apos;BinaryAnnotation.key or Annotation.value if type == -1&apos;,</div><div class=\"line\">  `a_value` BLOB COMMENT &apos;BinaryAnnotation.value(), which must be smaller than 64KB&apos;,</div><div class=\"line\">  `a_type` INT NOT NULL COMMENT &apos;BinaryAnnotation.type() or -1 if Annotation&apos;,</div><div class=\"line\">  `a_timestamp` BIGINT COMMENT &apos;Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp&apos;,</div><div class=\"line\">  `endpoint_ipv4` INT COMMENT &apos;Null when Binary/Annotation.endpoint is null&apos;,</div><div class=\"line\">  `endpoint_ipv6` BINARY(16) COMMENT &apos;Null when Binary/Annotation.endpoint is null, or no IPv6 address&apos;,</div><div class=\"line\">  `endpoint_port` SMALLINT COMMENT &apos;Null when Binary/Annotation.endpoint is null&apos;,</div><div class=\"line\">  `endpoint_service_name` VARCHAR(255) COMMENT &apos;Null when Binary/Annotation.endpoint is null&apos;</div><div class=\"line\">) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;</div><div class=\"line\"></div><div class=\"line\">ALTER TABLE zipkin_annotations ADD UNIQUE KEY(`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT &apos;Ignore insert on duplicate&apos;;</div><div class=\"line\">ALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`, `span_id`) COMMENT &apos;for joining with zipkin_spans&apos;;</div><div class=\"line\">ALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`) COMMENT &apos;for getTraces/ByIds&apos;;</div><div class=\"line\">ALTER TABLE zipkin_annotations ADD INDEX(`endpoint_service_name`) COMMENT &apos;for getTraces and getServiceNames&apos;;</div><div class=\"line\">ALTER TABLE zipkin_annotations ADD INDEX(`a_type`) COMMENT &apos;for getTraces&apos;;</div><div class=\"line\">ALTER TABLE zipkin_annotations ADD INDEX(`a_key`) COMMENT &apos;for getTraces&apos;;</div><div class=\"line\">ALTER TABLE zipkin_annotations ADD INDEX(`trace_id`, `span_id`, `a_key`) COMMENT &apos;for dependencies job&apos;;</div><div class=\"line\"></div><div class=\"line\">CREATE TABLE IF NOT EXISTS zipkin_dependencies (</div><div class=\"line\">  `day` DATE NOT NULL,</div><div class=\"line\">  `parent` VARCHAR(255) NOT NULL,</div><div class=\"line\">  `child` VARCHAR(255) NOT NULL,</div><div class=\"line\">  `call_count` BIGINT</div><div class=\"line\">) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;</div><div class=\"line\"></div><div class=\"line\">ALTER TABLE zipkin_dependencies ADD UNIQUE KEY(`day`, `parent`, `child`);</div></pre></td></tr></table></figure>\n<p>登录 Mysql<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -u root --password=&apos;Xx$Zipkin2017&apos;</div></pre></td></tr></table></figure></p>\n<p>创建 Zipkin 数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">create database zipkin;</div></pre></td></tr></table></figure></p>\n<p>切换数据库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">use zipkin;</div></pre></td></tr></table></figure></p>\n<p>初始化表及索引<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source /data/release/zipkin/zipkin_init.sql</div></pre></td></tr></table></figure></p>\n<p>执行以下命令会看到<code>zipkin_annotations</code>, <code>zipkin_dependencies</code>, <code>zipkin_spans</code> 三张数据表，说明初始化成功了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show tables;</div></pre></td></tr></table></figure></p>\n<p>退出 MySQL, 回到 Bash shell<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">exit</div></pre></td></tr></table></figure></p>\n<p><em>启动 Zipkin</em></p>\n<p>注： 此处默认使用教程生成的密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/release/zipkin</div><div class=\"line\">STORAGE_TYPE=mysql MYSQL_HOST=localhost MYSQL_TCP_PORT=3306 MYSQL_DB=zipkin MYSQL_USER=root MYSQL_PASS=&apos;Xx$Zipkin2017&apos; \\</div><div class=\"line\">nohup java -jar zipkin.jar &amp;</div></pre></td></tr></table></figure></p>\n<p><strong>4. 创建具有数据上报能力的Demo</strong></p>\n<p>搭建 NodeJS 环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -</div><div class=\"line\">yum install nodejs -y</div></pre></td></tr></table></figure>\n<p><em>创建Demo目录</em></p>\n<p>创建 <code>/data/release/service_a</code> 目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /data/release/service_a &amp;&amp; cd &quot;$_&quot;</div></pre></td></tr></table></figure></p>\n<p><em>使用 NPM 安装相关依赖</em></p>\n<p>请在 <code>/data/release/service_a</code> 目录下创建并编辑 <code>package.json</code>，参考下面的内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;name&quot;: &quot;service_a&quot;,</div><div class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class=\"line\">  &quot;description&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</div><div class=\"line\">  &quot;scripts&quot;: &#123;&#125;,</div><div class=\"line\">  &quot;author&quot;: &quot;&quot;,</div><div class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</div><div class=\"line\">  &quot;dependencies&quot;: &#123;</div><div class=\"line\">    &quot;express&quot;: &quot;^4.15.3&quot;,</div><div class=\"line\">    &quot;zipkin&quot;: &quot;^0.7.2&quot;,</div><div class=\"line\">    &quot;zipkin-instrumentation-express&quot;: &quot;^0.7.2&quot;,</div><div class=\"line\">    &quot;zipkin-transport-http&quot;: &quot;^0.7.2&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>安装相关依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure></p>\n<p><em>创建并编辑 <code>app.js</code></em></p>\n<p>请在 <code>/data/release/service_a</code> 目录下创建 <code>app.js</code>，参考下面的内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">const express = require(&apos;express&apos;);</div><div class=\"line\">const &#123;Tracer, ExplicitContext, BatchRecorder&#125; = require(&apos;zipkin&apos;);</div><div class=\"line\">const &#123;HttpLogger&#125; = require(&apos;zipkin-transport-http&apos;);</div><div class=\"line\">const zipkinMiddleware = require(&apos;zipkin-instrumentation-express&apos;).expressMiddleware;</div><div class=\"line\"></div><div class=\"line\">const ctxImpl = new ExplicitContext();</div><div class=\"line\">const recorder = new BatchRecorder(&#123;</div><div class=\"line\">    logger: new HttpLogger( &#123;</div><div class=\"line\">        endpoint: &apos;http://127.0.0.1:9411/api/v1/spans&apos;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">const tracer = new Tracer(&#123;ctxImpl, recorder&#125;);</div><div class=\"line\"></div><div class=\"line\">const app = express();</div><div class=\"line\"></div><div class=\"line\">app.use(zipkinMiddleware(&#123;</div><div class=\"line\">  tracer,</div><div class=\"line\">  serviceName: &apos;service-a&apos;</div><div class=\"line\">&#125;));</div><div class=\"line\"></div><div class=\"line\">app.use(&apos;/&apos;, (req, res, next) =&gt; &#123;</div><div class=\"line\">    res.send(&apos;hello world&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(3000, () =&gt; &#123;</div><div class=\"line\">  console.log(&apos;service-a listening on port 3000!&apos;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><em>启动服务</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node app.js</div></pre></td></tr></table></figure></p>\n<p>该服务监听 <code>3000</code> 端口， 使用浏览器访问 <a href=\"http://yourip:3000\" target=\"_blank\" rel=\"external\">http://yourip:3000</a> 或 <a href=\"http://yourdomain.com:3000\" target=\"_blank\" rel=\"external\">http://yourdomain.com:3000</a> 后，看到“hello world” 的文本字样说明服务已经正常工作</p>\n<p><strong>5. 部署完成</strong></p>\n","updated":"2017-10-18T03:57:47.000Z","comments":true,"link":"","excerpt":"","categories":[{"name":"linux zipkin","slug":"linux-zipkin","permalink":"http://hexo.zhazhapan.com/categories/linux-zipkin/"}],"tags":[{"name":"linux zipkin","slug":"linux-zipkin","permalink":"http://hexo.zhazhapan.com/tags/linux-zipkin/"}]},{"title":"CentOS搭建JavaWeb开发环境","date":"2017-10-18T02:49:36.000Z","path":"2017/10/18/CentOS搭建JavaWeb开发环境/","text":"1. 搭建 Java 开发环境 此教程教大家如何配置 JDK 、Tomcat 和 Mysql 安装 JDK JDK 是开发Java程序必须安装的软件，我们查看一下 yum 源里面的 JDK：1yum list java* 选择适合本机的JDK，并安装：1yum install java-1.7.0-openjdk* -y 安装完成后，查看是否安装成功：1java -version 安装 Tomcat Tomcat 是一个应用服务器，是开发和调试 jsp 程序的首选，可以利用它来响应 HTML 页面的访问请求。 进入本地文件夹1cd /usr/local 到官网找到 Tomcat 的下载链接，并下载到服务器中, 这里提供了一个快速下载 Tomcat 的地址：1wget https://mc.qcloudimg.com/static/archive/fa66329388f85c08e8d6c12ceb8b2ca3/apache-tomcat-7.0.77.tar.gz 解压这个文件夹：1tar -zxf apache-tomcat-7.0.77.tar.gz 重命名这个文件：1mv apache-tomcat-7.0.77 /usr/local/tomcat7 进入 bin 文件夹1cd /usr/local/tomcat7/bin 给这个文件夹下的所有 shell 脚本授予权限： 1chmod 777 *.sh 开启tomcat服务：1./startup.sh 安装 MySQL使用 yum 安装 MySQL：1yum install -y mysql-server mysql mysql-devel 安装完成后，启动 MySQL 服务：1service mysqld restart 设置 MySQL 账户 root 密码：1/usr/bin/mysqladmin -u root password &apos;NC7eKyAv&apos; 2. 访问 Tomcat 访问 Tomcat 此时，访问 http://yourip:8080 或 http://yourdomain.com 可访问到刚才启动的 Tomcat 的内置示例页面","raw":"---\ntitle: CentOS搭建JavaWeb开发环境\ndate: 2017-10-18 10:49:36\ntags: linux java javaweb\n---\n**1. 搭建 Java 开发环境**\n\n此教程教大家如何配置 JDK 、Tomcat 和 Mysql\n\n*安装 JDK*\n\nJDK 是开发Java程序必须安装的软件，我们查看一下 `yum` 源里面的 JDK：\n```\nyum list java*\n```\n选择适合本机的JDK，并安装：\n```\nyum install java-1.7.0-openjdk* -y\n```\n安装完成后，查看是否安装成功：\n```\njava -version\n```\n*安装 Tomcat*\n\nTomcat 是一个应用服务器，是开发和调试 `jsp` 程序的首选，可以利用它来响应 HTML 页面的访问请求。\n\n进入本地文件夹\n```\ncd /usr/local\n```\n到官网找到 Tomcat 的下载链接，并下载到服务器中, 这里提供了一个快速下载 Tomcat 的地址：\n```\nwget https://mc.qcloudimg.com/static/archive/fa66329388f85c08e8d6c12ceb8b2ca3/apache-tomcat-7.0.77.tar.gz\n```\n解压这个文件夹：\n```\ntar -zxf apache-tomcat-7.0.77.tar.gz\n```\n重命名这个文件：\n```\nmv apache-tomcat-7.0.77 /usr/local/tomcat7\n```\n进入 bin 文件夹\n```\ncd /usr/local/tomcat7/bin\n```\n给这个文件夹下的所有 `shell` 脚本授予权限：\n\n```\nchmod 777 *.sh\n```\n开启tomcat服务：\n```\n./startup.sh\n```\n*安装 MySQL*\n使用 `yum` 安装 MySQL：\n```\nyum install -y mysql-server mysql mysql-devel\n```\n安装完成后，启动 MySQL 服务：\n```\nservice mysqld restart\n```\n设置 MySQL 账户 `root` 密码：\n```\n/usr/bin/mysqladmin -u root password 'NC7eKyAv'\n```\n\n**2. 访问 Tomcat**\n\n访问 Tomcat\n\n此时，访问 http://yourip:8080 或 http://yourdomain.com 可访问到刚才启动的 Tomcat 的内置示例页面","content":"<p><strong>1. 搭建 Java 开发环境</strong></p>\n<p>此教程教大家如何配置 JDK 、Tomcat 和 Mysql</p>\n<p><em>安装 JDK</em></p>\n<p>JDK 是开发Java程序必须安装的软件，我们查看一下 <code>yum</code> 源里面的 JDK：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum list java*</div></pre></td></tr></table></figure></p>\n<p>选择适合本机的JDK，并安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install java-1.7.0-openjdk* -y</div></pre></td></tr></table></figure></p>\n<p>安装完成后，查看是否安装成功：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -version</div></pre></td></tr></table></figure></p>\n<p><em>安装 Tomcat</em></p>\n<p>Tomcat 是一个应用服务器，是开发和调试 <code>jsp</code> 程序的首选，可以利用它来响应 HTML 页面的访问请求。</p>\n<p>进入本地文件夹<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local</div></pre></td></tr></table></figure></p>\n<p>到官网找到 Tomcat 的下载链接，并下载到服务器中, 这里提供了一个快速下载 Tomcat 的地址：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://mc.qcloudimg.com/static/archive/fa66329388f85c08e8d6c12ceb8b2ca3/apache-tomcat-7.0.77.tar.gz</div></pre></td></tr></table></figure></p>\n<p>解压这个文件夹：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxf apache-tomcat-7.0.77.tar.gz</div></pre></td></tr></table></figure></p>\n<p>重命名这个文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv apache-tomcat-7.0.77 /usr/local/tomcat7</div></pre></td></tr></table></figure></p>\n<p>进入 bin 文件夹<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/tomcat7/bin</div></pre></td></tr></table></figure></p>\n<p>给这个文件夹下的所有 <code>shell</code> 脚本授予权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 777 *.sh</div></pre></td></tr></table></figure>\n<p>开启tomcat服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./startup.sh</div></pre></td></tr></table></figure></p>\n<p><em>安装 MySQL</em><br>使用 <code>yum</code> 安装 MySQL：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y mysql-server mysql mysql-devel</div></pre></td></tr></table></figure></p>\n<p>安装完成后，启动 MySQL 服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service mysqld restart</div></pre></td></tr></table></figure></p>\n<p>设置 MySQL 账户 <code>root</code> 密码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/mysqladmin -u root password &apos;NC7eKyAv&apos;</div></pre></td></tr></table></figure></p>\n<p><strong>2. 访问 Tomcat</strong></p>\n<p>访问 Tomcat</p>\n<p>此时，访问 <a href=\"http://yourip:8080\" target=\"_blank\" rel=\"external\">http://yourip:8080</a> 或 <a href=\"http://yourdomain.com\" target=\"_blank\" rel=\"external\">http://yourdomain.com</a> 可访问到刚才启动的 Tomcat 的内置示例页面</p>\n","updated":"2017-10-18T03:38:42.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux java javaweb","slug":"linux-java-javaweb","permalink":"http://hexo.zhazhapan.com/tags/linux-java-javaweb/"}]},{"title":"CentOS搭建FireKylin个人博客","date":"2017-10-18T02:30:27.000Z","path":"2017/10/18/CentOS搭建FireKylin个人博客/","text":"1. 运行环境准备 安装 Node.js 使用 yum 命令安装 Node.js1yum install nodejs -y 使用 NPM 安装 PM2 通过 NPM 安装进程管理模块 PM2。它是 Node.js 的一个进程管理模块，之后我们会使用它来管理我们的个人网站进程。1npm install pm2 -g 安装 MySQL 使用 yum 安装 MySQL：123wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpmrpm -ivh mysql-community-release-el7-5.noarch.rpmyum install mysql-community-server -y 启动 MySQL 服务：1service mysqld restart 设置 MySQL 账户 root 密码： 1/usr/bin/mysqladmin -u root password &apos;4aE5aOii4Firekylin&apos; 安装 Nginx 在 CentOS 上，可直接使用 yum 来安装 Nginx1yum install nginx -y 2. 安装并配置 Firekylin 安装 Firekylin 在服务器上下载安装包1wget https://firekylin.org/release/latest.tar.gz 解压安装包1tar zvxf latest.tar.gz 安装程序依赖12cd firekylinnpm install 复制项目下的 pm2_default.json 文件生成新文件 pm2.json1cp pm2_default.json pm2.json 修改 pm2.json 文件中的 cwd 配置值为项目的当前路径 /root/firekylin： 123456789101112131415&#123; &quot;apps&quot;: [&#123; &quot;name&quot;: &quot;firekylin&quot;, &quot;script&quot;: &quot;www/production.js&quot;, &quot;cwd&quot;: &quot;/root/firekylin&quot;, &quot;exec_mode&quot;: &quot;fork&quot;, &quot;max_memory_restart&quot;: &quot;1G&quot;, &quot;autorestart&quot;: true, &quot;node_args&quot;: [], &quot;args&quot;: [], &quot;env&quot;: &#123; &#125; &#125;]&#125; 然后通过以下命令启动项目1pm2 startOrReload pm2.json Firekylin 已经启动成功，使用浏览器直接访问 http://yourip:8360/ 或 http://yourdomain.com:8360即可看到 Firekylin 的配置界面。 配置信息 配置过程输入参数如截图所示，其中数据库信息中的帐号字段设置为 root，密码字段设置为 4aE5aOii4Firekylin，数据库名字段设置为 firekylin，主机字段设置为 127.0.0.1，其他字段使用默认值；后台管理帐号中的帐号字段使用默认值 admin，密码字段设置为 4aE5aOii4Admin： 配置完成后可以通过后台管理帐号设置的帐号和密码登录博客管理后台，其值分别为 admin 和 4aE5aOii4Admin，截图如下所示： 配置 Nginx 下面我们就配置 Nginx 使用域名访问我们的网站了。复制项目下的 nginx_default.conf 为 nginx.conf1cp nginx_default.conf nginx.conf 修改 nginx.conf 文件： 123456789101112131415161718192021222324252627282930313233343536server &#123; listen 80; server_name www.yourdomain.com; #将 www.yourdomain.com 替换为之前注册并解析的域名 root /root/firekylin; set $node_port 8360; index index.js index.html index.htm; location ^~ /.well-known/acme-challenge/ &#123; alias /root/firekylin/ssl/challenges/; try_files $uri = 404; &#125; location / &#123; proxy_http_version 1.1; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_set_header X-NginX-Proxy true; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; proxy_pass http://127.0.0.1:$node_port$request_uri; proxy_redirect off; &#125; location = /development.js &#123; deny all; &#125; location = /testing.js &#123; deny all; &#125; location = /production.js &#123; deny all; &#125;&#125; 将 nginx.conf 文件软链到 nginx 配置目录下1ln -s /root/firekylin/nginx.conf /etc/nginx/conf.d/firekylin.conf 重启 Nginx1service nginx restart 3. 完成","raw":"---\ntitle: CentOS搭建FireKylin个人博客\ndate: 2017-10-18 10:30:27\ntags: linux firekylin\n---\n**1. 运行环境准备**\n\n*安装 Node.js*\n\n使用 `yum` 命令安装 Node.js\n```\nyum install nodejs -y\n```\n*使用 NPM 安装 PM2*\n\n通过 `NPM` 安装进程管理模块 `PM2`。它是 Node.js 的一个进程管理模块，之后我们会使用它来管理我们的个人网站进程。\n```\nnpm install pm2 -g\n```\n*安装 MySQL*\n\n使用 yum 安装 MySQL：\n```\nwget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\nrpm -ivh mysql-community-release-el7-5.noarch.rpm\nyum install mysql-community-server -y\n```\n启动 MySQL 服务：\n```\nservice mysqld restart\n```\n设置 MySQL 账户 `root` 密码：\n\n```\n/usr/bin/mysqladmin -u root password '4aE5aOii4Firekylin'\n```\n*安装 Nginx*\n\n在 CentOS 上，可直接使用 `yum` 来安装 Nginx\n```\nyum install nginx -y\n```\n\n**2. 安装并配置 Firekylin**\n\n*安装 Firekylin*\n\n在服务器上下载安装包\n```\nwget https://firekylin.org/release/latest.tar.gz\n```\n解压安装包\n```\ntar zvxf latest.tar.gz\n```\n安装程序依赖\n```\ncd firekylin\nnpm install\n```\n复制项目下的 `pm2_default.json` 文件生成新文件 `pm2.json`\n```\ncp pm2_default.json pm2.json\n```\n修改 `pm2.json` 文件中的 `cwd` 配置值为项目的当前路径 `/root/firekylin`：\n\n```\n{\n  \"apps\": [{\n    \"name\": \"firekylin\",\n    \"script\": \"www/production.js\",\n    \"cwd\": \"/root/firekylin\",\n    \"exec_mode\": \"fork\",\n    \"max_memory_restart\": \"1G\",\n    \"autorestart\": true,\n    \"node_args\": [],\n    \"args\": [],\n    \"env\": {\n\n    }\n  }]\n}\n```\n然后通过以下命令启动项目\n```\npm2 startOrReload pm2.json\n```\n\nFirekylin 已经启动成功，使用浏览器直接访问 http://yourip:8360/ 或 http://yourdomain.com:8360即可看到 Firekylin 的配置界面。\n\n*配置信息*\n\n配置过程输入参数如截图所示，其中数据库信息中的帐号字段设置为 `root`，密码字段设置为 `4aE5aOii4Firekylin`，数据库名字段设置为 `firekylin`，主机字段设置为 `127.0.0.1`，其他字段使用默认值；后台管理帐号中的帐号字段使用默认值 `admin`，密码字段设置为 `4aE5aOii4Admin`：\n\n![](https://mc.qcloudimg.com/static/img/2b6b8757d891a5c67581f64b0c75cc42/1.png)\n\n配置完成后可以通过后台管理帐号设置的`帐号`和`密码`登录博客管理后台，其值分别为 `admin` 和 `4aE5aOii4Admin`，截图如下所示：\n\n![](https://mc.qcloudimg.com/static/img/d5b5b0b892c165eb6d80e8a699d22657/1.png)\n\n*配置 Nginx*\n\n下面我们就配置 Nginx 使用域名访问我们的网站了。\n复制项目下的 `nginx_default.conf` 为 `nginx.conf`\n```\ncp nginx_default.conf nginx.conf\n```\n修改 `nginx.conf` 文件：\n\n```\nserver {\n    listen 80;\n    server_name www.yourdomain.com; #将 www.yourdomain.com 替换为之前注册并解析的域名\n    root /root/firekylin;\n    set $node_port 8360;\n\n    index index.js index.html index.htm;\n\n    location ^~ /.well-known/acme-challenge/ {\n      alias /root/firekylin/ssl/challenges/;\n      try_files $uri = 404;\n    }\n\n    location / {\n        proxy_http_version 1.1;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-NginX-Proxy true;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_pass http://127.0.0.1:$node_port$request_uri;\n        proxy_redirect off;\n    }\n\n    location = /development.js {\n        deny all;\n    }\n    location = /testing.js {\n        deny all;\n    }\n\n    location = /production.js {\n        deny all;\n    }\n}\n```\n将 `nginx.conf` 文件软链到 `nginx` 配置目录下\n```\nln -s /root/firekylin/nginx.conf /etc/nginx/conf.d/firekylin.conf\n```\n重启 `Nginx`\n```\nservice nginx restart\n```\n\n**3. 完成**","content":"<p><strong>1. 运行环境准备</strong></p>\n<p><em>安装 Node.js</em></p>\n<p>使用 <code>yum</code> 命令安装 Node.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install nodejs -y</div></pre></td></tr></table></figure></p>\n<p><em>使用 NPM 安装 PM2</em></p>\n<p>通过 <code>NPM</code> 安装进程管理模块 <code>PM2</code>。它是 Node.js 的一个进程管理模块，之后我们会使用它来管理我们的个人网站进程。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install pm2 -g</div></pre></td></tr></table></figure></p>\n<p><em>安装 MySQL</em></p>\n<p>使用 yum 安装 MySQL：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</div><div class=\"line\">rpm -ivh mysql-community-release-el7-5.noarch.rpm</div><div class=\"line\">yum install mysql-community-server -y</div></pre></td></tr></table></figure></p>\n<p>启动 MySQL 服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service mysqld restart</div></pre></td></tr></table></figure></p>\n<p>设置 MySQL 账户 <code>root</code> 密码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/mysqladmin -u root password &apos;4aE5aOii4Firekylin&apos;</div></pre></td></tr></table></figure>\n<p><em>安装 Nginx</em></p>\n<p>在 CentOS 上，可直接使用 <code>yum</code> 来安装 Nginx<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install nginx -y</div></pre></td></tr></table></figure></p>\n<p><strong>2. 安装并配置 Firekylin</strong></p>\n<p><em>安装 Firekylin</em></p>\n<p>在服务器上下载安装包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://firekylin.org/release/latest.tar.gz</div></pre></td></tr></table></figure></p>\n<p>解压安装包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar zvxf latest.tar.gz</div></pre></td></tr></table></figure></p>\n<p>安装程序依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd firekylin</div><div class=\"line\">npm install</div></pre></td></tr></table></figure></p>\n<p>复制项目下的 <code>pm2_default.json</code> 文件生成新文件 <code>pm2.json</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp pm2_default.json pm2.json</div></pre></td></tr></table></figure></p>\n<p>修改 <code>pm2.json</code> 文件中的 <code>cwd</code> 配置值为项目的当前路径 <code>/root/firekylin</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;apps&quot;: [&#123;</div><div class=\"line\">    &quot;name&quot;: &quot;firekylin&quot;,</div><div class=\"line\">    &quot;script&quot;: &quot;www/production.js&quot;,</div><div class=\"line\">    &quot;cwd&quot;: &quot;/root/firekylin&quot;,</div><div class=\"line\">    &quot;exec_mode&quot;: &quot;fork&quot;,</div><div class=\"line\">    &quot;max_memory_restart&quot;: &quot;1G&quot;,</div><div class=\"line\">    &quot;autorestart&quot;: true,</div><div class=\"line\">    &quot;node_args&quot;: [],</div><div class=\"line\">    &quot;args&quot;: [],</div><div class=\"line\">    &quot;env&quot;: &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后通过以下命令启动项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm2 startOrReload pm2.json</div></pre></td></tr></table></figure></p>\n<p>Firekylin 已经启动成功，使用浏览器直接访问 <a href=\"http://yourip:8360/\" target=\"_blank\" rel=\"external\">http://yourip:8360/</a> 或 <a href=\"http://yourdomain.com:8360即可看到\" target=\"_blank\" rel=\"external\">http://yourdomain.com:8360即可看到</a> Firekylin 的配置界面。</p>\n<p><em>配置信息</em></p>\n<p>配置过程输入参数如截图所示，其中数据库信息中的帐号字段设置为 <code>root</code>，密码字段设置为 <code>4aE5aOii4Firekylin</code>，数据库名字段设置为 <code>firekylin</code>，主机字段设置为 <code>127.0.0.1</code>，其他字段使用默认值；后台管理帐号中的帐号字段使用默认值 <code>admin</code>，密码字段设置为 <code>4aE5aOii4Admin</code>：</p>\n<p><img src=\"https://mc.qcloudimg.com/static/img/2b6b8757d891a5c67581f64b0c75cc42/1.png\" alt=\"\"></p>\n<p>配置完成后可以通过后台管理帐号设置的<code>帐号</code>和<code>密码</code>登录博客管理后台，其值分别为 <code>admin</code> 和 <code>4aE5aOii4Admin</code>，截图如下所示：</p>\n<p><img src=\"https://mc.qcloudimg.com/static/img/d5b5b0b892c165eb6d80e8a699d22657/1.png\" alt=\"\"></p>\n<p><em>配置 Nginx</em></p>\n<p>下面我们就配置 Nginx 使用域名访问我们的网站了。<br>复制项目下的 <code>nginx_default.conf</code> 为 <code>nginx.conf</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp nginx_default.conf nginx.conf</div></pre></td></tr></table></figure></p>\n<p>修改 <code>nginx.conf</code> 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    server_name www.yourdomain.com; #将 www.yourdomain.com 替换为之前注册并解析的域名</div><div class=\"line\">    root /root/firekylin;</div><div class=\"line\">    set $node_port 8360;</div><div class=\"line\"></div><div class=\"line\">    index index.js index.html index.htm;</div><div class=\"line\"></div><div class=\"line\">    location ^~ /.well-known/acme-challenge/ &#123;</div><div class=\"line\">      alias /root/firekylin/ssl/challenges/;</div><div class=\"line\">      try_files $uri = 404;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\">        proxy_http_version 1.1;</div><div class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</div><div class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\">        proxy_set_header Host $http_host;</div><div class=\"line\">        proxy_set_header X-NginX-Proxy true;</div><div class=\"line\">        proxy_set_header Upgrade $http_upgrade;</div><div class=\"line\">        proxy_set_header Connection &quot;upgrade&quot;;</div><div class=\"line\">        proxy_pass http://127.0.0.1:$node_port$request_uri;</div><div class=\"line\">        proxy_redirect off;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location = /development.js &#123;</div><div class=\"line\">        deny all;</div><div class=\"line\">    &#125;</div><div class=\"line\">    location = /testing.js &#123;</div><div class=\"line\">        deny all;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location = /production.js &#123;</div><div class=\"line\">        deny all;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>将 <code>nginx.conf</code> 文件软链到 <code>nginx</code> 配置目录下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln -s /root/firekylin/nginx.conf /etc/nginx/conf.d/firekylin.conf</div></pre></td></tr></table></figure></p>\n<p>重启 <code>Nginx</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx restart</div></pre></td></tr></table></figure></p>\n<p><strong>3. 完成</strong></p>\n","updated":"2017-10-18T03:38:28.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux firekylin","slug":"linux-firekylin","permalink":"http://hexo.zhazhapan.com/tags/linux-firekylin/"}]},{"title":"CentOS搭建PySpider爬虫服务","date":"2017-10-18T01:01:24.000Z","path":"2017/10/18/CentOS搭建PySpider爬虫服务/","text":"1. 环境准备 前置环境部署 在开始部署前，我们需要做一些前置准备 。 yum 更新1yum update -y 安装开发编译工具1yum install gcc gcc-c++ -y 安装依赖库1yum install python-pip python-devel python-distribute libxml2 libxml2-devel python-lxml libxslt libxslt-devel openssl openssl-devel -y 升级pip1pip install --upgrade pip 2. 部署 mariadb 由于 CentOS 7 中 MySQL 数据库已从默认的程序列表中移除，我们使用 mariadb 代替。 安装 mariadb1yum install mariadb-server mariadb -y 启动 mariadb 服务1systemctl start mariadb 设置 root 密码 默认的root用户密码为空，你可以使用以下命令来创建 root 用户的密码（password 后的 uI7AAS5q 可以改为任何你希望设置的密码）：1mysqladmin -u root password &quot;uI7AAS5q&quot; 检查是否安装成功 现在你可以尝试通过以下命令来连接到 Mysql 服务器1mysql -u root -p 然后输入您刚才设置的密码 （ 默认：uI7AAS5q ），如果一切正常，您应该可以在命令行看到以 MariaDB [(none)]&gt; 或 mysql&gt; 开头的提示了，说明连接成功。 此时输入 SHOW DATABASES; 并回车，应该可以看到类似下面这样的输出，说明一切正常。12345678mysql&gt; SHOW DATABASES;+----------+| Database |+----------+| mysql || test |+----------+2 rows in set (0.13 sec) 完成后，可以通过快捷键 Ctrl+C 或命令行键入 exit 来退出，进入下一步。 3. 部署 redis 下载、解压安装包 下载安装包1wget http://download.redis.io/redis-stable.tar.gz 解压安装包1tar -xzvf redis-stable.tar.gz 移动解压包到 /usr/local 内 1mv redis-stable /usr/local/redis 编译安装123cd /usr/local/redismakemake install 设置 redis 配置 设置配置文件路径12mkdir -p /etc/rediscp /usr/local/redis/redis.conf /etc/redis/redis.conf 修改 /etc/redis/redis.conf 文件的 daemonize 配置项为如下：1daemonize yes 启动 redis 服务1/usr/local/bin/redis-server /etc/redis/redis.conf 4. 部署 pyspider 安装依赖123pip install --upgrade chardeteasy_install mysql-connector==2.1.3easy_install redis 安装 pyspider1pip install pyspider 配置 pyspider 首先创建配置目录1mkdir /etc/pyspider 然后 /etc/pyspider 目录下创建 pyspider.conf.json，参考下面的内容。 具体配置的说明文档请参考 官方文档 1234567891011&#123; &quot;taskdb&quot;: &quot;mysql+taskdb://root:uI7AAS5q@127.0.0.1:3306/taskdb&quot;, &quot;projectdb&quot;: &quot;mysql+projectdb://root:uI7AAS5q@127.0.0.1:3306/projectdb&quot;, &quot;resultdb&quot;: &quot;mysql+resultdb://root:uI7AAS5q@127.0.0.1:3306/resultdb&quot;, &quot;message_queue&quot;: &quot;redis://127.0.0.1:6379/db&quot;, &quot;webui&quot;: &#123; &quot;username&quot;: &quot;root&quot;, &quot;password&quot;: &quot;uI7AAS5q&quot;, &quot;need-auth&quot;: true &#125;&#125; 其中 mysql 配置中的 root 为您 mysql 的用户名， root: 后面的 uI7AAS5q 为您刚设置的密码。 webui 配置中的 username 及 password 为您访问 WebUI 时候需要的用户名，你也可以不设置用户名密码，直接将 need-auth 设为 false 即可。 启动服务1pyspider -c /etc/pyspider/pyspider.conf.json 如果一切正常，现在访问 http://yourip:5000 或 http://yourdomain.com:5000，您应该可以看到 pyspider dashboard 的首页了。 服务能够正常启动后，我们需要让它能够在后台运行，您可以通过以下命令让服务在后台运行1nohup pyspider -c /etc/pyspider/pyspider.conf.json &amp; 也可以使用官方推荐的 Supervisor 来启动，这里就不详细介绍了，具体用法可以参考 Supervisor 的文档 *5 部署完成","raw":"---\ntitle: CentOS搭建PySpider爬虫服务\ndate: 2017-10-18 09:01:24\ntags: linux pyspider\n---\n**1. 环境准备**\n\n*前置环境部署*\n\n在开始部署前，我们需要做一些前置准备 。\n\n`yum` 更新 \n```\nyum update -y\n```\n安装开发编译工具\n```\nyum install gcc gcc-c++ -y\n```\n安装依赖库\n```\nyum install python-pip python-devel python-distribute libxml2 libxml2-devel python-lxml libxslt libxslt-devel openssl openssl-devel -y\n```\n升级pip\n```\npip install --upgrade pip\n```\n\n**2. 部署 mariadb**\n\n由于 CentOS 7 中 MySQL 数据库已从默认的程序列表中移除，我们使用 mariadb 代替。\n\n*安装 `mariadb`*\n```\nyum install mariadb-server mariadb -y\n```\n*启动 `mariadb` 服务*\n```\nsystemctl start mariadb\n```\n*设置 root 密码*\n\n默认的root用户密码为空，你可以使用以下命令来创建 root 用户的密码（password 后的 `uI7AAS5q` 可以改为任何你希望设置的密码）：\n```\nmysqladmin -u root password \"uI7AAS5q\"\n```\n*检查是否安装成功*\n\n现在你可以尝试通过以下命令来连接到 Mysql 服务器 \n```\nmysql -u root -p\n```\n然后输入您刚才设置的密码 （ 默认：`uI7AAS5q` ），如果一切正常，您应该可以在命令行看到以 `MariaDB [(none)]>` 或 `mysql>` 开头的提示了，说明连接成功。\n\n此时输入 `SHOW DATABASES;` 并回车，应该可以看到类似下面这样的输出，说明一切正常。\n```\nmysql> SHOW DATABASES;\n+----------+\n| Database |\n+----------+\n| mysql    |\n| test     |\n+----------+\n2 rows in set (0.13 sec)\n```\n完成后，可以通过快捷键 `Ctrl+C` 或命令行键入 `exit` 来退出，进入下一步。\n\n**3. 部署 redis**\n\n*下载、解压安装包*\n\n下载安装包\n```\nwget http://download.redis.io/redis-stable.tar.gz\n```\n解压安装包\n```\ntar -xzvf redis-stable.tar.gz\n```\n移动解压包到 `/usr/local` 内\n\n```\nmv redis-stable /usr/local/redis\n```\n编译安装\n```\ncd /usr/local/redis\nmake\nmake install\n```\n*设置 redis 配置*\n\n设置配置文件路径\n```\nmkdir -p /etc/redis\ncp /usr/local/redis/redis.conf /etc/redis/redis.conf\n```\n修改 `/etc/redis/redis.conf` 文件的 `daemonize` 配置项为如下：\n```\ndaemonize yes\n```\n*启动 redis 服务*\n```\n/usr/local/bin/redis-server /etc/redis/redis.conf\n```\n\n**4. 部署 pyspider**\n\n*安装依赖*\n```\npip install --upgrade chardet\neasy_install mysql-connector==2.1.3\neasy_install redis\n```\n*安装 `pyspider`*\n```\npip install pyspider\n```\n*配置 pyspider*\n\n首先创建配置目录\n```\nmkdir /etc/pyspider\n```\n然后 `/etc/pyspider` 目录下创建 `pyspider.conf.json`，参考下面的内容。\n\n具体配置的说明文档请参考 [官方文档](http://docs.pyspider.org/en/latest/Deployment/#configjson)\n\n```\n{\n  \"taskdb\": \"mysql+taskdb://root:uI7AAS5q@127.0.0.1:3306/taskdb\",\n  \"projectdb\": \"mysql+projectdb://root:uI7AAS5q@127.0.0.1:3306/projectdb\",\n  \"resultdb\": \"mysql+resultdb://root:uI7AAS5q@127.0.0.1:3306/resultdb\",\n  \"message_queue\": \"redis://127.0.0.1:6379/db\",\n  \"webui\": {\n    \"username\": \"root\",\n    \"password\": \"uI7AAS5q\",\n    \"need-auth\": true\n  }\n}\n```\n其中 mysql 配置中的 `root` 为您 mysql 的用户名， `root:` 后面的 `uI7AAS5q` 为您刚设置的密码。\n\n`webui` 配置中的 `username` 及 `password` 为您访问 WebUI 时候需要的用户名，你也可以不设置用户名密码，直接将 `need-auth` 设为 `false` 即可。\n\n*启动服务*\n```\npyspider -c /etc/pyspider/pyspider.conf.json\n```\n如果一切正常，现在访问 http://yourip:5000 或 http://yourdomain.com:5000，您应该可以看到 `pyspider dashboard` 的首页了。\n\n服务能够正常启动后，我们需要让它能够在后台运行，您可以通过以下命令让服务在后台运行\n```\nnohup pyspider -c /etc/pyspider/pyspider.conf.json &\n```\n也可以使用官方推荐的 [Supervisor](http://supervisord.org/) 来启动，这里就不详细介绍了，具体用法可以参考 Supervisor 的文档\n\n**5 部署完成*","content":"<p><strong>1. 环境准备</strong></p>\n<p><em>前置环境部署</em></p>\n<p>在开始部署前，我们需要做一些前置准备 。</p>\n<p><code>yum</code> 更新<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum update -y</div></pre></td></tr></table></figure></p>\n<p>安装开发编译工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install gcc gcc-c++ -y</div></pre></td></tr></table></figure></p>\n<p>安装依赖库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install python-pip python-devel python-distribute libxml2 libxml2-devel python-lxml libxslt libxslt-devel openssl openssl-devel -y</div></pre></td></tr></table></figure></p>\n<p>升级pip<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install --upgrade pip</div></pre></td></tr></table></figure></p>\n<p><strong>2. 部署 mariadb</strong></p>\n<p>由于 CentOS 7 中 MySQL 数据库已从默认的程序列表中移除，我们使用 mariadb 代替。</p>\n<p><em>安装 <code>mariadb</code></em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install mariadb-server mariadb -y</div></pre></td></tr></table></figure></p>\n<p><em>启动 <code>mariadb</code> 服务</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl start mariadb</div></pre></td></tr></table></figure></p>\n<p><em>设置 root 密码</em></p>\n<p>默认的root用户密码为空，你可以使用以下命令来创建 root 用户的密码（password 后的 <code>uI7AAS5q</code> 可以改为任何你希望设置的密码）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysqladmin -u root password &quot;uI7AAS5q&quot;</div></pre></td></tr></table></figure></p>\n<p><em>检查是否安装成功</em></p>\n<p>现在你可以尝试通过以下命令来连接到 Mysql 服务器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -u root -p</div></pre></td></tr></table></figure></p>\n<p>然后输入您刚才设置的密码 （ 默认：<code>uI7AAS5q</code> ），如果一切正常，您应该可以在命令行看到以 <code>MariaDB [(none)]&gt;</code> 或 <code>mysql&gt;</code> 开头的提示了，说明连接成功。</p>\n<p>此时输入 <code>SHOW DATABASES;</code> 并回车，应该可以看到类似下面这样的输出，说明一切正常。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; SHOW DATABASES;</div><div class=\"line\">+----------+</div><div class=\"line\">| Database |</div><div class=\"line\">+----------+</div><div class=\"line\">| mysql    |</div><div class=\"line\">| test     |</div><div class=\"line\">+----------+</div><div class=\"line\">2 rows in set (0.13 sec)</div></pre></td></tr></table></figure></p>\n<p>完成后，可以通过快捷键 <code>Ctrl+C</code> 或命令行键入 <code>exit</code> 来退出，进入下一步。</p>\n<p><strong>3. 部署 redis</strong></p>\n<p><em>下载、解压安装包</em></p>\n<p>下载安装包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://download.redis.io/redis-stable.tar.gz</div></pre></td></tr></table></figure></p>\n<p>解压安装包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -xzvf redis-stable.tar.gz</div></pre></td></tr></table></figure></p>\n<p>移动解压包到 <code>/usr/local</code> 内</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv redis-stable /usr/local/redis</div></pre></td></tr></table></figure>\n<p>编译安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/redis</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure></p>\n<p><em>设置 redis 配置</em></p>\n<p>设置配置文件路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /etc/redis</div><div class=\"line\">cp /usr/local/redis/redis.conf /etc/redis/redis.conf</div></pre></td></tr></table></figure></p>\n<p>修改 <code>/etc/redis/redis.conf</code> 文件的 <code>daemonize</code> 配置项为如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">daemonize yes</div></pre></td></tr></table></figure></p>\n<p><em>启动 redis 服务</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/bin/redis-server /etc/redis/redis.conf</div></pre></td></tr></table></figure></p>\n<p><strong>4. 部署 pyspider</strong></p>\n<p><em>安装依赖</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install --upgrade chardet</div><div class=\"line\">easy_install mysql-connector==2.1.3</div><div class=\"line\">easy_install redis</div></pre></td></tr></table></figure></p>\n<p><em>安装 <code>pyspider</code></em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install pyspider</div></pre></td></tr></table></figure></p>\n<p><em>配置 pyspider</em></p>\n<p>首先创建配置目录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir /etc/pyspider</div></pre></td></tr></table></figure></p>\n<p>然后 <code>/etc/pyspider</code> 目录下创建 <code>pyspider.conf.json</code>，参考下面的内容。</p>\n<p>具体配置的说明文档请参考 <a href=\"http://docs.pyspider.org/en/latest/Deployment/#configjson\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;taskdb&quot;: &quot;mysql+taskdb://root:uI7AAS5q@127.0.0.1:3306/taskdb&quot;,</div><div class=\"line\">  &quot;projectdb&quot;: &quot;mysql+projectdb://root:uI7AAS5q@127.0.0.1:3306/projectdb&quot;,</div><div class=\"line\">  &quot;resultdb&quot;: &quot;mysql+resultdb://root:uI7AAS5q@127.0.0.1:3306/resultdb&quot;,</div><div class=\"line\">  &quot;message_queue&quot;: &quot;redis://127.0.0.1:6379/db&quot;,</div><div class=\"line\">  &quot;webui&quot;: &#123;</div><div class=\"line\">    &quot;username&quot;: &quot;root&quot;,</div><div class=\"line\">    &quot;password&quot;: &quot;uI7AAS5q&quot;,</div><div class=\"line\">    &quot;need-auth&quot;: true</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中 mysql 配置中的 <code>root</code> 为您 mysql 的用户名， <code>root:</code> 后面的 <code>uI7AAS5q</code> 为您刚设置的密码。</p>\n<p><code>webui</code> 配置中的 <code>username</code> 及 <code>password</code> 为您访问 WebUI 时候需要的用户名，你也可以不设置用户名密码，直接将 <code>need-auth</code> 设为 <code>false</code> 即可。</p>\n<p><em>启动服务</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pyspider -c /etc/pyspider/pyspider.conf.json</div></pre></td></tr></table></figure></p>\n<p>如果一切正常，现在访问 <a href=\"http://yourip:5000\" target=\"_blank\" rel=\"external\">http://yourip:5000</a> 或 <a href=\"http://yourdomain.com:5000，您应该可以看到\" target=\"_blank\" rel=\"external\">http://yourdomain.com:5000，您应该可以看到</a> <code>pyspider dashboard</code> 的首页了。</p>\n<p>服务能够正常启动后，我们需要让它能够在后台运行，您可以通过以下命令让服务在后台运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup pyspider -c /etc/pyspider/pyspider.conf.json &amp;</div></pre></td></tr></table></figure></p>\n<p>也可以使用官方推荐的 <a href=\"http://supervisord.org/\" target=\"_blank\" rel=\"external\">Supervisor</a> 来启动，这里就不详细介绍了，具体用法可以参考 Supervisor 的文档</p>\n<p><em>*5 部署完成</em></p>\n","updated":"2017-10-18T03:39:32.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux pyspider","slug":"linux-pyspider","permalink":"http://hexo.zhazhapan.com/tags/linux-pyspider/"}]},{"title":"CentOS搭建ShowDoc文档工具","date":"2017-10-17T16:00:18.000Z","path":"2017/10/18/CentOS搭建ShowDoc文档工具/","text":"1. 准备 Nginx + PHP 环境 安装 Nginx 使用 yum 安装 Nginx：1yum install nginx 修改 /etc/nginx/nginx.conf 文件为如下内容：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;include /usr/share/nginx/modules/*.conf;events &#123; worker_connections 1024;&#125;http &#123; log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; include /etc/nginx/conf.d/*.conf; server &#123; listen 80; server_name 127.0.0.1; root /var/www/html; index index.php index.html error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; location ~ .php$ &#123; root /var/www/html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; location ~ /.ht &#123; deny all; &#125; &#125;&#125; 启动 Nginx 并设置为开机启动：12service nginx startchkconfig nginx on 安装 PHP 使用 yum 安装 php-fpm：1yum install php php-gd php-fpm php-mcrypt php-mbstring php-mysql php-pdo 启动 php-fpm 并设置为开机启动：12service php-fpm startchkconfig php-fpm on 2. 创建项目 下载安装 Composer Composer 是 PHP 的一个依赖管理工具，推荐使用 Composer 创建 ShowDoc 项目。 执行如下命令安装 Composer：12curl -sS https://getcomposer.org/installer | phpmv composer.phar /usr/local/bin/composer 设置 Composer 使用国内镜像 执行命令设置 Composer 使用国内镜像：1composer config -g repo.packagist composer https://packagist.phpcomposer.com 使用 Composer 创建项目 执行命令创建项目：1cd /var/www/html/ &amp;&amp; composer create-project showdoc/showdoc 设置 showdoc 目录写权限 执行命令赋予 showdoc 下部分目录的写权限12345678chmod a+w showdoc/installchmod a+w showdoc/Sqlitechmod a+w showdoc/Sqlite/showdoc.db.phpchmod a+w showdoc/Public/Uploads/chmod a+w showdoc/Application/Runtimechmod a+w showdoc/server/Application/Runtimechmod a+w showdoc/Application/Common/Conf/config.phpchmod a+w showdoc/Application/Home/Conf/config.php 创建完毕，您现在可以通过浏览器访问 http://yourip/showdoc/install/ 或 http://yourdomain.com/showdoc/install/ ，进行语言的选择以后即可通过 http://yourip/showdoc 或 http://yourdomain/showdoc 查看站点效果。","raw":"---\ntitle: CentOS搭建ShowDoc文档工具\ndate: 2017-10-18 00:00:18\ntags: linux showdoc\n---\n**1. 准备 `Nginx` + `PHP` 环境**\n\n*安装 Nginx*\n\n使用 `yum` 安装 `Nginx`：\n```\nyum install nginx\n```\n修改 `/etc/nginx/nginx.conf` 文件为如下内容：\n```\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n    include /etc/nginx/conf.d/*.conf;\n\n    server {\n        listen       80;\n        server_name  127.0.0.1;\n        root         /var/www/html;\n        index index.php index.html\n        error_page  404              /404.html;\n        location = /40x.html {\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n        }\n        location ~ .php$ {\n            root           /var/www/html;\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n        location ~ /.ht {\n            deny  all;\n        }\n    }\n}\n```\n启动 Nginx 并设置为开机启动：\n```\nservice nginx start\nchkconfig nginx on\n```\n\n*安装 PHP*\n\n使用 `yum` 安装 `php-fpm`：\n```\nyum install php php-gd php-fpm php-mcrypt php-mbstring php-mysql php-pdo\n```\n启动 `php-fpm` 并设置为开机启动：\n```\nservice php-fpm start\nchkconfig php-fpm on\n```\n\n**2. 创建项目**\n\n*下载安装 Composer*\n\n`Composer` 是 PHP 的一个依赖管理工具，推荐使用 Composer 创建 ShowDoc 项目。\n\n执行如下命令安装 `Composer`：\n```\ncurl -sS https://getcomposer.org/installer | php\nmv composer.phar /usr/local/bin/composer\n```\n\n*设置 Composer 使用国内镜像*\n\n执行命令设置 `Composer` 使用国内镜像：\n```\ncomposer config -g repo.packagist composer https://packagist.phpcomposer.com\n```\n\n*使用 Composer 创建项目*\n\n执行命令创建项目：\n```\ncd /var/www/html/ && composer create-project  showdoc/showdoc\n```\n\n*设置 showdoc 目录写权限*\n\n执行命令赋予 `showdoc` 下部分目录的写权限\n```\nchmod a+w showdoc/install\nchmod a+w showdoc/Sqlite\nchmod a+w showdoc/Sqlite/showdoc.db.php\nchmod a+w showdoc/Public/Uploads/\nchmod a+w showdoc/Application/Runtime\nchmod a+w showdoc/server/Application/Runtime\nchmod a+w showdoc/Application/Common/Conf/config.php\nchmod a+w showdoc/Application/Home/Conf/config.php\n```\n创建完毕，您现在可以通过浏览器访问 http://yourip/showdoc/install/ 或 http://yourdomain.com/showdoc/install/ ，进行语言的选择以后即可通过 http://yourip/showdoc 或 http://yourdomain/showdoc 查看站点效果。","content":"<p><strong>1. 准备 <code>Nginx</code> + <code>PHP</code> 环境</strong></p>\n<p><em>安装 Nginx</em></p>\n<p>使用 <code>yum</code> 安装 <code>Nginx</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install nginx</div></pre></td></tr></table></figure></p>\n<p>修改 <code>/etc/nginx/nginx.conf</code> 文件为如下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">user nginx;</div><div class=\"line\">worker_processes auto;</div><div class=\"line\">error_log /var/log/nginx/error.log;</div><div class=\"line\">pid /run/nginx.pid;</div><div class=\"line\"></div><div class=\"line\">include /usr/share/nginx/modules/*.conf;</div><div class=\"line\"></div><div class=\"line\">events &#123;</div><div class=\"line\">    worker_connections 1024;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">http &#123;</div><div class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class=\"line\"></div><div class=\"line\">    access_log  /var/log/nginx/access.log  main;</div><div class=\"line\"></div><div class=\"line\">    sendfile            on;</div><div class=\"line\">    tcp_nopush          on;</div><div class=\"line\">    tcp_nodelay         on;</div><div class=\"line\">    keepalive_timeout   65;</div><div class=\"line\">    types_hash_max_size 2048;</div><div class=\"line\"></div><div class=\"line\">    include             /etc/nginx/mime.types;</div><div class=\"line\">    default_type        application/octet-stream;</div><div class=\"line\">    include /etc/nginx/conf.d/*.conf;</div><div class=\"line\"></div><div class=\"line\">    server &#123;</div><div class=\"line\">        listen       80;</div><div class=\"line\">        server_name  127.0.0.1;</div><div class=\"line\">        root         /var/www/html;</div><div class=\"line\">        index index.php index.html</div><div class=\"line\">        error_page  404              /404.html;</div><div class=\"line\">        location = /40x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">        error_page   500 502 503 504  /50x.html;</div><div class=\"line\">        location = /50x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">        location ~ .php$ &#123;</div><div class=\"line\">            root           /var/www/html;</div><div class=\"line\">            fastcgi_pass   127.0.0.1:9000;</div><div class=\"line\">            fastcgi_index  index.php;</div><div class=\"line\">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class=\"line\">            include        fastcgi_params;</div><div class=\"line\">        &#125;</div><div class=\"line\">        location ~ /.ht &#123;</div><div class=\"line\">            deny  all;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>启动 Nginx 并设置为开机启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx start</div><div class=\"line\">chkconfig nginx on</div></pre></td></tr></table></figure></p>\n<p><em>安装 PHP</em></p>\n<p>使用 <code>yum</code> 安装 <code>php-fpm</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install php php-gd php-fpm php-mcrypt php-mbstring php-mysql php-pdo</div></pre></td></tr></table></figure></p>\n<p>启动 <code>php-fpm</code> 并设置为开机启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">service php-fpm start</div><div class=\"line\">chkconfig php-fpm on</div></pre></td></tr></table></figure></p>\n<p><strong>2. 创建项目</strong></p>\n<p><em>下载安装 Composer</em></p>\n<p><code>Composer</code> 是 PHP 的一个依赖管理工具，推荐使用 Composer 创建 ShowDoc 项目。</p>\n<p>执行如下命令安装 <code>Composer</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -sS https://getcomposer.org/installer | php</div><div class=\"line\">mv composer.phar /usr/local/bin/composer</div></pre></td></tr></table></figure></p>\n<p><em>设置 Composer 使用国内镜像</em></p>\n<p>执行命令设置 <code>Composer</code> 使用国内镜像：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure></p>\n<p><em>使用 Composer 创建项目</em></p>\n<p>执行命令创建项目：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /var/www/html/ &amp;&amp; composer create-project  showdoc/showdoc</div></pre></td></tr></table></figure></p>\n<p><em>设置 showdoc 目录写权限</em></p>\n<p>执行命令赋予 <code>showdoc</code> 下部分目录的写权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod a+w showdoc/install</div><div class=\"line\">chmod a+w showdoc/Sqlite</div><div class=\"line\">chmod a+w showdoc/Sqlite/showdoc.db.php</div><div class=\"line\">chmod a+w showdoc/Public/Uploads/</div><div class=\"line\">chmod a+w showdoc/Application/Runtime</div><div class=\"line\">chmod a+w showdoc/server/Application/Runtime</div><div class=\"line\">chmod a+w showdoc/Application/Common/Conf/config.php</div><div class=\"line\">chmod a+w showdoc/Application/Home/Conf/config.php</div></pre></td></tr></table></figure></p>\n<p>创建完毕，您现在可以通过浏览器访问 <a href=\"http://yourip/showdoc/install/\" target=\"_blank\" rel=\"external\">http://yourip/showdoc/install/</a> 或 <a href=\"http://yourdomain.com/showdoc/install/\" target=\"_blank\" rel=\"external\">http://yourdomain.com/showdoc/install/</a> ，进行语言的选择以后即可通过 <a href=\"http://yourip/showdoc\" target=\"_blank\" rel=\"external\">http://yourip/showdoc</a> 或 <a href=\"http://yourdomain/showdoc\" target=\"_blank\" rel=\"external\">http://yourdomain/showdoc</a> 查看站点效果。</p>\n","updated":"2017-10-18T03:39:43.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux showdoc","slug":"linux-showdoc","permalink":"http://hexo.zhazhapan.com/tags/linux-showdoc/"}]},{"title":"CentOS搭建LNMP环境","date":"2017-10-17T15:48:48.000Z","path":"2017/10/17/CentOS搭建LNMP环境/","text":"1. 搭建 Nginx 静态服务器 安装 Nginx 使用 yum 安装 Nginx：1yum install nginx -y 修改 /etc/nginx/conf.d/default.conf，去除对 IPv6 地址的监听，可参考下面的代码示例： 123456789101112131415161718192021server &#123; listen 80 default_server; # listen [::]:80 default_server; server_name _; root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125;&#125; 修改完成后，启动 Nginx：1nginx 此时，可访问实验机器外网 HTTP 服务（http://yourip 或 http://yourdomain.com）来确认是否已经安装成功。 将 Nginx 设置为开机自动启动：1chkconfig nginx on 2. 安装 MySQL 数据库服务 安装 MySQL 使用 yum 安装 MySQL：1yum install mysql-server -y 安装完成后，启动 MySQL 服务：1service mysqld restart 设置 MySQL 账户 root 密码：1/usr/bin/mysqladmin -u root password &apos;WyIGmACk&apos; 将 MySQL 设置为开机自动启动：1chkconfig mysqld on 3. 搭建 PHP 环境 安装 PHP 使用 yum 安装 PHP：1yum install php php-fpm php-mysql -y 安装之后，启动 PHP-FPM 进程：1service php-fpm start 启动之后，可以使用下面的命令查看 PHP-FPM 进程监听哪个端口1netstat -nlpt | grep php-fpm 把 PHP-FPM 也设置成开机自动启动：1chkconfig php-fpm on 4. 配置 Nginx 并运行 PHP 程序 配置 Nginx 在 /etc/nginx/conf.d 目录中新建一个名为 php.conf 的文件，并配置 Nginx 端口 ，配置示例如下： 1234567891011server &#123; listen 8000; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 location ~ .php$ &#123; root /usr/share/php; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125;&#125; 修改配置完成后，重启 nginx 服务1service nginx restart 这时候，我们就可以在/usr/share/php 目录下新建一个 info.php 文件来检查 php 是否安装成功了，文件内容参考如下：1&lt;?php phpinfo(); ?&gt; 此时，访问 http://yourip:8000/info.php 或 http://yourdomain.com:8000/info.php 可浏览到我们刚刚创建的 info.php 页面了","raw":"---\ntitle: CentOS搭建LNMP环境\ndate: 2017-10-17 23:48:48\ntags: linux nginx mysql php\n---\n**1. 搭建 Nginx 静态服务器**\n\n*安装 Nginx*\n\n使用 `yum` 安装 Nginx：\n```\nyum install nginx -y\n```\n修改 `/etc/nginx/conf.d/default.conf`，去除对 IPv6 地址的监听，可参考下面的代码示例：\n\n```\nserver {\n    listen       80 default_server;\n    # listen       [::]:80 default_server;\n    server_name  _;\n    root         /usr/share/nginx/html;\n\n    # Load configuration files for the default server block.\n    include /etc/nginx/default.d/*.conf;\n\n    location / {\n    }\n\n    error_page 404 /404.html;\n        location = /40x.html {\n    }\n\n    error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n    }\n\n}\n```\n修改完成后，启动 `Nginx`：\n```\nnginx\n```\n此时，可访问实验机器外网 HTTP 服务（http://yourip 或 http://yourdomain.com）来确认是否已经安装成功。\n\n将 Nginx 设置为开机自动启动：\n```\nchkconfig nginx on\n```\n\n**2. 安装 MySQL 数据库服务**\n\n*安装 MySQL*\n\n使用 `yum` 安装 MySQL：\n```\nyum install mysql-server -y\n```\n安装完成后，启动 MySQL 服务：\n```\nservice mysqld restart\n```\n设置 MySQL 账户 root 密码：\n```\n/usr/bin/mysqladmin -u root password 'WyIGmACk'\n```\n将 MySQL 设置为开机自动启动：\n```\nchkconfig mysqld on\n```\n\n**3. 搭建 PHP 环境**\n\n*安装 PHP*\n\n使用 `yum` 安装 PHP：\n```\nyum install php php-fpm php-mysql -y\n```\n安装之后，启动 `PHP-FPM` 进程：\n```\nservice php-fpm start\n```\n启动之后，可以使用下面的命令查看 `PHP-FPM` 进程监听哪个端口 \n```\nnetstat -nlpt | grep php-fpm\n```\n把 `PHP-FPM` 也设置成开机自动启动：\n```\nchkconfig php-fpm on\n```\n\n**4. 配置 Nginx 并运行 PHP 程序**\n\n*配置 `Nginx`*\n\n在 `/etc/nginx/conf.d` 目录中新建一个名为 `php.conf` 的文件，并配置 `Nginx` 端口 ，配置示例如下：\n\n```\nserver {\n    listen 8000;\n    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n    location ~ .php$ {\n        root           /usr/share/php;\n        fastcgi_pass   127.0.0.1:9000;\n        fastcgi_index  index.php;\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n}\n```\n修改配置完成后，重启 `nginx` 服务\n```\nservice nginx restart\n```\n这时候，我们就可以在`/usr/share/php` 目录下新建一个 `info.php` 文件来检查 php 是否安装成功了，文件内容参考如下：\n```\n<?php phpinfo(); ?>\n```\n此时，访问 http://yourip:8000/info.php 或 http://yourdomain.com:8000/info.php 可浏览到我们刚刚创建的 info.php 页面了","content":"<p><strong>1. 搭建 Nginx 静态服务器</strong></p>\n<p><em>安装 Nginx</em></p>\n<p>使用 <code>yum</code> 安装 Nginx：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install nginx -y</div></pre></td></tr></table></figure></p>\n<p>修改 <code>/etc/nginx/conf.d/default.conf</code>，去除对 IPv6 地址的监听，可参考下面的代码示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen       80 default_server;</div><div class=\"line\">    # listen       [::]:80 default_server;</div><div class=\"line\">    server_name  _;</div><div class=\"line\">    root         /usr/share/nginx/html;</div><div class=\"line\"></div><div class=\"line\">    # Load configuration files for the default server block.</div><div class=\"line\">    include /etc/nginx/default.d/*.conf;</div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    error_page 404 /404.html;</div><div class=\"line\">        location = /40x.html &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    error_page 500 502 503 504 /50x.html;</div><div class=\"line\">        location = /50x.html &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>修改完成后，启动 <code>Nginx</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx</div></pre></td></tr></table></figure></p>\n<p>此时，可访问实验机器外网 HTTP 服务（<a href=\"http://yourip\" target=\"_blank\" rel=\"external\">http://yourip</a> 或 <a href=\"http://yourdomain.com）来确认是否已经安装成功。\" target=\"_blank\" rel=\"external\">http://yourdomain.com）来确认是否已经安装成功。</a></p>\n<p>将 Nginx 设置为开机自动启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig nginx on</div></pre></td></tr></table></figure></p>\n<p><strong>2. 安装 MySQL 数据库服务</strong></p>\n<p><em>安装 MySQL</em></p>\n<p>使用 <code>yum</code> 安装 MySQL：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install mysql-server -y</div></pre></td></tr></table></figure></p>\n<p>安装完成后，启动 MySQL 服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service mysqld restart</div></pre></td></tr></table></figure></p>\n<p>设置 MySQL 账户 root 密码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/mysqladmin -u root password &apos;WyIGmACk&apos;</div></pre></td></tr></table></figure></p>\n<p>将 MySQL 设置为开机自动启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig mysqld on</div></pre></td></tr></table></figure></p>\n<p><strong>3. 搭建 PHP 环境</strong></p>\n<p><em>安装 PHP</em></p>\n<p>使用 <code>yum</code> 安装 PHP：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install php php-fpm php-mysql -y</div></pre></td></tr></table></figure></p>\n<p>安装之后，启动 <code>PHP-FPM</code> 进程：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service php-fpm start</div></pre></td></tr></table></figure></p>\n<p>启动之后，可以使用下面的命令查看 <code>PHP-FPM</code> 进程监听哪个端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">netstat -nlpt | grep php-fpm</div></pre></td></tr></table></figure></p>\n<p>把 <code>PHP-FPM</code> 也设置成开机自动启动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig php-fpm on</div></pre></td></tr></table></figure></p>\n<p><strong>4. 配置 Nginx 并运行 PHP 程序</strong></p>\n<p><em>配置 <code>Nginx</code></em></p>\n<p>在 <code>/etc/nginx/conf.d</code> 目录中新建一个名为 <code>php.conf</code> 的文件，并配置 <code>Nginx</code> 端口 ，配置示例如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen 8000;</div><div class=\"line\">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class=\"line\">    location ~ .php$ &#123;</div><div class=\"line\">        root           /usr/share/php;</div><div class=\"line\">        fastcgi_pass   127.0.0.1:9000;</div><div class=\"line\">        fastcgi_index  index.php;</div><div class=\"line\">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class=\"line\">        include        fastcgi_params;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>修改配置完成后，重启 <code>nginx</code> 服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx restart</div></pre></td></tr></table></figure></p>\n<p>这时候，我们就可以在<code>/usr/share/php</code> 目录下新建一个 <code>info.php</code> 文件来检查 php 是否安装成功了，文件内容参考如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php phpinfo(); ?&gt;</div></pre></td></tr></table></figure></p>\n<p>此时，访问 <a href=\"http://yourip:8000/info.php\" target=\"_blank\" rel=\"external\">http://yourip:8000/info.php</a> 或 <a href=\"http://yourdomain.com:8000/info.php\" target=\"_blank\" rel=\"external\">http://yourdomain.com:8000/info.php</a> 可浏览到我们刚刚创建的 info.php 页面了</p>\n","updated":"2017-10-18T03:39:16.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux nginx mysql php","slug":"linux-nginx-mysql-php","permalink":"http://hexo.zhazhapan.com/tags/linux-nginx-mysql-php/"}]},{"title":"CentOS搭建LAMP环境","date":"2017-10-17T15:33:06.000Z","path":"2017/10/17/CentOS搭建LAMP环境/","text":"1. 搭建 MySQL 数据库 安装 MySQL 使用 yum 安装 MySQL：1yum install mysql-server -y 安装完成后，启动 MySQL 服务：1service mysqld restart 设置 MySQL 账户 root 密码：1/usr/bin/mysqladmin -u root password &apos;NGky9EKq&apos; 2. 安装 Apache 服务 安装 Apache 使用 yum 安装 Apache1yum install httpd -y 启动 Apache 服务：1service httpd start 3. 安装 PHP 安装 PHP 和 PHP-MYSQL 支持工具： 使用 yum 安装 PHP：1yum install php php-mysql -y 4. 检查安装是否成功 检验 PHP 是否安装成功 我们在 /var/www/html 目录下创建一个info.php文件来检查php是否安装成功，示例代码参考如下1&lt;?php phpinfo(); ?&gt; 此时，访问 http://yourip/info.php 或 http://yourdomain.com/info.php 可浏览到我们刚刚创建的 info.php 页面了","raw":"---\ntitle: CentOS搭建LAMP环境\ndate: 2017-10-17 23:33:06\ntags: linux apache mysql php\n---\n**1. 搭建 MySQL 数据库**\n\n*安装 MySQL*\n\n使用 `yum` 安装 MySQL：\n```\nyum install mysql-server -y\n```\n安装完成后，启动 MySQL 服务：\n```\nservice mysqld restart\n```\n设置 MySQL 账户 root 密码：\n```\n/usr/bin/mysqladmin -u root password 'NGky9EKq'\n```\n\n**2. 安装 Apache 服务**\n\n*安装 Apache*\n\n使用 `yum` 安装 Apache\n```\nyum install httpd -y\n```\n启动 Apache 服务：\n```\nservice httpd start\n```\n**3. 安装 PHP**\n\n*安装 `PHP` 和 `PHP-MYSQL` 支持工具：*\n\n使用 `yum` 安装 PHP：\n```\nyum install php php-mysql -y\n```\n\n**4. 检查安装是否成功**\n\n*检验 PHP 是否安装成功*\n\n我们在 `/var/www/html` 目录下创建一个`info.php`文件来检查php是否安装成功，示例代码参考如下\n```\n<?php phpinfo(); ?>\n```\n此时，访问 http://yourip/info.php 或 http://yourdomain.com/info.php 可浏览到我们刚刚创建的 info.php 页面了","content":"<p><strong>1. 搭建 MySQL 数据库</strong></p>\n<p><em>安装 MySQL</em></p>\n<p>使用 <code>yum</code> 安装 MySQL：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install mysql-server -y</div></pre></td></tr></table></figure></p>\n<p>安装完成后，启动 MySQL 服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service mysqld restart</div></pre></td></tr></table></figure></p>\n<p>设置 MySQL 账户 root 密码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/mysqladmin -u root password &apos;NGky9EKq&apos;</div></pre></td></tr></table></figure></p>\n<p><strong>2. 安装 Apache 服务</strong></p>\n<p><em>安装 Apache</em></p>\n<p>使用 <code>yum</code> 安装 Apache<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install httpd -y</div></pre></td></tr></table></figure></p>\n<p>启动 Apache 服务：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service httpd start</div></pre></td></tr></table></figure></p>\n<p><strong>3. 安装 PHP</strong></p>\n<p><em>安装 <code>PHP</code> 和 <code>PHP-MYSQL</code> 支持工具：</em></p>\n<p>使用 <code>yum</code> 安装 PHP：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install php php-mysql -y</div></pre></td></tr></table></figure></p>\n<p><strong>4. 检查安装是否成功</strong></p>\n<p><em>检验 PHP 是否安装成功</em></p>\n<p>我们在 <code>/var/www/html</code> 目录下创建一个<code>info.php</code>文件来检查php是否安装成功，示例代码参考如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php phpinfo(); ?&gt;</div></pre></td></tr></table></figure></p>\n<p>此时，访问 <a href=\"http://yourip/info.php\" target=\"_blank\" rel=\"external\">http://yourip/info.php</a> 或 <a href=\"http://yourdomain.com/info.php\" target=\"_blank\" rel=\"external\">http://yourdomain.com/info.php</a> 可浏览到我们刚刚创建的 info.php 页面了</p>\n","updated":"2017-10-18T03:38:58.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux apache mysql php","slug":"linux-apache-mysql-php","permalink":"http://hexo.zhazhapan.com/tags/linux-apache-mysql-php/"}]},{"title":"基于CentOS搭建Postfix、Dovecot邮件服务","date":"2017-10-17T15:23:40.000Z","path":"2017/10/17/基于CentOS搭建Postfix、Dovecot邮件服务/","text":"1. 准备域名 域名注册 域名解析 域名购买完成后, 需要将域名解析到你的服务器IP 完成该实验共需要添加两条记录： A 记录 记录类型：A 主机记录：@ 记录值：yourip MX 记录 记录类型：MX 主机记录：@记录值：yourdomain.com（替换为自己域名） 生效检查 域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 ，如： 1ping yourdomain.com 如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。（使用 ctrl + c 停止） 检查 MX 记录 替换下面命令中的 yourdomain.com 为您自己的注册的域名： 1nslookup -q=mx yourdomain.com 如果 nslookup 命令返回的信息中含有你设置的域名的记录值，说明解析成功。 2. 实验之前 配置一个功能完善的邮件服务器并不是一项容易的工作，本实验只是搭建了一个简单的邮件服务器，一些更为强大的功能还需要你去探索。 Postfix、Dovecot 简介 Postfix Postfix 是一个标准的 MTA「Mail Transfer Agent」服务器，它负责通过 SMTP 协议管理发送到本机的邮件以及由本机发向外界的邮件。 Dovecot Dovecot 是一个优秀的 IMAP/POP 服务器用以接收外界发送到本机的邮件。 Postfix、Dovecot 安装 在 CentOS 7 上，我们可以直接使用 yum 进行下载安装： 1yum -y install postfix dovecot 3. Postfix 配置 Postfix 有关教程中配置参数的具体含义，请参照 Postfix 配置文档。 配置 在终端中输入以下命令以修改 Postfix 相关配置： 注意：记得将 yourdomain.com 替换为你自己的域名 1234567891011121314151617postconf -e &apos;myhostname = server.yourdomain.com&apos;postconf -e &apos;mydestination = localhost, localhost.localdomain&apos;postconf -e &apos;myorigin = $mydomain&apos;postconf -e &apos;mynetworks = 127.0.0.0/8&apos;postconf -e &apos;inet_interfaces = all&apos;postconf -e &apos;inet_protocols = all&apos;postconf -e &apos;mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain&apos;postconf -e &apos;home_mailbox = Maildir/&apos;postconf -e &apos;smtpd_sasl_type = dovecot&apos;postconf -e &apos;smtpd_sasl_path = private/auth&apos;postconf -e &apos;smtpd_sasl_auth_enable = yes&apos;postconf -e &apos;broken_sasl_auth_clients = yes&apos;postconf -e &apos;smtpd_sasl_authenticated_header = yes&apos;postconf -e &apos;smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination&apos;postconf -e &apos;smtpd_use_tls = yes&apos;postconf -e &apos;smtpd_tls_cert_file = /etc/pki/dovecot/certs/dovecot.pem&apos;postconf -e &apos;smtpd_tls_key_file = /etc/pki/dovecot/private/dovecot.pem&apos; 配置中 Postfix 使用 sasl 和 tls 来完成身份认证和传输信息加密。 试验中使用了 Dovecot 默认的 ssl 证书和私钥，如果你需要修改为自己的，请替换最后两行配置的路径。 配置 smtps 部分邮件客户端依赖于使用 465 端口提供加密连接，所以我们修改配置，允许 Postfix 使用 465 端口发送邮件。 打开 /etc/postfix/master.cf 文件，将如下两行前的 # 去除： 12smtps inet n - n - - smtpd-o smtpd_tls_wrappermode=yes （注意： -o 前要保留空格） 启动 使用以下命令，将 Postfix 设为自动启动并首次启动该服务： 12systemctl enable postfix.servicesystemctl start postfix.service Postfix 日志 Postfix 系统的日志文件在系统的这个目录下的 /var/log/maillog 文件，此文件记录了 Postfix 服务器的运行状态信息。 4. Dovecot 配置 Dovecot 修改 dovecot.conf 打开 /etc/dovecot/dovecot.conf 文件，在最下方加入以下配置： 1234567ssl_cert = &lt;/etc/pki/dovecot/certs/dovecot.pemssl_key = &lt;/etc/pki/dovecot/private/dovecot.pemprotocols = imap pop3 lmtplisten = *mail_location = Maildir:~/Maildirdisable_plaintext_auth = no 如果前面你修改为了自己的 ssl 证书和私钥，请替换开始两行配置的路径。 修改 10-master.conf 打开 /etc/dovecot/conf.d/10-master.conf 文件，找到 service auth 部分，将以下行前面的 # 去除： 123unix_listener /var/spool/postfix/private/auth &#123; mode = 0666 &#125; 启动 Dovecot 使用以下命令，将 Dovecot 设为自动启动并首次启动该服务： 12systemctl enable dovecot.servicesystemctl start dovecot.service 查看 /var/log/maillog 文件，查看服务是否成功启动。 如成功启动，日志里应包含如下信息： 123Jun 26 12:00:28 localhost postfix/postfix-script[28338]: starting the Postfix mail systemJun 26 12:00:29 localhost postfix/master[28340]: daemon started -- version 2.10.1, configuration /etc/postfixJun 26 12:28:40 localhost dovecot: master: Dovecot v2.2.10 starting up for imap, pop3, lmtp (core dumps disabled) 5. 创建账户 该配置下邮箱账户依赖于系统用户，所以通过添加系统用户的方式创建邮箱账户。 添加用户 在终端中使用 useradd 命令添加用户：1useradd test 使用 passwd 命令设置对应用户密码：1passwd test 6. 测试 如测试中遇到异常，请查看 maillog 日志文件中的错误信息。 服务器端发送测试 使用 su 命令切换用户：1su test 我们可以使用 mail 命令发送邮件，将 xxxx@xxx.com 替换为你的其他邮箱。1echo &quot;Mail Content&quot; | mail -s &quot;Mail Subject&quot; xxxx@xxx.com 然后可以前往你的接收方邮箱查收。","raw":"---\ntitle: 基于CentOS搭建Postfix、Dovecot邮件服务\ndate: 2017-10-17 23:23:40\ntags: linux postfix dovecot\n---\n**1. 准备域名**\n\n- 域名注册\n\n- 域名解析\n\n\t域名购买完成后, 需要将域名解析到你的服务器IP\n\n\t完成该实验共需要添加两条记录：\n\n\t- A 记录\n\n\t\t记录类型：A\n\t\t主机记录：@\n\t\t记录值：yourip\n\t\n\t- MX 记录\n\n\t\t记录类型：MX\n\t\t主机记录：@\n\t记录值：yourdomain.com（替换为自己域名）\n\n- 生效检查\n\n\t域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 ，如：\n\t```\nping yourdomain.com\n\t```\n\t如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。（使用 `ctrl + c` 停止）\n\n\t检查 MX 记录\n\n\t替换下面命令中的 `yourdomain.com` 为您自己的注册的域名：\n\t```\nnslookup -q=mx yourdomain.com\n\t```\n\t如果 `nslookup` 命令返回的信息中含有你设置的域名的记录值，说明解析成功。\n\n**2. 实验之前**\n\n配置一个功能完善的邮件服务器并不是一项容易的工作，本实验只是搭建了一个简单的邮件服务器，一些更为强大的功能还需要你去探索。\n\n- Postfix、Dovecot 简介\n\n\t*Postfix*\n\n\tPostfix 是一个标准的 MTA「Mail Transfer Agent」服务器，它负责通过 SMTP 协议管理发送到本机的邮件以及由本机发向外界的邮件。\n\n\t*Dovecot*\n\n\tDovecot 是一个优秀的 IMAP/POP 服务器用以接收外界发送到本机的邮件。\n\n- Postfix、Dovecot 安装\n\n\t在 CentOS 7 上，我们可以直接使用 `yum` 进行下载安装：\n\t```\nyum -y install postfix dovecot\n\t```\n\n**3. Postfix**\n\n- 配置 Postfix\n\n\t有关教程中配置参数的具体含义，请参照 [Postfix 配置文档](http://www.postfix.org/documentation.html)。\n\n\t*配置*\n\n\t在终端中输入以下命令以修改 `Postfix` 相关配置：\n\t\n\t> 注意：**记得将 yourdomain.com 替换为你自己的域名**\n\t\n\t```\n\tpostconf -e 'myhostname = server.yourdomain.com'\n\tpostconf -e 'mydestination = localhost, localhost.localdomain'\n\tpostconf -e 'myorigin = $mydomain'\n\tpostconf -e 'mynetworks = 127.0.0.0/8'\n\tpostconf -e 'inet_interfaces = all'\n\tpostconf -e 'inet_protocols = all'\n\tpostconf -e 'mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain'\n\tpostconf -e 'home_mailbox = Maildir/'\n\tpostconf -e 'smtpd_sasl_type = dovecot'\n\tpostconf -e 'smtpd_sasl_path = private/auth'\n\tpostconf -e 'smtpd_sasl_auth_enable = yes'\n\tpostconf -e 'broken_sasl_auth_clients = yes'\n\tpostconf -e 'smtpd_sasl_authenticated_header = yes'\n\tpostconf -e 'smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination'\n\tpostconf -e 'smtpd_use_tls = yes'\n\tpostconf -e 'smtpd_tls_cert_file = /etc/pki/dovecot/certs/dovecot.pem'\n\tpostconf -e 'smtpd_tls_key_file = /etc/pki/dovecot/private/dovecot.pem'\n\t```\n\t配置中 `Postfix` 使用 `sasl` 和 `tls` 来完成身份认证和传输信息加密。\n\t\n\t试验中使用了 `Dovecot` 默认的 `ssl` 证书和私钥，如果你需要修改为自己的，请替换最后两行配置的路径。\n\n\t*配置 smtps*\n\n\t部分邮件客户端依赖于使用 `465` 端口提供加密连接，所以我们修改配置，允许 `Postfix` 使用 `465` 端口发送邮件。\n\n\t打开 `/etc/postfix/master.cf` 文件，将如下两行前的 `#` 去除：\n\t```\nsmtps inet n - n - - smtpd\n-o smtpd_tls_wrappermode=yes\n\t```\n\t（注意： -o 前要保留空格）\n\n\t*启动*\n\n\t使用以下命令，将 `Postfix` 设为自动启动并首次启动该服务：\n\t```\nsystemctl enable postfix.service\nsystemctl start  postfix.service\n\t```\n\n- Postfix 日志\n\n\t`Postfix` 系统的日志文件在系统的这个目录下的 `/var/log/maillog` 文件，此文件记录了 `Postfix` 服务器的运行状态信息。\n\t\n**4. Dovecot**\n\n- 配置 Dovecot\n\n\t*修改 `dovecot.conf`*\n\t\n\t打开 `/etc/dovecot/dovecot.conf` 文件，在最下方加入以下配置：\n\t```\n\tssl_cert = </etc/pki/dovecot/certs/dovecot.pem\n\tssl_key = </etc/pki/dovecot/private/dovecot.pem\n\t\n\tprotocols = imap pop3 lmtp\n\tlisten = *\n\tmail_location = Maildir:~/Maildir\n\tdisable_plaintext_auth = no\n\t```\n\t如果前面你修改为了自己的 ssl 证书和私钥，请替换开始两行配置的路径。\n\n\t*修改 `10-master.conf`*\n\n\t打开 `/etc/dovecot/conf.d/10-master.conf` 文件，找到 `service auth` 部分，将以下行前面的 `#` 去除：\n\t```\n\tunix_listener /var/spool/postfix/private/auth {  \n\t       mode = 0666  \n\t}\n\t```\n\n- 启动 Dovecot\n\n\t使用以下命令，将 `Dovecot` 设为自动启动并首次启动该服务：\n\t```\nsystemctl enable dovecot.service\nsystemctl start  dovecot.service\n\t```\n\t查看 `/var/log/maillog` 文件，查看服务是否成功启动。\n\n\t如成功启动，日志里应包含如下信息：\n\t```\nJun 26 12:00:28 localhost postfix/postfix-script[28338]: starting the Postfix mail system\nJun 26 12:00:29 localhost postfix/master[28340]: daemon started -- version 2.10.1, configuration /etc/postfix\nJun 26 12:28:40 localhost dovecot: master: Dovecot v2.2.10 starting up for imap, pop3, lmtp (core dumps disabled)\n\t```\n\n**5. 创建账户**\n\n该配置下邮箱账户依赖于系统用户，所以通过添加系统用户的方式创建邮箱账户。\n\n*添加用户*\n\n在终端中使用 `useradd` 命令添加用户：\n```\nuseradd test\n```\n使用 `passwd` 命令设置对应用户密码：\n```\npasswd test\n```\n\n**6. 测试**\n\n如测试中遇到异常，请查看 maillog 日志文件中的错误信息。\n\n*服务器端发送测试*\n\n使用 `su` 命令切换用户：\n```\nsu test\n```\n我们可以使用 `mail` 命令发送邮件，将 `xxxx@xxx.com` 替换为你的其他邮箱。\n```\necho \"Mail Content\" | mail -s \"Mail Subject\" xxxx@xxx.com\n```\n然后可以前往你的接收方邮箱查收。","content":"<p><strong>1. 准备域名</strong></p>\n<ul>\n<li><p>域名注册</p>\n</li>\n<li><p>域名解析</p>\n<p>  域名购买完成后, 需要将域名解析到你的服务器IP</p>\n<p>  完成该实验共需要添加两条记录：</p>\n<ul>\n<li><p>A 记录</p>\n<p>  记录类型：A<br>  主机记录：@<br>  记录值：yourip</p>\n</li>\n<li><p>MX 记录</p>\n<p>  记录类型：MX<br>  主机记录：@<br>记录值：yourdomain.com（替换为自己域名）</p>\n</li>\n</ul>\n</li>\n<li><p>生效检查</p>\n<p>  域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 ，如：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ping yourdomain.com</div></pre></td></tr></table></figure>\n<p>  如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。（使用 <code>ctrl + c</code> 停止）</p>\n<p>  检查 MX 记录</p>\n<p>  替换下面命令中的 <code>yourdomain.com</code> 为您自己的注册的域名：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nslookup -q=mx yourdomain.com</div></pre></td></tr></table></figure>\n<p>  如果 <code>nslookup</code> 命令返回的信息中含有你设置的域名的记录值，说明解析成功。</p>\n</li>\n</ul>\n<p><strong>2. 实验之前</strong></p>\n<p>配置一个功能完善的邮件服务器并不是一项容易的工作，本实验只是搭建了一个简单的邮件服务器，一些更为强大的功能还需要你去探索。</p>\n<ul>\n<li><p>Postfix、Dovecot 简介</p>\n<p>  <em>Postfix</em></p>\n<p>  Postfix 是一个标准的 MTA「Mail Transfer Agent」服务器，它负责通过 SMTP 协议管理发送到本机的邮件以及由本机发向外界的邮件。</p>\n<p>  <em>Dovecot</em></p>\n<p>  Dovecot 是一个优秀的 IMAP/POP 服务器用以接收外界发送到本机的邮件。</p>\n</li>\n<li><p>Postfix、Dovecot 安装</p>\n<p>  在 CentOS 7 上，我们可以直接使用 <code>yum</code> 进行下载安装：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install postfix dovecot</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>3. Postfix</strong></p>\n<ul>\n<li><p>配置 Postfix</p>\n<p>  有关教程中配置参数的具体含义，请参照 <a href=\"http://www.postfix.org/documentation.html\" target=\"_blank\" rel=\"external\">Postfix 配置文档</a>。</p>\n<p>  <em>配置</em></p>\n<p>  在终端中输入以下命令以修改 <code>Postfix</code> 相关配置：</p>\n<blockquote>\n<p>注意：<strong>记得将 yourdomain.com 替换为你自己的域名</strong></p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">postconf -e &apos;myhostname = server.yourdomain.com&apos;</div><div class=\"line\">postconf -e &apos;mydestination = localhost, localhost.localdomain&apos;</div><div class=\"line\">postconf -e &apos;myorigin = $mydomain&apos;</div><div class=\"line\">postconf -e &apos;mynetworks = 127.0.0.0/8&apos;</div><div class=\"line\">postconf -e &apos;inet_interfaces = all&apos;</div><div class=\"line\">postconf -e &apos;inet_protocols = all&apos;</div><div class=\"line\">postconf -e &apos;mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain&apos;</div><div class=\"line\">postconf -e &apos;home_mailbox = Maildir/&apos;</div><div class=\"line\">postconf -e &apos;smtpd_sasl_type = dovecot&apos;</div><div class=\"line\">postconf -e &apos;smtpd_sasl_path = private/auth&apos;</div><div class=\"line\">postconf -e &apos;smtpd_sasl_auth_enable = yes&apos;</div><div class=\"line\">postconf -e &apos;broken_sasl_auth_clients = yes&apos;</div><div class=\"line\">postconf -e &apos;smtpd_sasl_authenticated_header = yes&apos;</div><div class=\"line\">postconf -e &apos;smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination&apos;</div><div class=\"line\">postconf -e &apos;smtpd_use_tls = yes&apos;</div><div class=\"line\">postconf -e &apos;smtpd_tls_cert_file = /etc/pki/dovecot/certs/dovecot.pem&apos;</div><div class=\"line\">postconf -e &apos;smtpd_tls_key_file = /etc/pki/dovecot/private/dovecot.pem&apos;</div></pre></td></tr></table></figure>\n<p>  配置中 <code>Postfix</code> 使用 <code>sasl</code> 和 <code>tls</code> 来完成身份认证和传输信息加密。</p>\n<p>  试验中使用了 <code>Dovecot</code> 默认的 <code>ssl</code> 证书和私钥，如果你需要修改为自己的，请替换最后两行配置的路径。</p>\n<p>  <em>配置 smtps</em></p>\n<p>  部分邮件客户端依赖于使用 <code>465</code> 端口提供加密连接，所以我们修改配置，允许 <code>Postfix</code> 使用 <code>465</code> 端口发送邮件。</p>\n<p>  打开 <code>/etc/postfix/master.cf</code> 文件，将如下两行前的 <code>#</code> 去除：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">smtps inet n - n - - smtpd</div><div class=\"line\">-o smtpd_tls_wrappermode=yes</div></pre></td></tr></table></figure>\n<p>  （注意： -o 前要保留空格）</p>\n<p>  <em>启动</em></p>\n<p>  使用以下命令，将 <code>Postfix</code> 设为自动启动并首次启动该服务：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl enable postfix.service</div><div class=\"line\">systemctl start  postfix.service</div></pre></td></tr></table></figure>\n</li>\n<li><p>Postfix 日志</p>\n<p>  <code>Postfix</code> 系统的日志文件在系统的这个目录下的 <code>/var/log/maillog</code> 文件，此文件记录了 <code>Postfix</code> 服务器的运行状态信息。</p>\n</li>\n</ul>\n<p><strong>4. Dovecot</strong></p>\n<ul>\n<li><p>配置 Dovecot</p>\n<p>  <em>修改 <code>dovecot.conf</code></em></p>\n<p>  打开 <code>/etc/dovecot/dovecot.conf</code> 文件，在最下方加入以下配置：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssl_cert = &lt;/etc/pki/dovecot/certs/dovecot.pem</div><div class=\"line\">ssl_key = &lt;/etc/pki/dovecot/private/dovecot.pem</div><div class=\"line\"></div><div class=\"line\">protocols = imap pop3 lmtp</div><div class=\"line\">listen = *</div><div class=\"line\">mail_location = Maildir:~/Maildir</div><div class=\"line\">disable_plaintext_auth = no</div></pre></td></tr></table></figure>\n<p>  如果前面你修改为了自己的 ssl 证书和私钥，请替换开始两行配置的路径。</p>\n<p>  <em>修改 <code>10-master.conf</code></em></p>\n<p>  打开 <code>/etc/dovecot/conf.d/10-master.conf</code> 文件，找到 <code>service auth</code> 部分，将以下行前面的 <code>#</code> 去除：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">unix_listener /var/spool/postfix/private/auth &#123;  </div><div class=\"line\">       mode = 0666  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动 Dovecot</p>\n<p>  使用以下命令，将 <code>Dovecot</code> 设为自动启动并首次启动该服务：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl enable dovecot.service</div><div class=\"line\">systemctl start  dovecot.service</div></pre></td></tr></table></figure>\n<p>  查看 <code>/var/log/maillog</code> 文件，查看服务是否成功启动。</p>\n<p>  如成功启动，日志里应包含如下信息：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Jun 26 12:00:28 localhost postfix/postfix-script[28338]: starting the Postfix mail system</div><div class=\"line\">Jun 26 12:00:29 localhost postfix/master[28340]: daemon started -- version 2.10.1, configuration /etc/postfix</div><div class=\"line\">Jun 26 12:28:40 localhost dovecot: master: Dovecot v2.2.10 starting up for imap, pop3, lmtp (core dumps disabled)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>5. 创建账户</strong></p>\n<p>该配置下邮箱账户依赖于系统用户，所以通过添加系统用户的方式创建邮箱账户。</p>\n<p><em>添加用户</em></p>\n<p>在终端中使用 <code>useradd</code> 命令添加用户：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd test</div></pre></td></tr></table></figure></p>\n<p>使用 <code>passwd</code> 命令设置对应用户密码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">passwd test</div></pre></td></tr></table></figure></p>\n<p><strong>6. 测试</strong></p>\n<p>如测试中遇到异常，请查看 maillog 日志文件中的错误信息。</p>\n<p><em>服务器端发送测试</em></p>\n<p>使用 <code>su</code> 命令切换用户：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">su test</div></pre></td></tr></table></figure></p>\n<p>我们可以使用 <code>mail</code> 命令发送邮件，将 <code>xxxx@xxx.com</code> 替换为你的其他邮箱。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;Mail Content&quot; | mail -s &quot;Mail Subject&quot; xxxx@xxx.com</div></pre></td></tr></table></figure></p>\n<p>然后可以前往你的接收方邮箱查收。</p>\n","updated":"2017-10-18T03:37:11.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux postfix dovecot","slug":"linux-postfix-dovecot","permalink":"http://hexo.zhazhapan.com/tags/linux-postfix-dovecot/"}]},{"title":"基于CentOS搭建Docker环境","date":"2017-10-17T14:52:17.000Z","path":"2017/10/17/基于CentOS搭建Docker环境/","text":"1. 安装与配置 Docker 安装 Docker Docker 软件包已经包括在默认的 CentOS-Extras 软件源里。因此想要安装 docker，只需要运行下面的 yum 命令： 1yum install docker-io -y 直接yum安装，安装成功后查看版本 1docker -v 启动docker 1service docker start 设置开机启动 1chkconfig docker on 配置 Docker 因为国内访问 Docker Hub 较慢, 可以使用腾讯云提供的国内镜像源, 加速访问 Docker Hub 依次执行以下命令 123echo &quot;OPTIONS=&apos;--registry-mirror=https://mirror.ccs.tencentyun.com&apos;&quot; &gt;&gt; /etc/sysconfig/dockersystemctl daemon-reloadservice docker restart 2. Docker 的简单操作 下载镜像 下载一个官方的 CentOS 镜像到本地 1docker pull centos 下载好的镜像就会出现在镜像列表里 1docker images 运行容器 这时我们可以在刚才下载的 CentOS 镜像生成的容器内操作了。 生成一个 centos 镜像为模板的容器并使用 bash shell 1docker run -it centos /bin/bash 这个时候可以看到命令行的前端已经变成了 [root@(一串 hash Id)] 的形式, 这说明我们已经成功进入了 CentOS 容器。 在容器内执行任意命令, 不会影响到宿主机, 如下 1mkdir -p /data/simple_docker 可以看到 /data 目录下已经创建成功了 simple_docker 文件夹 1ls /data 退出容器 1exit 查看宿主机的 /data 目录, 并没有 simple_docker 文件夹, 说明容器内的操作不会影响到宿主机 1ls /data 保存容器 查看所有的容器信息， 能获取容器的id 1docker ps -a 然后执行如下命令，保存镜像： 1docker commit -m=&quot;备注&quot; [CONTAINER_ID] [IMAGE] 完成","raw":"---\ntitle: 基于CentOS搭建Docker环境\ndate: 2017-10-17 22:52:17\ntags: linux docker\n---\n**1. 安装与配置 Docker**\n\n- 安装 Docker\n\n\t`Docker` 软件包已经包括在默认的 `CentOS-Extras` 软件源里。因此想要安装 `docker`，只需要运行下面的 `yum` 命令：\n\t```\nyum install docker-io -y\n\t```\n\t直接`yum`安装，安装成功后查看版本\n\t```\ndocker -v\n\t```\n\t启动docker\n\t```\nservice docker start\n\t```\n\t设置开机启动\n\t```\nchkconfig docker on\n\t```\n\t\n- 配置 Docker\n\n\t因为国内访问 Docker Hub 较慢, 可以使用腾讯云提供的国内镜像源, 加速访问 Docker Hub\n\n\t依次执行以下命令\n\t```\necho \"OPTIONS='--registry-mirror=https://mirror.ccs.tencentyun.com'\" >> /etc/sysconfig/docker\nsystemctl daemon-reload\nservice docker restart\n\t```\n\n**2. Docker 的简单操作**\n\n- 下载镜像\n\n\t下载一个官方的 CentOS 镜像到本地\n\t```\ndocker pull centos\n\t```\n\t下载好的镜像就会出现在镜像列表里\n\t```\ndocker images\n\t```\n\n- 运行容器\n\n\t这时我们可以在刚才下载的 CentOS 镜像生成的容器内操作了。\n\n\t生成一个 centos 镜像为模板的容器并使用 `bash shell`\n\t```\ndocker run -it centos /bin/bash\n\t```\n\t这个时候可以看到命令行的前端已经变成了 [root@(一串 hash Id)] 的形式, 这说明我们已经成功进入了 CentOS 容器。\n\n\t在容器内执行任意命令, 不会影响到宿主机, 如下\n\t```\nmkdir -p /data/simple_docker\n\t```\n\t可以看到 `/data` 目录下已经创建成功了 `simple_docker` 文件夹\n\t```\nls /data\n\t```\n\t退出容器\n\t```\nexit\n\t```\n\t查看宿主机的 `/data` 目录, 并没有 `simple_docker` 文件夹, 说明容器内的操作不会影响到宿主机\n\t```\nls /data\n\t```\n\n- 保存容器\n\n\t查看所有的容器信息， 能获取容器的id\n\t```\ndocker ps -a\n\t```\n\t然后执行如下命令，保存镜像：\n\t```\ndocker commit -m=\"备注\" [CONTAINER_ID] [IMAGE]\n\t```\n\n- 完成","content":"<p><strong>1. 安装与配置 Docker</strong></p>\n<ul>\n<li><p>安装 Docker</p>\n<p>  <code>Docker</code> 软件包已经包括在默认的 <code>CentOS-Extras</code> 软件源里。因此想要安装 <code>docker</code>，只需要运行下面的 <code>yum</code> 命令：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install docker-io -y</div></pre></td></tr></table></figure>\n<p>  直接<code>yum</code>安装，安装成功后查看版本</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker -v</div></pre></td></tr></table></figure>\n<p>  启动docker</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service docker start</div></pre></td></tr></table></figure>\n<p>  设置开机启动</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig docker on</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>配置 Docker</p>\n<p>  因为国内访问 Docker Hub 较慢, 可以使用腾讯云提供的国内镜像源, 加速访问 Docker Hub</p>\n<p>  依次执行以下命令</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;OPTIONS=&apos;--registry-mirror=https://mirror.ccs.tencentyun.com&apos;&quot; &gt;&gt; /etc/sysconfig/docker</div><div class=\"line\">systemctl daemon-reload</div><div class=\"line\">service docker restart</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2. Docker 的简单操作</strong></p>\n<ul>\n<li><p>下载镜像</p>\n<p>  下载一个官方的 CentOS 镜像到本地</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull centos</div></pre></td></tr></table></figure>\n<p>  下载好的镜像就会出现在镜像列表里</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker images</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行容器</p>\n<p>  这时我们可以在刚才下载的 CentOS 镜像生成的容器内操作了。</p>\n<p>  生成一个 centos 镜像为模板的容器并使用 <code>bash shell</code></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -it centos /bin/bash</div></pre></td></tr></table></figure>\n<p>  这个时候可以看到命令行的前端已经变成了 [root@(一串 hash Id)] 的形式, 这说明我们已经成功进入了 CentOS 容器。</p>\n<p>  在容器内执行任意命令, 不会影响到宿主机, 如下</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /data/simple_docker</div></pre></td></tr></table></figure>\n<p>  可以看到 <code>/data</code> 目录下已经创建成功了 <code>simple_docker</code> 文件夹</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls /data</div></pre></td></tr></table></figure>\n<p>  退出容器</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">exit</div></pre></td></tr></table></figure>\n<p>  查看宿主机的 <code>/data</code> 目录, 并没有 <code>simple_docker</code> 文件夹, 说明容器内的操作不会影响到宿主机</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls /data</div></pre></td></tr></table></figure>\n</li>\n<li><p>保存容器</p>\n<p>  查看所有的容器信息， 能获取容器的id</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker ps -a</div></pre></td></tr></table></figure>\n<p>  然后执行如下命令，保存镜像：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker commit -m=&quot;备注&quot; [CONTAINER_ID] [IMAGE]</div></pre></td></tr></table></figure>\n</li>\n<li><p>完成</p>\n</li>\n</ul>\n","updated":"2017-10-18T03:36:45.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux docker","slug":"linux-docker","permalink":"http://hexo.zhazhapan.com/tags/linux-docker/"}]},{"title":"基于CentOS搭建SVN服务器","date":"2017-10-17T14:41:16.000Z","path":"2017/10/17/基于CentOS搭建SVN服务器/","text":"1. 安装 SVN 服务端 安装 Subversion Subversion 是一个版本控制系统，相对于的 RCS 、 CVS ，采用了分支管理系统，它的设计目标就是取代 CVS 。1yum install -y subversion 2. 创建 SVN 版本库 创建项目版本库12mkdir -p /data/svn/myprojectsvnadmin create /data/svn/myproject 3. 配置 SVN 信息 配置文件简介 版本库中的配置目录 conf 有三个文件: authz 是权限控制文件 passwd 是帐号密码文件 svnserve.conf 是SVN服务综合配置文件 配置权限配置文件 authz 编辑 authz ，内容参考如下： 12345678910[groups] #用户组admin = admin,root,test #用户组所对应的用户[/] #库目录权限@admin = rw #用户组权限*=r #非用户组权限 配置账号密码文件 passwd 编辑 passwd ，内容参考如下： 123456[users]# harry = harryssecret# sally = sallyssecretadmin = 123456root = 123456test = 123456 配置 SVN 服务综合配置文件 svnserve.conf 编辑 svnserve.conf ，内容参考如下： 1234567891011121314[general]# force-username-case = none# 匿名访问的权限 可以是read、write，none，默认为readanon-access = none#使授权用户有写权限auth-access = write#密码数据库的路径password-db = passwd#访问控制文件authz-db = authz#认证命名空间，SVN会在认证提示里显示，并且作为凭证缓存的关键字realm = /data/svn/myproject[sasl] 4. 启动 SVN 服务 启动 SVN 1svnserve -d -r /data/svn checkout SVN项目 12mkdir -p /data/workspace/myprojectsvn co svn://127.0.0.1/myproject /data/workspace/myproject --username root --password 123456 --force --no-auth-cache 提交文件到 SVN 服务器 从本地提交文件到 SVN 服务器，其中 root 密码为 /data/svn/myproject/conf/passwd 文件存储的密码 1234cd /data/workspace/myprojectecho test &gt;&gt; test.txtsvn add test.txtsvn commit test.txt -m &apos;test&apos; 提交成功后可以通过如下命令从本地项目删除文件 12cd /data/workspace/myprojectrm -rf test.txt 删除后可以通过 SVN 服务器恢复 12cd /data/workspace/myprojectsvn update 5. 完成","raw":"---\ntitle: 基于CentOS搭建SVN服务器\ndate: 2017-10-17 22:41:16\ntags: linux svn\n---\n**1. 安装 SVN 服务端**\n\n安装 Subversion\n\nSubversion 是一个版本控制系统，相对于的 RCS 、 CVS ，采用了分支管理系统，它的设计目标就是取代 CVS 。\n```\nyum install -y subversion\n```\n\n**2. 创建 SVN 版本库**\n\n创建项目版本库\n```\nmkdir -p /data/svn/myproject\nsvnadmin create /data/svn/myproject\n```\n\n**3. 配置 SVN 信息**\n\n- 配置文件简介\n\t\n\t版本库中的配置目录 conf 有三个文件:\n\n\t- `authz` 是权限控制文件\n\t- `passwd` 是帐号密码文件\n\t- `svnserve.conf` 是SVN服务综合配置文件\n\n- 配置权限配置文件 `authz`\n\n\t编辑 `authz` ，内容参考如下：\n\t```\n\t[groups]            \n\t#用户组\n\tadmin = admin,root,test  \n\t#用户组所对应的用户\n\t[/]                 \n\t#库目录权限\n\t@admin = rw         \n\t#用户组权限\n\t*=r               \n\t#非用户组权限\n\t```\n\n- 配置账号密码文件 `passwd`\n\n\t编辑 `passwd` ，内容参考如下：\n\n\t```\n\t[users]\n\t# harry = harryssecret\n\t# sally = sallyssecret\n\tadmin = 123456\n\troot = 123456\n\ttest = 123456\n\t```\n\n- 配置 SVN 服务综合配置文件 `svnserve.conf`\n\n\t编辑 `svnserve.conf` ，内容参考如下：\n\t```\n\t[general]\n\t# force-username-case = none\n\t# 匿名访问的权限 可以是read、write，none，默认为read\n\tanon-access = none\n\t#使授权用户有写权限\n\tauth-access = write\n\t#密码数据库的路径\n\tpassword-db = passwd\n\t#访问控制文件\n\tauthz-db = authz\n\t#认证命名空间，SVN会在认证提示里显示，并且作为凭证缓存的关键字\n\trealm = /data/svn/myproject\n\t\n\t[sasl]\n\t```\n\n**4. 启动 SVN 服务**\n\n- 启动 SVN\n\t\n\t```\nsvnserve -d -r /data/svn\n\t```\n\n- checkout SVN项目\n\n\t```\nmkdir -p /data/workspace/myproject\nsvn co svn://127.0.0.1/myproject /data/workspace/myproject --username root --password 123456 --force --no-auth-cache\n\t```\n\n- 提交文件到 SVN 服务器\n\n\t从本地提交文件到 SVN 服务器，其中 `root` 密码为 `/data/svn/myproject/conf/passwd` 文件存储的密码\n\t```\ncd /data/workspace/myproject\necho test >> test.txt\nsvn add test.txt\nsvn commit test.txt -m 'test'\n\t```\n\t提交成功后可以通过如下命令从本地项目删除文件\n\t```\ncd /data/workspace/myproject\nrm -rf test.txt\n\t```\n\t删除后可以通过 SVN 服务器恢复\n\t```\ncd /data/workspace/myproject\nsvn update\n\t```\n\n**5. 完成**","content":"<p><strong>1. 安装 SVN 服务端</strong></p>\n<p>安装 Subversion</p>\n<p>Subversion 是一个版本控制系统，相对于的 RCS 、 CVS ，采用了分支管理系统，它的设计目标就是取代 CVS 。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install -y subversion</div></pre></td></tr></table></figure></p>\n<p><strong>2. 创建 SVN 版本库</strong></p>\n<p>创建项目版本库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /data/svn/myproject</div><div class=\"line\">svnadmin create /data/svn/myproject</div></pre></td></tr></table></figure></p>\n<p><strong>3. 配置 SVN 信息</strong></p>\n<ul>\n<li><p>配置文件简介</p>\n<p>  版本库中的配置目录 conf 有三个文件:</p>\n<ul>\n<li><code>authz</code> 是权限控制文件</li>\n<li><code>passwd</code> 是帐号密码文件</li>\n<li><code>svnserve.conf</code> 是SVN服务综合配置文件</li>\n</ul>\n</li>\n<li><p>配置权限配置文件 <code>authz</code></p>\n<p>  编辑 <code>authz</code> ，内容参考如下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[groups]            </div><div class=\"line\">#用户组</div><div class=\"line\">admin = admin,root,test  </div><div class=\"line\">#用户组所对应的用户</div><div class=\"line\">[/]                 </div><div class=\"line\">#库目录权限</div><div class=\"line\">@admin = rw         </div><div class=\"line\">#用户组权限</div><div class=\"line\">*=r               </div><div class=\"line\">#非用户组权限</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置账号密码文件 <code>passwd</code></p>\n<p>  编辑 <code>passwd</code> ，内容参考如下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[users]</div><div class=\"line\"># harry = harryssecret</div><div class=\"line\"># sally = sallyssecret</div><div class=\"line\">admin = 123456</div><div class=\"line\">root = 123456</div><div class=\"line\">test = 123456</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置 SVN 服务综合配置文件 <code>svnserve.conf</code></p>\n<p>  编辑 <code>svnserve.conf</code> ，内容参考如下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[general]</div><div class=\"line\"># force-username-case = none</div><div class=\"line\"># 匿名访问的权限 可以是read、write，none，默认为read</div><div class=\"line\">anon-access = none</div><div class=\"line\">#使授权用户有写权限</div><div class=\"line\">auth-access = write</div><div class=\"line\">#密码数据库的路径</div><div class=\"line\">password-db = passwd</div><div class=\"line\">#访问控制文件</div><div class=\"line\">authz-db = authz</div><div class=\"line\">#认证命名空间，SVN会在认证提示里显示，并且作为凭证缓存的关键字</div><div class=\"line\">realm = /data/svn/myproject</div><div class=\"line\"></div><div class=\"line\">[sasl]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>4. 启动 SVN 服务</strong></p>\n<ul>\n<li><p>启动 SVN</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">svnserve -d -r /data/svn</div></pre></td></tr></table></figure>\n</li>\n<li><p>checkout SVN项目</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /data/workspace/myproject</div><div class=\"line\">svn co svn://127.0.0.1/myproject /data/workspace/myproject --username root --password 123456 --force --no-auth-cache</div></pre></td></tr></table></figure>\n</li>\n<li><p>提交文件到 SVN 服务器</p>\n<p>  从本地提交文件到 SVN 服务器，其中 <code>root</code> 密码为 <code>/data/svn/myproject/conf/passwd</code> 文件存储的密码</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/workspace/myproject</div><div class=\"line\">echo test &gt;&gt; test.txt</div><div class=\"line\">svn add test.txt</div><div class=\"line\">svn commit test.txt -m &apos;test&apos;</div></pre></td></tr></table></figure>\n<p>  提交成功后可以通过如下命令从本地项目删除文件</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/workspace/myproject</div><div class=\"line\">rm -rf test.txt</div></pre></td></tr></table></figure>\n<p>  删除后可以通过 SVN 服务器恢复</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/workspace/myproject</div><div class=\"line\">svn update</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>5. 完成</strong></p>\n","updated":"2017-10-18T03:37:21.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux svn","slug":"linux-svn","permalink":"http://hexo.zhazhapan.com/tags/linux-svn/"}]},{"title":"基于CentOS搭建GIT服务器","date":"2017-10-17T14:28:45.000Z","path":"2017/10/17/基于CentOS搭建GIT服务器/","text":"1. 下载安装 git Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 此教程以 CentOS 7.2 x64 的系统为环境，搭建 git 服务器。 安装依赖库和编译工具 为了后续安装能正常进行，我们先来安装一些相关依赖库和编译工具 1yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel 安装编译工具 1yum install gcc perl-ExtUtils-MakeMaker 下载 git 选一个目录，用来放下载下来的安装包，这里将安装包放在 /usr/local/src 目录里 1cd /usr/local/src 到官网找一个新版稳定的源码包下载到 /usr/local/src 文件夹里 1wget https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz 解压和编译 解压下载的源码包 1tar -zvxf git-2.10.0.tar.gz 解压后进入 git-2.10.0 文件夹 1cd git-2.10.0 执行编译 1make all prefix=/usr/local/git 编译完成后, 安装到 /usr/local/git 目录下 1make install prefix=/usr/local/git 2. 配置环境变量 将 git 目录加入 PATH 将原来的 PATH 指向目录修改为现在的目录 1echo &apos;export PATH=$PATH:/usr/local/git/bin&apos; &gt;&gt; /etc/bashrc 生效环境变量1source /etc/bashrc 此时我们能查看 git 版本号，说明我们已经安装成功了。1git --version 3. 创建 git 账号密码 创建 git 账号 为我们刚刚搭建好的 git 创建一个账号1useradd -m gituser 然后为这个账号设置密码1passwd gituser 4. 初始化 git 仓库并配置用户权限 创建 git 仓库并初始化 我们创建 /data/repositories 目录用于存放 git 仓库 1mkdir -p /data/repositories 创建好后，初始化这个仓库 1cd /data/repositories/ &amp;&amp; git init --bare test.git 配置用户权限 给 git 仓库目录设置用户和用户组并设置权限 12chown -R gituser:gituser /data/repositorieschmod 755 /data/repositories 查找 git-shell 所在目录 , 编辑 /etc/passwd 文件，将最后一行关于 gituser 的登录 shell 配置改为 git-shell 的目录，如下 1gituser:x:500:500::/home/gituser:/usr/local/git/bin/git-shell 使用搭建好的 Git 服务 克隆 test repo 到本地 1cd ~ &amp;&amp; git clone gituser@yourip:/data/repositories/test.git #yourip可以你服务器的ip地址或域名","raw":"---\ntitle: 基于CentOS搭建GIT服务器\ndate: 2017-10-17 22:28:45\ntags: linux git\n---\n**1. 下载安装 git**\n\nGit 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n\n此教程以 CentOS 7.2 x64 的系统为环境，搭建 git 服务器。\n\n- 安装依赖库和编译工具\n\n\t为了后续安装能正常进行，我们先来安装一些相关依赖库和编译工具\n\t```\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\n\t```\n\t安装编译工具\n\t```\nyum install gcc perl-ExtUtils-MakeMaker\n\t```\n\n- 下载 git\n\n\t选一个目录，用来放下载下来的安装包，这里将安装包放在 /usr/local/src 目录里\n\t```\ncd /usr/local/src\n\t```\n\t到官网找一个新版稳定的源码包下载到 `/usr/local/src` 文件夹里\n\t```\nwget https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz\n\t```\n\n- 解压和编译\n\n\t解压下载的源码包\n\t```\ntar -zvxf git-2.10.0.tar.gz\n\t```\n\t解压后进入 git-2.10.0 文件夹\n\t```\ncd git-2.10.0\n\t```\n\t执行编译\n\t```\nmake all prefix=/usr/local/git\n\t```\n\t编译完成后, 安装到 /usr/local/git 目录下\n\t```\nmake install prefix=/usr/local/git\n\t```\n\n**2. 配置环境变量**\n\n将 git 目录加入 PATH\n\n将原来的 PATH 指向目录修改为现在的目录\n\t\n```\necho 'export PATH=$PATH:/usr/local/git/bin' >> /etc/bashrc\n```\n生效环境变量\n```\nsource /etc/bashrc\n```\n此时我们能查看 git 版本号，说明我们已经安装成功了。\n```\ngit --version\n```\n\n**3. 创建 git 账号密码**\n\n创建 git 账号\n\n为我们刚刚搭建好的 git 创建一个账号\n```\nuseradd -m gituser\n```\n然后为这个账号设置密码\n```\npasswd gituser\n```\n\n**4. 初始化 git 仓库并配置用户权限**\n\n- 创建 git 仓库并初始化\n\n\t我们创建 `/data/repositories` 目录用于存放 git 仓库\n\t```\nmkdir -p /data/repositories\n\t```\n\t创建好后，初始化这个仓库\n\t```\ncd /data/repositories/ && git init --bare test.git\n\t```\n\n- 配置用户权限\n\n\t给 git 仓库目录设置用户和用户组并设置权限\n\t```\nchown -R gituser:gituser /data/repositories\nchmod 755 /data/repositories\n\t```\n\t查找 `git-shell` 所在目录 , 编辑 `/etc/passwd` 文件，将最后一行关于 `gituser` 的登录 `shell` 配置改为 `git-shell` 的目录，如下\n\t```\ngituser:x:500:500::/home/gituser:/usr/local/git/bin/git-shell\n\t```\n\n- 使用搭建好的 Git 服务\n\n\t克隆 test repo 到本地\n\t```\ncd ~ && git clone gituser@yourip:/data/repositories/test.git #yourip可以你服务器的ip地址或域名\n\t```\n\t","content":"<p><strong>1. 下载安装 git</strong></p>\n<p>Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<p>此教程以 CentOS 7.2 x64 的系统为环境，搭建 git 服务器。</p>\n<ul>\n<li><p>安装依赖库和编译工具</p>\n<p>  为了后续安装能正常进行，我们先来安装一些相关依赖库和编译工具</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</div></pre></td></tr></table></figure>\n<p>  安装编译工具</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install gcc perl-ExtUtils-MakeMaker</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载 git</p>\n<p>  选一个目录，用来放下载下来的安装包，这里将安装包放在 /usr/local/src 目录里</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/src</div></pre></td></tr></table></figure>\n<p>  到官网找一个新版稳定的源码包下载到 <code>/usr/local/src</code> 文件夹里</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz</div></pre></td></tr></table></figure>\n</li>\n<li><p>解压和编译</p>\n<p>  解压下载的源码包</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zvxf git-2.10.0.tar.gz</div></pre></td></tr></table></figure>\n<p>  解压后进入 git-2.10.0 文件夹</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd git-2.10.0</div></pre></td></tr></table></figure>\n<p>  执行编译</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make all prefix=/usr/local/git</div></pre></td></tr></table></figure>\n<p>  编译完成后, 安装到 /usr/local/git 目录下</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make install prefix=/usr/local/git</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2. 配置环境变量</strong></p>\n<p>将 git 目录加入 PATH</p>\n<p>将原来的 PATH 指向目录修改为现在的目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &apos;export PATH=$PATH:/usr/local/git/bin&apos; &gt;&gt; /etc/bashrc</div></pre></td></tr></table></figure>\n<p>生效环境变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source /etc/bashrc</div></pre></td></tr></table></figure></p>\n<p>此时我们能查看 git 版本号，说明我们已经安装成功了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git --version</div></pre></td></tr></table></figure></p>\n<p><strong>3. 创建 git 账号密码</strong></p>\n<p>创建 git 账号</p>\n<p>为我们刚刚搭建好的 git 创建一个账号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd -m gituser</div></pre></td></tr></table></figure></p>\n<p>然后为这个账号设置密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">passwd gituser</div></pre></td></tr></table></figure></p>\n<p><strong>4. 初始化 git 仓库并配置用户权限</strong></p>\n<ul>\n<li><p>创建 git 仓库并初始化</p>\n<p>  我们创建 <code>/data/repositories</code> 目录用于存放 git 仓库</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /data/repositories</div></pre></td></tr></table></figure>\n<p>  创建好后，初始化这个仓库</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/repositories/ &amp;&amp; git init --bare test.git</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置用户权限</p>\n<p>  给 git 仓库目录设置用户和用户组并设置权限</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chown -R gituser:gituser /data/repositories</div><div class=\"line\">chmod 755 /data/repositories</div></pre></td></tr></table></figure>\n<p>  查找 <code>git-shell</code> 所在目录 , 编辑 <code>/etc/passwd</code> 文件，将最后一行关于 <code>gituser</code> 的登录 <code>shell</code> 配置改为 <code>git-shell</code> 的目录，如下</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gituser:x:500:500::/home/gituser:/usr/local/git/bin/git-shell</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用搭建好的 Git 服务</p>\n<p>  克隆 test repo 到本地</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~ &amp;&amp; git clone gituser@yourip:/data/repositories/test.git #yourip可以你服务器的ip地址或域名</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","updated":"2017-10-18T03:36:52.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux git","slug":"linux-git","permalink":"http://hexo.zhazhapan.com/tags/linux-git/"}]},{"title":"基于CentOS搭建个人Leanote云笔记本","date":"2017-10-17T14:11:11.000Z","path":"2017/10/17/基于CentOS搭建个人Leanote云笔记本/","text":"Leanote 依赖 MongoDB 作为数据存储，下面开始安装MongoDB：1. 下载启动 MongoDB 下载 MongoDB 进入 /home 目录，并下载 MongoDB： 1cd /home 下载源码： 1wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz 解压缩源码包： 1tar -xzvf mongodb-linux-x86_64-3.0.1.tgz 创建用于存储的文件夹目录 1mkdir -p /data/db 配置 MongoDB 的环境变量： 编辑 /etc/profile，在文件末尾追加以下配置： 1export PATH=$PATH:/home/mongodb-linux-x86_64-3.0.1/bin 并执行以下命令，使环境变量生效。 1source /etc/profile 启动 MongoDB（启动需要 3 ~ 5 分钟，耐心等待）： 1mongod --bind_ip localhost --port 27017 --dbpath /data/db/ --logpath=/var/log/mongod.log --fork 2. 安装 Leanote 下载 Leanote 先进入 /home 目录 1cd /home 下载 Leanote 源码 1wget https://iweb.dl.sourceforge.net/project/leanote-bin/2.4/leanote-linux-amd64-v2.4.bin.tar.gz 解开压缩包： 1tar -zxvf leanote-linux-amd64-v2.4.bin.tar.gz 编辑 Leanote 配置文件 编辑文件 app.conf，在文件中找到 app.secret= 项，并修改为如下内容： 1app.secret=qcloud666 初始化数据库 导入初始化数据： 1mongorestore -h localhost -d leanote --dir /home/leanote/mongodb_backup/leanote_install_data/ 启动 Leanote 服务 1nohup /bin/bash /home/leanote/bin/run.sh &gt;&gt; /var/log/leanote.log 2&gt;&amp;1 &amp; 3. 访问 Leanote 云笔记本 通过访问 http://yourip:9000 或 http://yourdomain.com:9000就可以了使用自己的笔记本。 初始化账户： admin 初始化密码： abc123 请务必修改密码已确保使用安全！","raw":"---\ntitle: 基于CentOS搭建个人Leanote云笔记本\ndate: 2017-10-17 22:11:11\ntags: linux leanote\n---\nLeanote 依赖 MongoDB 作为数据存储，下面开始安装MongoDB：\n**1. 下载启动 MongoDB**\n\n- 下载 MongoDB\n\n\t进入 /home 目录，并下载 MongoDB：\n\t```\ncd /home\n\t```\n\t下载源码：\n\t```\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz\n\t```\n\t解压缩源码包：\n\t```\ntar -xzvf mongodb-linux-x86_64-3.0.1.tgz\n\t```\n\n- 创建用于存储的文件夹目录\n\t```\nmkdir -p /data/db\n\t```\n\t配置 MongoDB 的环境变量：\n\n\t编辑 `/etc/profile`，在文件末尾追加以下配置：\n\t```\nexport PATH=$PATH:/home/mongodb-linux-x86_64-3.0.1/bin\n\t```\n\t并执行以下命令，使环境变量生效。\n\t```\nsource /etc/profile\n\t```\n\t\n- 启动 MongoDB（启动需要 3 ~ 5 分钟，耐心等待）：\n\t```\nmongod --bind_ip localhost --port 27017 --dbpath /data/db/ --logpath=/var/log/mongod.log --fork\n\t```\n\n**2. 安装 Leanote**\n\n- 下载 Leanote\n\n\t先进入 /home 目录\n\t```\ncd /home\n\t```\n\t下载 Leanote 源码\n\t```\nwget https://iweb.dl.sourceforge.net/project/leanote-bin/2.4/leanote-linux-amd64-v2.4.bin.tar.gz\n\t```\n\t\n- 解开压缩包：\n\t```\ntar -zxvf leanote-linux-amd64-v2.4.bin.tar.gz\n\t```\n\n- 编辑 Leanote 配置文件\n\n\t编辑文件 `app.conf`，在文件中找到 `app.secret=` 项，并修改为如下内容：\n\t```\napp.secret=qcloud666\n\t```\n\n- 初始化数据库\n\n\t导入初始化数据：\n\t```\nmongorestore -h localhost -d leanote --dir /home/leanote/mongodb_backup/leanote_install_data/\n\t```\n\n- 启动 Leanote 服务\n\t```\nnohup /bin/bash /home/leanote/bin/run.sh >> /var/log/leanote.log 2>&1 &\n\t```\n\n**3. 访问 Leanote 云笔记本**\n\n通过访问 http://yourip:9000 或 http://yourdomain.com:9000就可以了使用自己的笔记本。\n\n- 初始化账户： admin\n\n- 初始化密码： abc123\n\n请务必修改密码已确保使用安全！","content":"<p>Leanote 依赖 MongoDB 作为数据存储，下面开始安装MongoDB：<br><strong>1. 下载启动 MongoDB</strong></p>\n<ul>\n<li><p>下载 MongoDB</p>\n<p>  进入 /home 目录，并下载 MongoDB：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /home</div></pre></td></tr></table></figure>\n<p>  下载源码：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz</div></pre></td></tr></table></figure>\n<p>  解压缩源码包：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -xzvf mongodb-linux-x86_64-3.0.1.tgz</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建用于存储的文件夹目录</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /data/db</div></pre></td></tr></table></figure>\n<p>  配置 MongoDB 的环境变量：</p>\n<p>  编辑 <code>/etc/profile</code>，在文件末尾追加以下配置：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=$PATH:/home/mongodb-linux-x86_64-3.0.1/bin</div></pre></td></tr></table></figure>\n<p>  并执行以下命令，使环境变量生效。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source /etc/profile</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>启动 MongoDB（启动需要 3 ~ 5 分钟，耐心等待）：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongod --bind_ip localhost --port 27017 --dbpath /data/db/ --logpath=/var/log/mongod.log --fork</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2. 安装 Leanote</strong></p>\n<ul>\n<li><p>下载 Leanote</p>\n<p>  先进入 /home 目录</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /home</div></pre></td></tr></table></figure>\n<p>  下载 Leanote 源码</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://iweb.dl.sourceforge.net/project/leanote-bin/2.4/leanote-linux-amd64-v2.4.bin.tar.gz</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>解开压缩包：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf leanote-linux-amd64-v2.4.bin.tar.gz</div></pre></td></tr></table></figure>\n</li>\n<li><p>编辑 Leanote 配置文件</p>\n<p>  编辑文件 <code>app.conf</code>，在文件中找到 <code>app.secret=</code> 项，并修改为如下内容：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.secret=qcloud666</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化数据库</p>\n<p>  导入初始化数据：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongorestore -h localhost -d leanote --dir /home/leanote/mongodb_backup/leanote_install_data/</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动 Leanote 服务</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup /bin/bash /home/leanote/bin/run.sh &gt;&gt; /var/log/leanote.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>3. 访问 Leanote 云笔记本</strong></p>\n<p>通过访问 <a href=\"http://yourip:9000\" target=\"_blank\" rel=\"external\">http://yourip:9000</a> 或 <a href=\"http://yourdomain.com:9000就可以了使用自己的笔记本。\" target=\"_blank\" rel=\"external\">http://yourdomain.com:9000就可以了使用自己的笔记本。</a></p>\n<ul>\n<li><p>初始化账户： admin</p>\n</li>\n<li><p>初始化密码： abc123</p>\n</li>\n</ul>\n<p>请务必修改密码已确保使用安全！</p>\n","updated":"2017-10-18T03:36:08.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux leanote","slug":"linux-leanote","permalink":"http://hexo.zhazhapan.com/tags/linux-leanote/"}]},{"title":"基于CentOS搭建个人网盘","date":"2017-10-16T14:48:07.000Z","path":"2017/10/16/基于CentOS搭建个人网盘/","text":"1. 安装 Seafile 安装依赖环境 使用 yum 安装 Python 及 MySQL： 1yum install python python-setuptools python-imaging python-ldap python-memcached MySQL-python mariadb mariadb-server 启动 MariaDB 服务： 12sudo systemctl start mariadb.servicesudo systemctl enable mariadb.service 配置 MySQL： 1/usr/bin/mysql_secure_installation 配置过程输入参数如截图所示，其中 New password 和 Re-enter new password 字段都设置为 QcE7gi1g（最好自己定义一个密码），其他字段一路回车使用默认值： 安装 Seafile 下载 Seafile 安装包： 1wget https://mc.qcloudimg.com/static/archive/3d8addbe52be88df4f6139ec7e35b453/seafile-server_5.1.4_x86-64.tar.gz 解压 Seafile 安装包： 1tar -zxvf seafile-server_5.1.4_x86-64.tar.gz 安装 Seafile 安装包： 12345sudo mkdir -p /opt/seafile/installedsudo mv seafile-server_5.1.4_x86-64.tar.gz /opt/seafile/installedsudo mv seafile-server-5.1.4/ /opt/seafilecd /opt/seafile/seafile-server-5.1.4sudo ./setup-seafile-mysql.sh 执行过程输入参数如截图所示，[server name] 字段输入 Seafile，[ This server&#39;s ip or domain ] 字段输入你的域名或服务器IP，[ 1 or 2 ] 字段选择 1，mysql 的 [ root password ] 字段输入 QcE7gi1g（这个是上面步骤你设置的密码），其他字段一路回车使用默认值： 2. 启动 Seafile 及修改防火墙规则 启动 Seafile 12sudo ./seafile.sh startsudo ./seahub.sh start 执行过程输入参数如截图所示，其中 [ admin email ] 设置为您登录网盘的帐号，如 admin@qcloudlab.wang，[ admin password ] 和 [ admin password again ] 设置为登录网盘的密码，如 admin_QcE7gi1g（最好自己定义一个密码）： 修改防火墙规则 123sudo firewall-cmd --zone=public --permanent --add-port=8082/tcpsudo firewall-cmd --zone=public --permanent --add-port=8000/tcpsudo firewall-cmd --reload","raw":"---\ntitle: 基于CentOS搭建个人网盘\ndate: 2017-10-16 22:48:07\ntags: linux seafile\n---\n**1. 安装 Seafile**\n\n- 安装依赖环境\n\n\t使用 yum 安装 Python 及 MySQL：\n\t```\nyum install python python-setuptools python-imaging python-ldap python-memcached MySQL-python mariadb mariadb-server\n\t```\n\t启动 MariaDB 服务：\n\t```\nsudo systemctl start mariadb.service\nsudo systemctl enable mariadb.service\n\t```\n\t配置 MySQL：\n\t```\n/usr/bin/mysql_secure_installation\n\t```\n\t配置过程输入参数如截图所示，其中 `New password` 和 `Re-enter new password` 字段都设置为 `QcE7gi1g`（最好自己定义一个密码），其他字段一路回车使用默认值：\n\n\t![图片](https://mc.qcloudimg.com/static/img/a1f15db10f82310eca74a3b8e32ae608/1.png)\n\n- 安装 Seafile\n\n\t下载 Seafile 安装包：\n\t```\nwget https://mc.qcloudimg.com/static/archive/3d8addbe52be88df4f6139ec7e35b453/seafile-server_5.1.4_x86-64.tar.gz\n\t```\n\t解压 Seafile 安装包：\n\t```\ntar -zxvf seafile-server_5.1.4_x86-64.tar.gz\n\t```\n\t安装 Seafile 安装包：\n\t```\nsudo mkdir -p /opt/seafile/installed\nsudo mv seafile-server_5.1.4_x86-64.tar.gz /opt/seafile/installed\nsudo mv seafile-server-5.1.4/ /opt/seafile\ncd /opt/seafile/seafile-server-5.1.4\nsudo ./setup-seafile-mysql.sh\n\t```\n\t执行过程输入参数如截图所示，`[server name]` 字段输入 `Seafile`，`[ This server's ip or domain ]` 字段输入你的域名或服务器IP，`[ 1 or 2 ]` 字段选择 `1`，mysql 的 `[ root password ]` 字段输入 `QcE7gi1g`（这个是上面步骤你设置的密码），其他字段一路回车使用默认值：\n\n\t![这里写图片描述](https://mc.qcloudimg.com/static/img/de2fb7e13f26794671aec59bcd0c9165/1.png)\n\n**2. 启动 Seafile 及修改防火墙规则**\n\n- 启动 Seafile\n\n\t```\nsudo ./seafile.sh start\nsudo ./seahub.sh start\n\t```\n\t执行过程输入参数如截图所示，其中 `[ admin email ]` 设置为您登录网盘的帐号，如 `admin@qcloudlab.wang`，`[ admin password ]` 和 `[ admin password again ]` 设置为登录网盘的密码，如 `admin_QcE7gi1g`（最好自己定义一个密码）：\n\n\t![这里写图片描述](https://mc.qcloudimg.com/static/img/d243d5763695b4d926e9d7fdd0e0e924/1.png)\n\n- 修改防火墙规则\n\n\t```\nsudo firewall-cmd --zone=public --permanent --add-port=8082/tcp\nsudo firewall-cmd --zone=public --permanent --add-port=8000/tcp\nsudo firewall-cmd --reload\n\t```","content":"<p><strong>1. 安装 Seafile</strong></p>\n<ul>\n<li><p>安装依赖环境</p>\n<p>  使用 yum 安装 Python 及 MySQL：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install python python-setuptools python-imaging python-ldap python-memcached MySQL-python mariadb mariadb-server</div></pre></td></tr></table></figure>\n<p>  启动 MariaDB 服务：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo systemctl start mariadb.service</div><div class=\"line\">sudo systemctl enable mariadb.service</div></pre></td></tr></table></figure>\n<p>  配置 MySQL：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/mysql_secure_installation</div></pre></td></tr></table></figure>\n<p>  配置过程输入参数如截图所示，其中 <code>New password</code> 和 <code>Re-enter new password</code> 字段都设置为 <code>QcE7gi1g</code>（最好自己定义一个密码），其他字段一路回车使用默认值：</p>\n<p>  <img src=\"https://mc.qcloudimg.com/static/img/a1f15db10f82310eca74a3b8e32ae608/1.png\" alt=\"图片\"></p>\n</li>\n<li><p>安装 Seafile</p>\n<p>  下载 Seafile 安装包：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://mc.qcloudimg.com/static/archive/3d8addbe52be88df4f6139ec7e35b453/seafile-server_5.1.4_x86-64.tar.gz</div></pre></td></tr></table></figure>\n<p>  解压 Seafile 安装包：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf seafile-server_5.1.4_x86-64.tar.gz</div></pre></td></tr></table></figure>\n<p>  安装 Seafile 安装包：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkdir -p /opt/seafile/installed</div><div class=\"line\">sudo mv seafile-server_5.1.4_x86-64.tar.gz /opt/seafile/installed</div><div class=\"line\">sudo mv seafile-server-5.1.4/ /opt/seafile</div><div class=\"line\">cd /opt/seafile/seafile-server-5.1.4</div><div class=\"line\">sudo ./setup-seafile-mysql.sh</div></pre></td></tr></table></figure>\n<p>  执行过程输入参数如截图所示，<code>[server name]</code> 字段输入 <code>Seafile</code>，<code>[ This server&#39;s ip or domain ]</code> 字段输入你的域名或服务器IP，<code>[ 1 or 2 ]</code> 字段选择 <code>1</code>，mysql 的 <code>[ root password ]</code> 字段输入 <code>QcE7gi1g</code>（这个是上面步骤你设置的密码），其他字段一路回车使用默认值：</p>\n<p>  <img src=\"https://mc.qcloudimg.com/static/img/de2fb7e13f26794671aec59bcd0c9165/1.png\" alt=\"这里写图片描述\"></p>\n</li>\n</ul>\n<p><strong>2. 启动 Seafile 及修改防火墙规则</strong></p>\n<ul>\n<li><p>启动 Seafile</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ./seafile.sh start</div><div class=\"line\">sudo ./seahub.sh start</div></pre></td></tr></table></figure>\n<p>  执行过程输入参数如截图所示，其中 <code>[ admin email ]</code> 设置为您登录网盘的帐号，如 <code>admin@qcloudlab.wang</code>，<code>[ admin password ]</code> 和 <code>[ admin password again ]</code> 设置为登录网盘的密码，如 <code>admin_QcE7gi1g</code>（最好自己定义一个密码）：</p>\n<p>  <img src=\"https://mc.qcloudimg.com/static/img/d243d5763695b4d926e9d7fdd0e0e924/1.png\" alt=\"这里写图片描述\"></p>\n</li>\n<li><p>修改防火墙规则</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo firewall-cmd --zone=public --permanent --add-port=8082/tcp</div><div class=\"line\">sudo firewall-cmd --zone=public --permanent --add-port=8000/tcp</div><div class=\"line\">sudo firewall-cmd --reload</div></pre></td></tr></table></figure></li>\n</ul>\n","updated":"2017-10-18T03:35:58.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux seafile","slug":"linux-seafile","permalink":"http://hexo.zhazhapan.com/tags/linux-seafile/"}]},{"title":"基于CentOS搭建WordPress个人博客","date":"2017-10-16T10:44:36.000Z","path":"2017/10/16/基于CentOS搭建WordPress个人博客/","text":"1. 准备 LNMP 环境 LNMP 是 Linux、Nginx、MySQL 和 PHP 的缩写，是 WordPress 博客系统依赖的基础运行环境。我们先来准备 LNMP 环境 安装 Nginx 使用 yum 安装 Nginx： 1yum install nginx -y 修改 /etc/nginx/conf.d/default.conf，去除对 IPv6 地址的监听，可参考下面的示例： 123456789101112131415161718192021server &#123; listen 80 default_server; # listen [::]:80 default_server; server_name _; root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125;&#125; 修改完成后，启动 Nginx： 1nginx 此时，可访问云服务器外网 HTTP 服务（http://yourdomain.com）来确认是否已经安装成功。 将 Nginx 设置为开机自动启动： 1chkconfig nginx on 安装 MySQL 使用 yum 安装 MySQL： 1yum install mysql-server -y 安装完成后，启动 MySQL 服务： 1service mysqld restart 设置 MySQL 账户 root 密码： 1/usr/bin/mysqladmin -u root password &apos;MyPas$word4Word_Press&apos; 将 MySQL 设置为开机自动启动： 1chkconfig mysqld on 安装 PHP 使用 yum 安装 PHP： 1yum install php-fpm php-mysql -y 安装之后，启动 PHP-FPM 进程： 1service php-fpm start 启动之后，可以使用下面的命令查看 PHP-FPM 进程监听哪个端口 1netstat -nlpt | grep php-fpm 把 PHP-FPM 也设置成开机自动启动： 1chkconfig php-fpm on 2. 安装并配置 WordPress 安装 WordPress 配置好 LNMP 环境后，继续使用 yum 来安装 WordPress： 1yum install wordpress -y 安装完成后，就可以在 /usr/share/wordpress 看到 WordPress 的源代码了。 由于上面的安装方法默认安装的是英文版，所以我们还要下载中文语言包，如果不需要中文安装可跳过此步骤 1234wget https://cn.wordpress.org/wordpress-4.8.1-zh_CN.tar.gztar -zxvf wordpress*mv -r wordpress/wp-content/languages /usr/share/wordpress/wp-contentrm -rf wordpress* 配置数据库 进入 MySQL： 1mysql -uroot --password=&apos;MyPas$word4Word_Press&apos; 为 WordPress 创建一个数据库： 1CREATE DATABASE wordpress; MySQL 部分设置完了，我们退出 MySQL 环境： 1exit 把上述的 DB 配置同步到 WordPress 的配置文件 `wp-config.php` 中，可参考下面的配置： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&lt;?php/** * The base configuration for WordPress * * The wp-config.php creation script uses this file during the * installation. You don&apos;t have to use the web site, you can * copy this file to &quot;wp-config.php&quot; and fill in the values. * * This file contains the following configurations: * * * MySQL settings * * Secret keys * * Database table prefix * * ABSPATH * * @link https://codex.wordpress.org/Editing_wp-config.php * * @package WordPress */// ** MySQL settings - You can get this info from your web host ** ///** The name of the database for WordPress */define(&apos;DB_NAME&apos;, &apos;wordpress&apos;);/** MySQL database username */define(&apos;DB_USER&apos;, &apos;root&apos;);/** MySQL database password */define(&apos;DB_PASSWORD&apos;, &apos;MyPas$word4Word_Press&apos;);/** MySQL hostname */define(&apos;DB_HOST&apos;, &apos;localhost&apos;);/** Database Charset to use in creating database tables. */define(&apos;DB_CHARSET&apos;, &apos;utf8&apos;);/** The Database Collate type. Don&apos;t change this if in doubt. */define(&apos;DB_COLLATE&apos;, &apos;&apos;);define(&apos;WPLANG&apos;, &apos;zh_CN&apos;);/**#@+ * Authentication Unique Keys and Salts. * * Change these to different unique phrases! * You can generate these using the &#123;@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service&#125; * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again. * * @since 2.6.0 */define(&apos;AUTH_KEY&apos;, &apos;put your unique phrase here&apos;);define(&apos;SECURE_AUTH_KEY&apos;, &apos;put your unique phrase here&apos;);define(&apos;LOGGED_IN_KEY&apos;, &apos;put your unique phrase here&apos;);define(&apos;NONCE_KEY&apos;, &apos;put your unique phrase here&apos;);define(&apos;AUTH_SALT&apos;, &apos;put your unique phrase here&apos;);define(&apos;SECURE_AUTH_SALT&apos;, &apos;put your unique phrase here&apos;);define(&apos;LOGGED_IN_SALT&apos;, &apos;put your unique phrase here&apos;);define(&apos;NONCE_SALT&apos;, &apos;put your unique phrase here&apos;);/**#@-*//** * WordPress Database Table prefix. * * You can have multiple installations in one database if you give each * a unique prefix. Only numbers, letters, and underscores please! */$table_prefix = &apos;wp_&apos;;/** * See http://make.wordpress.org/core/2013/10/25/the-definitive-guide-to-disabling-auto-updates-in-wordpress-3-7 *//* Disable all file change, as RPM base installation are read-only */define(&apos;DISALLOW_FILE_MODS&apos;, true);/* Disable automatic updater, in case you want to allow above FILE_MODS for plugins, themes, ... */define(&apos;AUTOMATIC_UPDATER_DISABLED&apos;, true);/* Core update is always disabled, WP_AUTO_UPDATE_CORE value is ignore *//** * For developers: WordPress debugging mode. * * Change this to true to enable the display of notices during development. * It is strongly recommended that plugin and theme developers use WP_DEBUG * in their development environments. * * For information on other constants that can be used for debugging, * visit the Codex. * * @link https://codex.wordpress.org/Debugging_in_WordPress */define(&apos;WP_DEBUG&apos;, false);/* That&apos;s all, stop editing! Happy blogging. *//** Absolute path to the WordPress directory. */if ( !defined(&apos;ABSPATH&apos;) ) define(&apos;ABSPATH&apos;, &apos;/usr/share/wordpress&apos;);/** Sets up WordPress vars and included files. */require_once(ABSPATH . &apos;wp-settings.php&apos;); 配置 Nginx WordPress 已经安装完毕，我们配置 Nginx 把请求转发给 PHP-FPM 来处理 首先，重命名默认的配置文件： 12cd /etc/nginx/conf.d/mv default.conf defaut.conf.bak 在 /etc/nginx/conf.d 创建 wordpress.conf 配置，参考下面的内容： 123456789101112131415server &#123; listen 80; root /usr/share/wordpress; location / &#123; index index.php index.html index.htm; try_files $uri $uri/ /index.php index.php; &#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 location ~ .php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125;&#125; 配置后，通知 Nginx 进程重新加载： 1nginx -s reload 大功告成 恭喜，您的 WordPress 博客已经部署完成，您可以通过浏览器访问博客查看效果。博客访问地址：http://yourdomain.com/wp-admin/install.php","raw":"---\ntitle: 基于CentOS搭建WordPress个人博客\ndate: 2017-10-16 18:44:36\ntags: linux wordpress\n---\n **1. 准备 LNMP 环境**\n\nLNMP 是 Linux、Nginx、MySQL 和 PHP 的缩写，是 WordPress 博客系统依赖的基础运行环境。我们先来准备 LNMP 环境\n\n- 安装 Nginx\n\n\t使用 `yum` 安装 Nginx：\n\t```\nyum install nginx -y\n\t```\n\t修改 `/etc/nginx/conf.d/default.conf`，去除对 IPv6 地址的监听，可参考下面的示例：\n\t```\n\tserver {\n\t    listen       80 default_server;\n\t    # listen       [::]:80 default_server;\n\t    server_name  _;\n\t    root         /usr/share/nginx/html;\n\t\n\t    # Load configuration files for the default server block.\n\t    include /etc/nginx/default.d/*.conf;\n\t\n\t    location / {\n\t    }\n\t\n\t    error_page 404 /404.html;\n\t        location = /40x.html {\n\t    }\n\t\n\t    error_page 500 502 503 504 /50x.html;\n\t        location = /50x.html {\n\t    }\n\t\n\t}\n\t```\n\t修改完成后，启动 Nginx：\n\t```\nnginx\n\t```\n\t此时，可访问云服务器外网 HTTP 服务（http://yourdomain.com）来确认是否已经安装成功。\n\n\t将 Nginx 设置为开机自动启动：\n\t```\nchkconfig nginx on\n\t```\n\n- 安装 MySQL\n\n\t使用 `yum` 安装 MySQL：\n\t```\nyum install mysql-server -y\n\t```\n\t安装完成后，启动 MySQL 服务：\n\t```\nservice mysqld restart\n\t```\n\t设置 MySQL 账户 `root` 密码：\n\t```\n/usr/bin/mysqladmin -u root password 'MyPas$word4Word_Press'\n\t```\n\t将 MySQL 设置为开机自动启动：\n\t```\nchkconfig mysqld on\n\t```\n\n- 安装 PHP\n\n\t使用 yum 安装 PHP：\n\t```\nyum install php-fpm php-mysql -y\n\t```\n\t安装之后，启动 PHP-FPM 进程：\n\t```\nservice php-fpm start\n\t```\n\t启动之后，可以使用下面的命令查看 PHP-FPM 进程监听哪个端口 \n\t```\nnetstat -nlpt | grep php-fpm\n\t```\n\t把 PHP-FPM 也设置成开机自动启动：\n\t```\nchkconfig php-fpm on\n\t```\n\n**2. 安装并配置 WordPress**\n\n- 安装 WordPress\n\n\t配置好 LNMP 环境后，继续使用 `yum` 来安装 WordPress：\n\t```\nyum install wordpress -y\n\t```\n\t安装完成后，就可以在 `/usr/share/wordpress` 看到 WordPress 的源代码了。\n\n\t由于上面的安装方法默认安装的是英文版，所以我们还要下载中文语言包，如果不需要中文安装可跳过此步骤\n\t```\nwget https://cn.wordpress.org/wordpress-4.8.1-zh_CN.tar.gz\ntar -zxvf wordpress*\nmv -r wordpress/wp-content/languages /usr/share/wordpress/wp-content\nrm -rf wordpress*\n\t```\n\n- 配置数据库\n\n\t进入 MySQL：\n\t```\nmysql -uroot --password='MyPas$word4Word_Press'\n\t```\n\t为 WordPress 创建一个数据库：\n\t```\nCREATE DATABASE wordpress;\n\t```\nMySQL 部分设置完了，我们退出 MySQL 环境：\n\t```\nexit\n\t```\n\t把上述的 DB 配置同步到 WordPress 的配置文件 `wp-config.php` 中，可参考下面的配置：\n\t```\n\t<?php\n\t/**\n\t * The base configuration for WordPress\n\t *\n\t * The wp-config.php creation script uses this file during the\n\t * installation. You don't have to use the web site, you can\n\t * copy this file to \"wp-config.php\" and fill in the values.\n\t *\n\t * This file contains the following configurations:\n\t *\n\t * * MySQL settings\n\t * * Secret keys\n\t * * Database table prefix\n\t * * ABSPATH\n\t *\n\t * @link https://codex.wordpress.org/Editing_wp-config.php\n\t *\n\t * @package WordPress\n\t */\n\t\n\t// ** MySQL settings - You can get this info from your web host ** //\n\t/** The name of the database for WordPress */\n\tdefine('DB_NAME', 'wordpress');\n\t\n\t/** MySQL database username */\n\tdefine('DB_USER', 'root');\n\t\n\t/** MySQL database password */\n\tdefine('DB_PASSWORD', 'MyPas$word4Word_Press');\n\t\n\t/** MySQL hostname */\n\tdefine('DB_HOST', 'localhost');\n\t\n\t/** Database Charset to use in creating database tables. */\n\tdefine('DB_CHARSET', 'utf8');\n\t\n\t/** The Database Collate type. Don't change this if in doubt. */\n\tdefine('DB_COLLATE', '');\n\t\n\tdefine('WPLANG', 'zh_CN');\n\t\n\t/**#@+\n\t * Authentication Unique Keys and Salts.\n\t *\n\t * Change these to different unique phrases!\n\t * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}\n\t * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.\n\t *\n\t * @since 2.6.0\n\t */\n\tdefine('AUTH_KEY',         'put your unique phrase here');\n\tdefine('SECURE_AUTH_KEY',  'put your unique phrase here');\n\tdefine('LOGGED_IN_KEY',    'put your unique phrase here');\n\tdefine('NONCE_KEY',        'put your unique phrase here');\n\tdefine('AUTH_SALT',        'put your unique phrase here');\n\tdefine('SECURE_AUTH_SALT', 'put your unique phrase here');\n\tdefine('LOGGED_IN_SALT',   'put your unique phrase here');\n\tdefine('NONCE_SALT',       'put your unique phrase here');\n\t\n\t/**#@-*/\n\t\n\t/**\n\t * WordPress Database Table prefix.\n\t *\n\t * You can have multiple installations in one database if you give each\n\t * a unique prefix. Only numbers, letters, and underscores please!\n\t */\n\t$table_prefix  = 'wp_';\n\t\n\t/**\n\t * See http://make.wordpress.org/core/2013/10/25/the-definitive-guide-to-disabling-auto-updates-in-wordpress-3-7\n\t */\n\t\n\t/* Disable all file change, as RPM base installation are read-only */\n\tdefine('DISALLOW_FILE_MODS', true);\n\t\n\t/* Disable automatic updater, in case you want to allow\n\t   above FILE_MODS for plugins, themes, ... */\n\tdefine('AUTOMATIC_UPDATER_DISABLED', true);\n\t\n\t/* Core update is always disabled, WP_AUTO_UPDATE_CORE value is ignore */\n\t\n\t/**\n\t * For developers: WordPress debugging mode.\n\t *\n\t * Change this to true to enable the display of notices during development.\n\t * It is strongly recommended that plugin and theme developers use WP_DEBUG\n\t * in their development environments.\n\t *\n\t * For information on other constants that can be used for debugging,\n\t * visit the Codex.\n\t *\n\t * @link https://codex.wordpress.org/Debugging_in_WordPress\n\t */\n\tdefine('WP_DEBUG', false);\n\t\n\t/* That's all, stop editing! Happy blogging. */\n\t\n\t/** Absolute path to the WordPress directory. */\n\tif ( !defined('ABSPATH') )\n\t    define('ABSPATH', '/usr/share/wordpress');\n\t\n\t/** Sets up WordPress vars and included files. */\n\trequire_once(ABSPATH . 'wp-settings.php');\n\t```\n- 配置 Nginx\n\n\tWordPress 已经安装完毕，我们配置 Nginx 把请求转发给 PHP-FPM 来处理\n\n\t首先，重命名默认的配置文件：\n\t```\ncd /etc/nginx/conf.d/\nmv default.conf defaut.conf.bak\n\t```\n\t在 `/etc/nginx/conf.d` 创建 `wordpress.conf` 配置，参考下面的内容：\n\t```\n\tserver {\n\t    listen 80;\n\t    root /usr/share/wordpress;\n\t    location / {\n\t        index index.php index.html index.htm;\n\t        try_files $uri $uri/ /index.php index.php;\n\t    }\n\t    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n\t    location ~ .php$ {\n\t        fastcgi_pass   127.0.0.1:9000;\n\t        fastcgi_index  index.php;\n\t        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n\t        include        fastcgi_params;\n\t    }\n\t}\n\t```\n\t配置后，通知 Nginx 进程重新加载：\n\t```\nnginx -s reload\n\t```\n\n- 大功告成\n\n\t恭喜，您的 WordPress 博客已经部署完成，您可以通过浏览器访问博客查看效果。博客访问地址：http://yourdomain.com/wp-admin/install.php","content":"<p> <strong>1. 准备 LNMP 环境</strong></p>\n<p>LNMP 是 Linux、Nginx、MySQL 和 PHP 的缩写，是 WordPress 博客系统依赖的基础运行环境。我们先来准备 LNMP 环境</p>\n<ul>\n<li><p>安装 Nginx</p>\n<p>  使用 <code>yum</code> 安装 Nginx：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install nginx -y</div></pre></td></tr></table></figure>\n<p>  修改 <code>/etc/nginx/conf.d/default.conf</code>，去除对 IPv6 地址的监听，可参考下面的示例：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen       80 default_server;</div><div class=\"line\">    # listen       [::]:80 default_server;</div><div class=\"line\">    server_name  _;</div><div class=\"line\">    root         /usr/share/nginx/html;</div><div class=\"line\"></div><div class=\"line\">    # Load configuration files for the default server block.</div><div class=\"line\">    include /etc/nginx/default.d/*.conf;</div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    error_page 404 /404.html;</div><div class=\"line\">        location = /40x.html &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    error_page 500 502 503 504 /50x.html;</div><div class=\"line\">        location = /50x.html &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  修改完成后，启动 Nginx：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx</div></pre></td></tr></table></figure>\n<p>  此时，可访问云服务器外网 HTTP 服务（<a href=\"http://yourdomain.com）来确认是否已经安装成功。\" target=\"_blank\" rel=\"external\">http://yourdomain.com）来确认是否已经安装成功。</a></p>\n<p>  将 Nginx 设置为开机自动启动：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig nginx on</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装 MySQL</p>\n<p>  使用 <code>yum</code> 安装 MySQL：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install mysql-server -y</div></pre></td></tr></table></figure>\n<p>  安装完成后，启动 MySQL 服务：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service mysqld restart</div></pre></td></tr></table></figure>\n<p>  设置 MySQL 账户 <code>root</code> 密码：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/mysqladmin -u root password &apos;MyPas$word4Word_Press&apos;</div></pre></td></tr></table></figure>\n<p>  将 MySQL 设置为开机自动启动：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig mysqld on</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装 PHP</p>\n<p>  使用 yum 安装 PHP：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install php-fpm php-mysql -y</div></pre></td></tr></table></figure>\n<p>  安装之后，启动 PHP-FPM 进程：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service php-fpm start</div></pre></td></tr></table></figure>\n<p>  启动之后，可以使用下面的命令查看 PHP-FPM 进程监听哪个端口 </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">netstat -nlpt | grep php-fpm</div></pre></td></tr></table></figure>\n<p>  把 PHP-FPM 也设置成开机自动启动：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig php-fpm on</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>2. 安装并配置 WordPress</strong></p>\n<ul>\n<li><p>安装 WordPress</p>\n<p>  配置好 LNMP 环境后，继续使用 <code>yum</code> 来安装 WordPress：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install wordpress -y</div></pre></td></tr></table></figure>\n<p>  安装完成后，就可以在 <code>/usr/share/wordpress</code> 看到 WordPress 的源代码了。</p>\n<p>  由于上面的安装方法默认安装的是英文版，所以我们还要下载中文语言包，如果不需要中文安装可跳过此步骤</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://cn.wordpress.org/wordpress-4.8.1-zh_CN.tar.gz</div><div class=\"line\">tar -zxvf wordpress*</div><div class=\"line\">mv -r wordpress/wp-content/languages /usr/share/wordpress/wp-content</div><div class=\"line\">rm -rf wordpress*</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置数据库</p>\n<p>  进入 MySQL：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -uroot --password=&apos;MyPas$word4Word_Press&apos;</div></pre></td></tr></table></figure>\n<p>  为 WordPress 创建一个数据库：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE DATABASE wordpress;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>MySQL 部分设置完了，我们退出 MySQL 环境：<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">exit</div></pre></td></tr></table></figure></p>\n<pre><code>把上述的 DB 配置同步到 WordPress 的配置文件 `wp-config.php` 中，可参考下面的配置：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">/**</div><div class=\"line\"> * The base configuration for WordPress</div><div class=\"line\"> *</div><div class=\"line\"> * The wp-config.php creation script uses this file during the</div><div class=\"line\"> * installation. You don&apos;t have to use the web site, you can</div><div class=\"line\"> * copy this file to &quot;wp-config.php&quot; and fill in the values.</div><div class=\"line\"> *</div><div class=\"line\"> * This file contains the following configurations:</div><div class=\"line\"> *</div><div class=\"line\"> * * MySQL settings</div><div class=\"line\"> * * Secret keys</div><div class=\"line\"> * * Database table prefix</div><div class=\"line\"> * * ABSPATH</div><div class=\"line\"> *</div><div class=\"line\"> * @link https://codex.wordpress.org/Editing_wp-config.php</div><div class=\"line\"> *</div><div class=\"line\"> * @package WordPress</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">// ** MySQL settings - You can get this info from your web host ** //</div><div class=\"line\">/** The name of the database for WordPress */</div><div class=\"line\">define(&apos;DB_NAME&apos;, &apos;wordpress&apos;);</div><div class=\"line\"></div><div class=\"line\">/** MySQL database username */</div><div class=\"line\">define(&apos;DB_USER&apos;, &apos;root&apos;);</div><div class=\"line\"></div><div class=\"line\">/** MySQL database password */</div><div class=\"line\">define(&apos;DB_PASSWORD&apos;, &apos;MyPas$word4Word_Press&apos;);</div><div class=\"line\"></div><div class=\"line\">/** MySQL hostname */</div><div class=\"line\">define(&apos;DB_HOST&apos;, &apos;localhost&apos;);</div><div class=\"line\"></div><div class=\"line\">/** Database Charset to use in creating database tables. */</div><div class=\"line\">define(&apos;DB_CHARSET&apos;, &apos;utf8&apos;);</div><div class=\"line\"></div><div class=\"line\">/** The Database Collate type. Don&apos;t change this if in doubt. */</div><div class=\"line\">define(&apos;DB_COLLATE&apos;, &apos;&apos;);</div><div class=\"line\"></div><div class=\"line\">define(&apos;WPLANG&apos;, &apos;zh_CN&apos;);</div><div class=\"line\"></div><div class=\"line\">/**#@+</div><div class=\"line\"> * Authentication Unique Keys and Salts.</div><div class=\"line\"> *</div><div class=\"line\"> * Change these to different unique phrases!</div><div class=\"line\"> * You can generate these using the &#123;@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service&#125;</div><div class=\"line\"> * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.</div><div class=\"line\"> *</div><div class=\"line\"> * @since 2.6.0</div><div class=\"line\"> */</div><div class=\"line\">define(&apos;AUTH_KEY&apos;,         &apos;put your unique phrase here&apos;);</div><div class=\"line\">define(&apos;SECURE_AUTH_KEY&apos;,  &apos;put your unique phrase here&apos;);</div><div class=\"line\">define(&apos;LOGGED_IN_KEY&apos;,    &apos;put your unique phrase here&apos;);</div><div class=\"line\">define(&apos;NONCE_KEY&apos;,        &apos;put your unique phrase here&apos;);</div><div class=\"line\">define(&apos;AUTH_SALT&apos;,        &apos;put your unique phrase here&apos;);</div><div class=\"line\">define(&apos;SECURE_AUTH_SALT&apos;, &apos;put your unique phrase here&apos;);</div><div class=\"line\">define(&apos;LOGGED_IN_SALT&apos;,   &apos;put your unique phrase here&apos;);</div><div class=\"line\">define(&apos;NONCE_SALT&apos;,       &apos;put your unique phrase here&apos;);</div><div class=\"line\"></div><div class=\"line\">/**#@-*/</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * WordPress Database Table prefix.</div><div class=\"line\"> *</div><div class=\"line\"> * You can have multiple installations in one database if you give each</div><div class=\"line\"> * a unique prefix. Only numbers, letters, and underscores please!</div><div class=\"line\"> */</div><div class=\"line\">$table_prefix  = &apos;wp_&apos;;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * See http://make.wordpress.org/core/2013/10/25/the-definitive-guide-to-disabling-auto-updates-in-wordpress-3-7</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">/* Disable all file change, as RPM base installation are read-only */</div><div class=\"line\">define(&apos;DISALLOW_FILE_MODS&apos;, true);</div><div class=\"line\"></div><div class=\"line\">/* Disable automatic updater, in case you want to allow</div><div class=\"line\">   above FILE_MODS for plugins, themes, ... */</div><div class=\"line\">define(&apos;AUTOMATIC_UPDATER_DISABLED&apos;, true);</div><div class=\"line\"></div><div class=\"line\">/* Core update is always disabled, WP_AUTO_UPDATE_CORE value is ignore */</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * For developers: WordPress debugging mode.</div><div class=\"line\"> *</div><div class=\"line\"> * Change this to true to enable the display of notices during development.</div><div class=\"line\"> * It is strongly recommended that plugin and theme developers use WP_DEBUG</div><div class=\"line\"> * in their development environments.</div><div class=\"line\"> *</div><div class=\"line\"> * For information on other constants that can be used for debugging,</div><div class=\"line\"> * visit the Codex.</div><div class=\"line\"> *</div><div class=\"line\"> * @link https://codex.wordpress.org/Debugging_in_WordPress</div><div class=\"line\"> */</div><div class=\"line\">define(&apos;WP_DEBUG&apos;, false);</div><div class=\"line\"></div><div class=\"line\">/* That&apos;s all, stop editing! Happy blogging. */</div><div class=\"line\"></div><div class=\"line\">/** Absolute path to the WordPress directory. */</div><div class=\"line\">if ( !defined(&apos;ABSPATH&apos;) )</div><div class=\"line\">    define(&apos;ABSPATH&apos;, &apos;/usr/share/wordpress&apos;);</div><div class=\"line\"></div><div class=\"line\">/** Sets up WordPress vars and included files. */</div><div class=\"line\">require_once(ABSPATH . &apos;wp-settings.php&apos;);</div></pre></td></tr></table></figure>\n</code></pre><ul>\n<li><p>配置 Nginx</p>\n<p>  WordPress 已经安装完毕，我们配置 Nginx 把请求转发给 PHP-FPM 来处理</p>\n<p>  首先，重命名默认的配置文件：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /etc/nginx/conf.d/</div><div class=\"line\">mv default.conf defaut.conf.bak</div></pre></td></tr></table></figure>\n<p>  在 <code>/etc/nginx/conf.d</code> 创建 <code>wordpress.conf</code> 配置，参考下面的内容：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    root /usr/share/wordpress;</div><div class=\"line\">    location / &#123;</div><div class=\"line\">        index index.php index.html index.htm;</div><div class=\"line\">        try_files $uri $uri/ /index.php index.php;</div><div class=\"line\">    &#125;</div><div class=\"line\">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class=\"line\">    location ~ .php$ &#123;</div><div class=\"line\">        fastcgi_pass   127.0.0.1:9000;</div><div class=\"line\">        fastcgi_index  index.php;</div><div class=\"line\">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class=\"line\">        include        fastcgi_params;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  配置后，通知 Nginx 进程重新加载：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx -s reload</div></pre></td></tr></table></figure>\n</li>\n<li><p>大功告成</p>\n<p>  恭喜，您的 WordPress 博客已经部署完成，您可以通过浏览器访问博客查看效果。博客访问地址：<a href=\"http://yourdomain.com/wp-admin/install.php\" target=\"_blank\" rel=\"external\">http://yourdomain.com/wp-admin/install.php</a></p>\n</li>\n</ul>\n","updated":"2017-10-18T03:37:31.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux wordpress","slug":"linux-wordpress","permalink":"http://hexo.zhazhapan.com/tags/linux-wordpress/"}]},{"title":"基于CentOS搭建搭建FTP文件服务","date":"2017-10-16T09:24:41.000Z","path":"2017/10/16/基于CentOS搭建搭建FTP文件服务/","text":"1. 安装并启动 FTP 服务 安装 VSFTPD 使用 yum 安装 vsftpd： 1yum install vsftpd -y 启动 VSFTPD 安装完成后，启动 FTP 服务： 1service vsftpd start 启动后，可以看到系统已经监听了 21 端口： 1netstat -nltp | grep 21 此时，访问 ftp://yourdomain.com 可浏览机器上的 /var/ftp 目录了。 2. 配置 FTP 权限 目前 FTP 服务登陆允许匿名登陆，也无法区分用户访问，我们需要配置 FTP 访问权限 了解 VSFTP 配置 vsftpd 的配置目录为 /etc/vsftpd，包含下列的配置文件： vsftpd.conf 为主要配置文件 ftpusers 配置禁止访问 FTP 服务器的用户列表 user_list 配置用户访问控制 阻止匿名访问和切换根目录 匿名访问和切换根目录都会给服务器带来安全风险，我们把这两个功能关闭。 编辑 /etc/vsftpd/vsftpd.conf，找到下面两处配置并修改： 12345# 禁用匿名用户anonymous_enable=NO# 禁止切换根目录chroot_local_user=YES 重新启动 FTP 服务 1service vsftpd restart 创建 FTP 用户 创建一个用户 ftpuser ： 1useradd ftpuser 为用户 ftpuser 设置密码 ： 1echo &quot;3oEiU5s7&quot; | passwd ftpuser --stdin 限制该用户仅能通过 FTP 访问 限制用户 ftpuser 只能通过 FTP 访问服务器，而不能直接登录服务器： 1usermod -s /sbin/nologin ftpuser 为用户分配主目录 为用户 ftpuser 创建主目录并约定： /data/ftp 为主目录, 该目录不可上传文件 /data/ftp/pub 文件只能上传到该目录下 1mkdir -p /data/ftp/pub 创建登录欢迎文件 ： 1echo &quot;Welcome to use FTP service.&quot; &gt; /data/ftp/welcome.txt 设置访问权限： 1chmod a-w /data/ftp &amp;&amp; chmod 777 -R /data/ftp/pub 设置为用户的主目录： 1usermod -d /data/ftp ftpuser 完成","raw":"---\ntitle: 基于CentOS搭建搭建FTP文件服务\ndate: 2017-10-16 17:24:41\ntags: linux ftp\n---\n**1. 安装并启动 FTP 服务**\n\n- 安装 VSFTPD\n\n\t使用 `yum` 安装 `vsftpd`：\n\t```\nyum install vsftpd -y\n\t```\n- 启动 VSFTPD\n\n\t安装完成后，启动 FTP 服务：\n\t```\nservice vsftpd start\n\t```\n\t启动后，可以看到系统已经监听了 21 端口：\n\t```\nnetstat -nltp | grep 21\n\t```\n\t此时，访问 ftp://yourdomain.com 可浏览机器上的 /var/ftp 目录了。\n\n**2. 配置 FTP 权限**\n\n目前 FTP 服务登陆允许匿名登陆，也无法区分用户访问，我们需要配置 FTP 访问权限\n\n- 了解 VSFTP 配置\n\n\tvsftpd 的配置目录为 `/etc/vsftpd`，包含下列的配置文件：\n\t- `vsftpd.conf` 为主要配置文件\n\t- `ftpusers` 配置禁止访问 FTP 服务器的用户列表\n\t- `user_list` 配置用户访问控制\n\n- 阻止匿名访问和切换根目录\n\n\t匿名访问和切换根目录都会给服务器带来安全风险，我们把这两个功能关闭。\n\n\t编辑 `/etc/vsftpd/vsftpd.conf`，找到下面两处配置并修改：\n\t```\n\t# 禁用匿名用户\n\tanonymous_enable=NO\n\t\n\t# 禁止切换根目录\n\tchroot_local_user=YES\n\t```\n\t重新启动 FTP 服务\n\t```\nservice vsftpd restart\n\t```\n\n- 创建 FTP 用户\n\n\t创建一个用户 `ftpuser` ：\n\t```\nuseradd ftpuser\n\t```\n\t为用户 `ftpuser` 设置密码 ：\n\t```\necho \"3oEiU5s7\" | passwd ftpuser --stdin\n\t```\n\n- 限制该用户仅能通过 FTP 访问\n\n\t限制用户 `ftpuser` 只能通过 FTP 访问服务器，而不能直接登录服务器：\n\t```\nusermod -s /sbin/nologin ftpuser\n\t```\n\t\n- 为用户分配主目录\n\n\t为用户 `ftpuser` 创建主目录并约定：\n\t\n\t`/data/ftp` 为主目录, 该目录不可上传文件\n\t\n\t`/data/ftp/pub` 文件只能上传到该目录下\n\t```\nmkdir -p /data/ftp/pub\n\t```\n\t创建登录欢迎文件 ：\n\t```\necho \"Welcome to use FTP service.\" > /data/ftp/welcome.txt\n\t```\n\t设置访问权限：\n\t```\nchmod a-w /data/ftp && chmod 777 -R /data/ftp/pub\n\t```\n\t设置为用户的主目录：\n\t```\nusermod -d /data/ftp ftpuser\n\t```\n- 完成","content":"<p><strong>1. 安装并启动 FTP 服务</strong></p>\n<ul>\n<li><p>安装 VSFTPD</p>\n<p>  使用 <code>yum</code> 安装 <code>vsftpd</code>：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install vsftpd -y</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动 VSFTPD</p>\n<p>  安装完成后，启动 FTP 服务：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service vsftpd start</div></pre></td></tr></table></figure>\n<p>  启动后，可以看到系统已经监听了 21 端口：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">netstat -nltp | grep 21</div></pre></td></tr></table></figure>\n<p>  此时，访问 ftp://yourdomain.com 可浏览机器上的 /var/ftp 目录了。</p>\n</li>\n</ul>\n<p><strong>2. 配置 FTP 权限</strong></p>\n<p>目前 FTP 服务登陆允许匿名登陆，也无法区分用户访问，我们需要配置 FTP 访问权限</p>\n<ul>\n<li><p>了解 VSFTP 配置</p>\n<p>  vsftpd 的配置目录为 <code>/etc/vsftpd</code>，包含下列的配置文件：</p>\n<ul>\n<li><code>vsftpd.conf</code> 为主要配置文件</li>\n<li><code>ftpusers</code> 配置禁止访问 FTP 服务器的用户列表</li>\n<li><code>user_list</code> 配置用户访问控制</li>\n</ul>\n</li>\n<li><p>阻止匿名访问和切换根目录</p>\n<p>  匿名访问和切换根目录都会给服务器带来安全风险，我们把这两个功能关闭。</p>\n<p>  编辑 <code>/etc/vsftpd/vsftpd.conf</code>，找到下面两处配置并修改：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 禁用匿名用户</div><div class=\"line\">anonymous_enable=NO</div><div class=\"line\"></div><div class=\"line\"># 禁止切换根目录</div><div class=\"line\">chroot_local_user=YES</div></pre></td></tr></table></figure>\n<p>  重新启动 FTP 服务</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service vsftpd restart</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建 FTP 用户</p>\n<p>  创建一个用户 <code>ftpuser</code> ：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd ftpuser</div></pre></td></tr></table></figure>\n<p>  为用户 <code>ftpuser</code> 设置密码 ：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;3oEiU5s7&quot; | passwd ftpuser --stdin</div></pre></td></tr></table></figure>\n</li>\n<li><p>限制该用户仅能通过 FTP 访问</p>\n<p>  限制用户 <code>ftpuser</code> 只能通过 FTP 访问服务器，而不能直接登录服务器：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">usermod -s /sbin/nologin ftpuser</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>为用户分配主目录</p>\n<p>  为用户 <code>ftpuser</code> 创建主目录并约定：</p>\n<p>  <code>/data/ftp</code> 为主目录, 该目录不可上传文件</p>\n<p>  <code>/data/ftp/pub</code> 文件只能上传到该目录下</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /data/ftp/pub</div></pre></td></tr></table></figure>\n<p>  创建登录欢迎文件 ：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;Welcome to use FTP service.&quot; &gt; /data/ftp/welcome.txt</div></pre></td></tr></table></figure>\n<p>  设置访问权限：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod a-w /data/ftp &amp;&amp; chmod 777 -R /data/ftp/pub</div></pre></td></tr></table></figure>\n<p>  设置为用户的主目录：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">usermod -d /data/ftp ftpuser</div></pre></td></tr></table></figure>\n</li>\n<li><p>完成</p>\n</li>\n</ul>\n","updated":"2017-10-18T03:35:46.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux ftp","slug":"linux-ftp","permalink":"http://hexo.zhazhapan.com/tags/linux-ftp/"}]},{"title":"基于CentOS搭建Discuz","date":"2017-10-16T09:21:25.000Z","path":"2017/10/16/基于CentOS搭建Discuz/","text":"1. 购买服务器和域名 2. 准备 LAMP 环境 LAMP 是 Linux、Apache、MySQL 和 PHP 的缩写，是 Discuz 论坛系统依赖的基础运行环境。我们先来准备 LAMP 环境 安装 MySQL 使用 yum 安装 MySQL： 1yum install mysql-server -y 安装完成后，启动 MySQL 服务： 1service mysqld restart 此教程使用 mysql 默认账户名和密码，您也可以设置自己的 MySQL 账户名和密码，参考下面的内容： 1/usr/bin/mysqladmin -u root password &apos;NGky9EKq&apos; 将 MySQL 设置为开机自动启动： 1chkconfig mysqld on 安装 Apache 组件 使用 yum 安装 Apache 组件： 1yum install httpd -y 安装之后，启动 httpd 进程： 1service httpd start 把 httpd 也设置成开机自动启动： 1chkconfig httpd on 安装 PHP 使用 yum 安装 PHP： 1yum install php php-fpm php-mysql -y 安装之后，启动 PHP-FPM 进程： 1service php-fpm start 启动之后，可以使用下面的命令查看 PHP-FPM 进程监听哪个端口 1netstat -nlpt | grep php-fpm 把 PHP-FPM 也设置成开机自动启动： 1chkconfig php-fpm on 3. 安装并配置 Discuz 安装 Discuz CentOS 6 没有Discuz 的 yum 源，所以我们需要下载一个Discuz 压缩包： 1wget http://download.comsenz.com/DiscuzX/3.2/Discuz_X3.2_SC_UTF8.zip 下载完成后，解压这个压缩包 1unzip Discuz_X3.2_SC_UTF8.zip 配置 Discuz 由于PHP默认访问 /var/www/html/ 文件夹，所以我们需要把upload文件夹里的文件都复制到 /var/www/html/ 文件夹 12cd Discuz*cp -r upload/* /var/www/html/ 给 /var/www/html 目录及其子目录赋予权限 1chmod -R 777 /var/www/html 重启 Apache 1service httpd restart 完成","raw":"---\ntitle: 基于CentOS搭建Discuz\ndate: 2017-10-16 17:21:25\ntags: linux discuz\n---\n**1. 购买服务器和域名**\n\n**2. 准备 LAMP 环境**\n\nLAMP 是 Linux、Apache、MySQL 和 PHP 的缩写，是 Discuz 论坛系统依赖的基础运行环境。我们先来准备 LAMP 环境\n\n- 安装 MySQL\n\n\t使用 `yum` 安装 MySQL：\n\t```\nyum install mysql-server -y\n\t```\n\t安装完成后，启动 MySQL 服务：\n\t```\nservice mysqld restart\n\t```\n\n\t此教程使用 mysql 默认账户名和密码，您也可以设置自己的 MySQL 账户名和密码，参考下面的内容：\n\t```\n/usr/bin/mysqladmin -u root password 'NGky9EKq'\n\t```\n\t将 MySQL 设置为开机自动启动：\n\t```\nchkconfig mysqld on\n\t```\n\n- 安装 Apache 组件\n\n\t使用 `yum` 安装 Apache 组件：\n\t```\nyum install httpd -y\n\t```\n\t安装之后，启动 httpd 进程：\n\t```\nservice httpd start\n\t```\n\t把 httpd 也设置成开机自动启动：\n\t```\nchkconfig httpd on\n\t```\n\n- 安装 PHP\n\n\t使用 `yum` 安装 PHP：\n\t```\nyum install php php-fpm php-mysql -y\n\t```\n\t安装之后，启动 PHP-FPM 进程：\n\t```\nservice php-fpm start\n\t```\n\t启动之后，可以使用下面的命令查看 PHP-FPM 进程监听哪个端口 \n\t```\nnetstat -nlpt | grep php-fpm\n\t```\n\t把 PHP-FPM 也设置成开机自动启动：\n\t```\nchkconfig php-fpm on\n\t```\n\n**3. 安装并配置 Discuz**\n\n- 安装 Discuz\n\n\tCentOS 6 没有Discuz 的 `yum` 源，所以我们需要下载一个Discuz 压缩包：\n\t```\nwget http://download.comsenz.com/DiscuzX/3.2/Discuz_X3.2_SC_UTF8.zip\n\t```\n\t下载完成后，解压这个压缩包\n\t```\nunzip Discuz_X3.2_SC_UTF8.zip\n\t```\n\n- 配置 Discuz\n\n\t由于PHP默认访问 `/var/www/html/` 文件夹，所以我们需要把upload文件夹里的文件都复制到 `/var/www/html/` 文件夹\n\t```\ncd Discuz*\ncp -r upload/* /var/www/html/\n\t```\n\t给 /var/www/html 目录及其子目录赋予权限\n\t```\nchmod -R 777 /var/www/html\n\t```\n\t重启 Apache\n\t```\nservice httpd restart\n\t```\n\n- 完成","content":"<p><strong>1. 购买服务器和域名</strong></p>\n<p><strong>2. 准备 LAMP 环境</strong></p>\n<p>LAMP 是 Linux、Apache、MySQL 和 PHP 的缩写，是 Discuz 论坛系统依赖的基础运行环境。我们先来准备 LAMP 环境</p>\n<ul>\n<li><p>安装 MySQL</p>\n<p>  使用 <code>yum</code> 安装 MySQL：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install mysql-server -y</div></pre></td></tr></table></figure>\n<p>  安装完成后，启动 MySQL 服务：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service mysqld restart</div></pre></td></tr></table></figure>\n<p>  此教程使用 mysql 默认账户名和密码，您也可以设置自己的 MySQL 账户名和密码，参考下面的内容：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/mysqladmin -u root password &apos;NGky9EKq&apos;</div></pre></td></tr></table></figure>\n<p>  将 MySQL 设置为开机自动启动：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig mysqld on</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装 Apache 组件</p>\n<p>  使用 <code>yum</code> 安装 Apache 组件：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install httpd -y</div></pre></td></tr></table></figure>\n<p>  安装之后，启动 httpd 进程：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service httpd start</div></pre></td></tr></table></figure>\n<p>  把 httpd 也设置成开机自动启动：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig httpd on</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装 PHP</p>\n<p>  使用 <code>yum</code> 安装 PHP：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install php php-fpm php-mysql -y</div></pre></td></tr></table></figure>\n<p>  安装之后，启动 PHP-FPM 进程：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service php-fpm start</div></pre></td></tr></table></figure>\n<p>  启动之后，可以使用下面的命令查看 PHP-FPM 进程监听哪个端口 </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">netstat -nlpt | grep php-fpm</div></pre></td></tr></table></figure>\n<p>  把 PHP-FPM 也设置成开机自动启动：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig php-fpm on</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>3. 安装并配置 Discuz</strong></p>\n<ul>\n<li><p>安装 Discuz</p>\n<p>  CentOS 6 没有Discuz 的 <code>yum</code> 源，所以我们需要下载一个Discuz 压缩包：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://download.comsenz.com/DiscuzX/3.2/Discuz_X3.2_SC_UTF8.zip</div></pre></td></tr></table></figure>\n<p>  下载完成后，解压这个压缩包</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">unzip Discuz_X3.2_SC_UTF8.zip</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置 Discuz</p>\n<p>  由于PHP默认访问 <code>/var/www/html/</code> 文件夹，所以我们需要把upload文件夹里的文件都复制到 <code>/var/www/html/</code> 文件夹</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd Discuz*</div><div class=\"line\">cp -r upload/* /var/www/html/</div></pre></td></tr></table></figure>\n<p>  给 /var/www/html 目录及其子目录赋予权限</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod -R 777 /var/www/html</div></pre></td></tr></table></figure>\n<p>  重启 Apache</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service httpd restart</div></pre></td></tr></table></figure>\n</li>\n<li><p>完成</p>\n</li>\n</ul>\n","updated":"2017-10-18T03:36:37.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux discuz","slug":"linux-discuz","permalink":"http://hexo.zhazhapan.com/tags/linux-discuz/"}]},{"title":"搭建微信订阅号后台服务","date":"2017-10-16T08:59:13.000Z","path":"2017/10/16/搭建微信订阅号后台服务/","text":"1. 准备域名和服务器 微信公众平台需要配置服务器地址 URL 访问，在实验开始之前，我们要准备域名。 购买服务器（腾讯云） 域名注册 域名解析 域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 ，如： 1ping www.yourdomain.com 如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。 2. 申请微信个人订阅号 在开始搭建我们的订阅号服务器之前，需要先拿到订阅号相关信息。 注册开发者账号 如果你还不是微信订阅号开发者，请先在微信公众平台注册：https://mp.weixin.qq.com 获取微信订阅号公众平台认证字段信息 我们需要获取3个字段：AppID Token EncodingAESKey。 登录微信公众平台，依次进入 开发 - 基本配置 可以拿到 AppID。 在基本配置 - 服务器配置 - 修改配置 表单中：URL 填第一步申请的域名; Token 用户根据提示填写，用于后面校验服务端合法性; EncodingAESKey 点击 随机生成 按钮来生成。 当点击表单 提交 按钮时，微信会通过 Token 来校验 URL 的合法性，这个我们在后面步骤实现，此界面暂时保留不关闭。 3. 搭建 HTTP 服务 下面的步骤，将带大家在服务器上使用 Node 和 Express 搭建一个 HTTP 服务器 安装 NodeJS 和 NPM 使用下面的命令安装 NodeJS 和 NPM 12curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -yum install nodejs -y 安装完成后，使用下面的命令测试安装结果 1node -v 编写 HTTP Server 源码 创建工作目录 使用下面的命令在服务器创建一个工作目录： 1mkdir -p /data/release/weapp 进入此工作目录 1cd /data/release/weapp 创建 package.json 在刚才创建的工作目录创建 package.json，添加我们服务器包的名称和版本号，可参考下面的示例。 1234&#123; &quot;name&quot;: &quot;weapp&quot;, &quot;version&quot;: &quot;1.0.0&quot;&#125; 添加 Server 源码 在工作目录创建 app.js，使用 Express.js 来监听 5050 端口，可参考下面的示例代码(注：请将 app.js 文件中的token/appid/encodingAESKey等配置项替换为您的订阅号对应的取值)。 1234567891011121314151617181920212223242526272829303132// 引用 express 来支持 HTTP Server 的实现const express = require(&apos;express&apos;);// 引用微信公共平台自动回复消息接口服务中间件var wechat = require(&apos;wechat&apos;);// 创建一个 express 实例const app = express();// 配置微信公众平台参数，在教程第二步中获取var config = &#123; token: &apos;your token&apos;, // 填第二步中获取的 `token` appid: &apos;your appid&apos;, // 填第二步中获取的 `appid` encodingAESKey: &apos;your encodingAESKey&apos;, // 填第二步中获取的 `encodingAESKey` checkSignature: true // 可选，默认为true。由于微信公众平台接口调试工具在明文模式下不发送签名，所以如要使用该测试工具，请将其设置为false &#125;;app.use(express.query());app.use(&apos;/&apos;, wechat(config, function (req, res, next) &#123; res.reply(&#123; content: &apos;你好，Hello World!&apos;, type: &apos;text&apos; &#125;);&#125;));// 监听端口，等待连接const port = 5050;app.listen(port);// 输出服务器启动日志console.log(`Server listening at http://127.0.0.1:$&#123;port&#125;`); 运行 HTTP 服务 安装 PM2 在开始之前，我们先来安装 PM2 1npm install pm2 --global PM2 安装时间可能稍长，请耐心等候 安装 Express 我们的服务器源码里使用到了 Express 模块，下面的命令使用 NPM 来安装 Express 12cd /data/release/weappnpm install express --save 安装 Wechat 我们的服务器源码里使用到了 Wechat 模块，下面的命令使用 NPM 来安装 Wechat 12cd /data/release/weappnpm install wechat --save 启动服务 安装完成后，使用 PM2 来启动 HTTP 服务 12cd /data/release/weapppm2 start app.js 现在，您的 HTTP 服务已经在 http://yourdomain.com:5050 运行要查看服务输出的日志，可以使用下面的命令： 1pm2 logs 如果要重启服务，可以使用下面的命令： 1pm2 restart app 4. 搭建 nginx 对外服务 NodeJs只是侦听的机器上的 5050 端口，我们使用 nginx 侦听 80 端口提供对外域名服务 安装 Nginx 在 CentOS 上，可直接使用 yum 来安装 Nginx 1yum install nginx -y 安装完成后，使用 nginx 命令启动 Nginx： 1nginx 此时，访问 http://yourdomain.com 可以看到 Nginx 的测试页面 配置 HTTP 反向代理 外网用户访问服务器的 Web 服务由 Nginx 提供，Nginx 需要配置反向代理才能使得 Web 服务转发到本地的 Node 服务。 Nginx 配置目录在 /etc/nginx/conf.d，我们在该目录创建 wechat.conf，参考示例代码如下： 12345678server &#123; listen 80; server_name www.example.com; # 改为第一步申请的域名 location / &#123; proxy_pass http://127.0.0.1:5050; &#125; &#125; 重新加载配置 1nginx -s reload 在浏览器通过 http 的方式访问你解析的域名来测试 HTTP 是否成功启动 5. 使用Server端回复微信消息 提交服务端配置 我们将第二步微信公众平台中保留的表单提交，同时将 基本配置 - 服务器配置 启用 关注、发送与消息回复 首先通过二维码关注微信订阅号 在聊天界面向微信公众号发送一条消息 最终我们会回到一条 你好，Hello World! 的回复 大功搞成","raw":"---\ntitle: 搭建微信订阅号后台服务\ndate: 2017-10-16 16:59:13\ntags: weixin linux\n---\n**1. 准备域名和服务器**\n\n微信公众平台需要配置服务器地址 URL 访问，在实验开始之前，我们要准备域名。\n\n- 购买服务器（[腾讯云](https://cloud.tencent.com/product/cvm)）\n\n- 域名注册\n\n- 域名解析\n\n\t域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 ，如：\n\t```\nping www.yourdomain.com\n\t```\n\t如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。\n\n**2. 申请微信个人订阅号**\n\n在开始搭建我们的订阅号服务器之前，需要先拿到订阅号相关信息。\n\n- 注册开发者账号\n\n\t如果你还不是微信订阅号开发者，请先在微信公众平台注册：\nhttps://mp.weixin.qq.com\n\n- 获取微信订阅号公众平台认证字段信息\n\n\t我们需要获取3个字段：`AppID` `Token` `EncodingAESKey`。\n\n\t登录微信公众平台，依次进入 `开发` - `基本配置` 可以拿到 AppID。\n\n\t在`基本配置` - `服务器配置` - `修改配置` 表单中：\nURL 填第一步申请的域名;\n\n\tToken 用户根据提示填写，用于后面校验服务端合法性;\n\n\tEncodingAESKey 点击 `随机生成` 按钮来生成。\n\n\t当点击表单 `提交` 按钮时，微信会通过 Token 来校验 URL 的合法性，这个我们在后面步骤实现，此界面暂时保留不关闭。\n\n**3. 搭建 HTTP 服务**\n\n下面的步骤，将带大家在服务器上使用 Node 和 Express 搭建一个 HTTP 服务器\n\n- 安装 NodeJS 和 NPM\n\n\t使用下面的命令安装 NodeJS 和 NPM\n\t```\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\nyum install nodejs -y\n\t```\n\t安装完成后，使用下面的命令测试安装结果\n\t```\nnode -v\n\t```\n\n- 编写 HTTP Server 源码\n\n\t*创建工作目录*\n\n\t使用下面的命令在服务器创建一个工作目录：\n\t```\nmkdir -p /data/release/weapp\n\t```\n\t进入此工作目录\n\t```\ncd /data/release/weapp\n\t```\n\t创建 package.json\n\n\t在刚才创建的工作目录创建 `package.json`，添加我们服务器包的名称和版本号，可参考下面的示例。\n\t```\n\t{\n\t    \"name\": \"weapp\",\n\t    \"version\": \"1.0.0\"\n\t}\n\t```\n\t*添加 Server 源码*\n\n\t在工作目录创建 `app.js`，使用 `Express.js` 来监听 `5050` 端口，可参考下面的示例代码(注：请将 `app.js` 文件中的`token`/`appid`/`encodingAESKey`等配置项替换为您的订阅号对应的取值)。\n\t```\n\t// 引用 express 来支持 HTTP Server 的实现\n\tconst express = require('express');\n\t\n\t// 引用微信公共平台自动回复消息接口服务中间件\n\tvar wechat = require('wechat');\n\t\n\t// 创建一个 express 实例\n\tconst app = express();\n\t\n\t// 配置微信公众平台参数，在教程第二步中获取\n\tvar config = {\n\t    token: 'your token', // 填第二步中获取的 `token`\n\t    appid: 'your appid', // 填第二步中获取的 `appid`\n\t    encodingAESKey: 'your encodingAESKey', // 填第二步中获取的 `encodingAESKey`\n\t    checkSignature: true // 可选，默认为true。由于微信公众平台接口调试工具在明文模式下不发送签名，所以如要使用该测试工具，请将其设置为false \n\t};\n\t\n\tapp.use(express.query());\n\t\n\tapp.use('/', wechat(config, function (req, res, next) {\n\t    res.reply({\n\t        content: '你好，Hello World!',\n\t        type: 'text'\n\t    });\n\t}));\n\t\n\t// 监听端口，等待连接\n\tconst port = 5050;\n\tapp.listen(port);\n\t\n\t// 输出服务器启动日志\n\tconsole.log(`Server listening at http://127.0.0.1:${port}`);\n\t```\n- 运行 HTTP 服务\n\n\t*安装 PM2*\n\n\t在开始之前，我们先来安装 PM2\n\t```\nnpm install pm2 --global\n\t```\n\tPM2 安装时间可能稍长，请耐心等候 \n\n\t*安装 Express*\n\n\t我们的服务器源码里使用到了 Express 模块，下面的命令使用 NPM 来安装 Express\n\t```\ncd /data/release/weapp\nnpm install express --save\n\t```\n\t*安装 Wechat*\n\n\t我们的服务器源码里使用到了 Wechat 模块，下面的命令使用 NPM 来安装 Wechat\n\t```\ncd /data/release/weapp\nnpm install wechat --save\n\t```\n\t*启动服务*\n\n\t安装完成后，使用 PM2 来启动 HTTP 服务\n\t```\ncd /data/release/weapp\npm2 start app.js\n\t```\n\t现在，您的 HTTP 服务已经在 http://yourdomain.com:5050 运行要查看服务输出的日志，可以使用下面的命令：\n\t```\npm2 logs\n\t```\n\t如果要重启服务，可以使用下面的命令：\n\t```\npm2 restart app\n\t```\n\n**4. 搭建 nginx 对外服务**\n\nNodeJs只是侦听的机器上的 5050 端口，我们使用 nginx 侦听 80 端口提供对外域名服务\n\n- 安装 Nginx\n\n\t在 CentOS 上，可直接使用 `yum` 来安装 Nginx\n\t```\nyum install nginx -y\n\t```\n\t安装完成后，使用 `nginx` 命令启动 Nginx：\n\t```\nnginx\n\t```\n\t此时，访问 http://yourdomain.com 可以看到 Nginx 的测试页面\n\n- 配置 HTTP 反向代理\n\n\t外网用户访问服务器的 Web 服务由 Nginx 提供，Nginx 需要配置反向代理才能使得 Web 服务转发到本地的 Node 服务。\n\n\tNginx 配置目录在 `/etc/nginx/conf.d`，我们在该目录创建 `wechat.conf`，参考示例代码如下：\n\t```\n\tserver {\n        listen 80;\n        server_name www.example.com; # 改为第一步申请的域名\n        \n        location / {\n            proxy_pass http://127.0.0.1:5050;\n        }\n    }\n\t```\n\t重新加载配置\n\t```\nnginx -s reload\n\t```\n\t在浏览器通过 http 的方式访问你解析的域名来测试 HTTP 是否成功启动\n\n**5. 使用Server端回复微信消息**\n\n- 提交服务端配置\n\n\t我们将第二步微信公众平台中保留的表单提交，同时将 `基本配置` - `服务器配置` 启用\n\n- 关注、发送与消息回复\n\n\t首先通过二维码关注微信订阅号\n\n\t在聊天界面向微信公众号发送一条消息\n\n\t最终我们会回到一条 `你好，Hello World!` 的回复\n\n- 大功搞成","content":"<p><strong>1. 准备域名和服务器</strong></p>\n<p>微信公众平台需要配置服务器地址 URL 访问，在实验开始之前，我们要准备域名。</p>\n<ul>\n<li><p>购买服务器（<a href=\"https://cloud.tencent.com/product/cvm\" target=\"_blank\" rel=\"external\">腾讯云</a>）</p>\n</li>\n<li><p>域名注册</p>\n</li>\n<li><p>域名解析</p>\n<p>  域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 ，如：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ping www.yourdomain.com</div></pre></td></tr></table></figure>\n<p>  如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p>\n</li>\n</ul>\n<p><strong>2. 申请微信个人订阅号</strong></p>\n<p>在开始搭建我们的订阅号服务器之前，需要先拿到订阅号相关信息。</p>\n<ul>\n<li><p>注册开发者账号</p>\n<p>  如果你还不是微信订阅号开发者，请先在微信公众平台注册：<br><a href=\"https://mp.weixin.qq.com\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com</a></p>\n</li>\n<li><p>获取微信订阅号公众平台认证字段信息</p>\n<p>  我们需要获取3个字段：<code>AppID</code> <code>Token</code> <code>EncodingAESKey</code>。</p>\n<p>  登录微信公众平台，依次进入 <code>开发</code> - <code>基本配置</code> 可以拿到 AppID。</p>\n<p>  在<code>基本配置</code> - <code>服务器配置</code> - <code>修改配置</code> 表单中：<br>URL 填第一步申请的域名;</p>\n<p>  Token 用户根据提示填写，用于后面校验服务端合法性;</p>\n<p>  EncodingAESKey 点击 <code>随机生成</code> 按钮来生成。</p>\n<p>  当点击表单 <code>提交</code> 按钮时，微信会通过 Token 来校验 URL 的合法性，这个我们在后面步骤实现，此界面暂时保留不关闭。</p>\n</li>\n</ul>\n<p><strong>3. 搭建 HTTP 服务</strong></p>\n<p>下面的步骤，将带大家在服务器上使用 Node 和 Express 搭建一个 HTTP 服务器</p>\n<ul>\n<li><p>安装 NodeJS 和 NPM</p>\n<p>  使用下面的命令安装 NodeJS 和 NPM</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -</div><div class=\"line\">yum install nodejs -y</div></pre></td></tr></table></figure>\n<p>  安装完成后，使用下面的命令测试安装结果</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div></pre></td></tr></table></figure>\n</li>\n<li><p>编写 HTTP Server 源码</p>\n<p>  <em>创建工作目录</em></p>\n<p>  使用下面的命令在服务器创建一个工作目录：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /data/release/weapp</div></pre></td></tr></table></figure>\n<p>  进入此工作目录</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/release/weapp</div></pre></td></tr></table></figure>\n<p>  创建 package.json</p>\n<p>  在刚才创建的工作目录创建 <code>package.json</code>，添加我们服务器包的名称和版本号，可参考下面的示例。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;name&quot;: &quot;weapp&quot;,</div><div class=\"line\">    &quot;version&quot;: &quot;1.0.0&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  <em>添加 Server 源码</em></p>\n<p>  在工作目录创建 <code>app.js</code>，使用 <code>Express.js</code> 来监听 <code>5050</code> 端口，可参考下面的示例代码(注：请将 <code>app.js</code> 文件中的<code>token</code>/<code>appid</code>/<code>encodingAESKey</code>等配置项替换为您的订阅号对应的取值)。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 引用 express 来支持 HTTP Server 的实现</div><div class=\"line\">const express = require(&apos;express&apos;);</div><div class=\"line\"></div><div class=\"line\">// 引用微信公共平台自动回复消息接口服务中间件</div><div class=\"line\">var wechat = require(&apos;wechat&apos;);</div><div class=\"line\"></div><div class=\"line\">// 创建一个 express 实例</div><div class=\"line\">const app = express();</div><div class=\"line\"></div><div class=\"line\">// 配置微信公众平台参数，在教程第二步中获取</div><div class=\"line\">var config = &#123;</div><div class=\"line\">    token: &apos;your token&apos;, // 填第二步中获取的 `token`</div><div class=\"line\">    appid: &apos;your appid&apos;, // 填第二步中获取的 `appid`</div><div class=\"line\">    encodingAESKey: &apos;your encodingAESKey&apos;, // 填第二步中获取的 `encodingAESKey`</div><div class=\"line\">    checkSignature: true // 可选，默认为true。由于微信公众平台接口调试工具在明文模式下不发送签名，所以如要使用该测试工具，请将其设置为false </div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">app.use(express.query());</div><div class=\"line\"></div><div class=\"line\">app.use(&apos;/&apos;, wechat(config, function (req, res, next) &#123;</div><div class=\"line\">    res.reply(&#123;</div><div class=\"line\">        content: &apos;你好，Hello World!&apos;,</div><div class=\"line\">        type: &apos;text&apos;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;));</div><div class=\"line\"></div><div class=\"line\">// 监听端口，等待连接</div><div class=\"line\">const port = 5050;</div><div class=\"line\">app.listen(port);</div><div class=\"line\"></div><div class=\"line\">// 输出服务器启动日志</div><div class=\"line\">console.log(`Server listening at http://127.0.0.1:$&#123;port&#125;`);</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行 HTTP 服务</p>\n<p>  <em>安装 PM2</em></p>\n<p>  在开始之前，我们先来安装 PM2</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install pm2 --global</div></pre></td></tr></table></figure>\n<p>  PM2 安装时间可能稍长，请耐心等候 </p>\n<p>  <em>安装 Express</em></p>\n<p>  我们的服务器源码里使用到了 Express 模块，下面的命令使用 NPM 来安装 Express</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/release/weapp</div><div class=\"line\">npm install express --save</div></pre></td></tr></table></figure>\n<p>  <em>安装 Wechat</em></p>\n<p>  我们的服务器源码里使用到了 Wechat 模块，下面的命令使用 NPM 来安装 Wechat</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/release/weapp</div><div class=\"line\">npm install wechat --save</div></pre></td></tr></table></figure>\n<p>  <em>启动服务</em></p>\n<p>  安装完成后，使用 PM2 来启动 HTTP 服务</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/release/weapp</div><div class=\"line\">pm2 start app.js</div></pre></td></tr></table></figure>\n<p>  现在，您的 HTTP 服务已经在 <a href=\"http://yourdomain.com:5050\" target=\"_blank\" rel=\"external\">http://yourdomain.com:5050</a> 运行要查看服务输出的日志，可以使用下面的命令：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm2 logs</div></pre></td></tr></table></figure>\n<p>  如果要重启服务，可以使用下面的命令：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm2 restart app</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>4. 搭建 nginx 对外服务</strong></p>\n<p>NodeJs只是侦听的机器上的 5050 端口，我们使用 nginx 侦听 80 端口提供对外域名服务</p>\n<ul>\n<li><p>安装 Nginx</p>\n<p>  在 CentOS 上，可直接使用 <code>yum</code> 来安装 Nginx</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install nginx -y</div></pre></td></tr></table></figure>\n<p>  安装完成后，使用 <code>nginx</code> 命令启动 Nginx：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx</div></pre></td></tr></table></figure>\n<p>  此时，访问 <a href=\"http://yourdomain.com\" target=\"_blank\" rel=\"external\">http://yourdomain.com</a> 可以看到 Nginx 的测试页面</p>\n</li>\n<li><p>配置 HTTP 反向代理</p>\n<p>  外网用户访问服务器的 Web 服务由 Nginx 提供，Nginx 需要配置反向代理才能使得 Web 服务转发到本地的 Node 服务。</p>\n<p>  Nginx 配置目录在 <code>/etc/nginx/conf.d</code>，我们在该目录创建 <code>wechat.conf</code>，参考示例代码如下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">       listen 80;</div><div class=\"line\">       server_name www.example.com; # 改为第一步申请的域名</div><div class=\"line\">       </div><div class=\"line\">       location / &#123;</div><div class=\"line\">           proxy_pass http://127.0.0.1:5050;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>  重新加载配置</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx -s reload</div></pre></td></tr></table></figure>\n<p>  在浏览器通过 http 的方式访问你解析的域名来测试 HTTP 是否成功启动</p>\n</li>\n</ul>\n<p><strong>5. 使用Server端回复微信消息</strong></p>\n<ul>\n<li><p>提交服务端配置</p>\n<p>  我们将第二步微信公众平台中保留的表单提交，同时将 <code>基本配置</code> - <code>服务器配置</code> 启用</p>\n</li>\n<li><p>关注、发送与消息回复</p>\n<p>  首先通过二维码关注微信订阅号</p>\n<p>  在聊天界面向微信公众号发送一条消息</p>\n<p>  最终我们会回到一条 <code>你好，Hello World!</code> 的回复</p>\n</li>\n<li><p>大功搞成</p>\n</li>\n</ul>\n","updated":"2017-10-18T03:35:21.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"weixin linux","slug":"weixin-linux","permalink":"http://hexo.zhazhapan.com/tags/weixin-linux/"}]},{"title":"基于CentOS搭建微信小程序服务","date":"2017-10-16T07:51:21.000Z","path":"2017/10/16/基于CentOS搭建微信小程序服务/","text":"1. 准备域名、证书和服务器 小程序后台服务需要通过 HTTPS 访问，在实验开始之前，我们要准备域名和 SSL 证书。 购买云服务器（腾讯云） 域名解析 域名购买完成后, 需要将域名解析到云主机 域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 ，如：ping www.yourdomain.com。 如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。 申请 SSL 证书 2. 搭建小程序开发环境 在开始搭建我们的小程序服务器之前，需要先完成客户端小程序开发环境的搭建。 注册开发者账号 如果你还不是小程序开发者，请先在微信公众平台并注册：https://mp.weixin.qq.com 配置小程序服务器信息 登录微信公众平台后，依次进入 设置 - 开发设置 - 服务器域名 - 修改。 扫码完成身份校验后，request 合法域名和 socket 合法域名均填写在上一步准备好的域名地址。 配置完成后，点击 保存并提交。 运行配套小程序代码 要运行本实验配套的小程序代码，请下载下列资源： 实验配套源码 微信小程序开发工具 源码下载后，请解压到本地工作目录。 开发工具下载后，请安装并启动，然后用微信扫码登录。 登录后，选择 本地小程序项目 - 添加项目，使用以下配置： AppID：填写小程序的 AppID，请登录公众平台后在 设置 - 开发设置 - 开发者 ID 中查看 项目名称：填写任意您喜欢的名称 项目目录：选择刚才解压的配套源码目录（目录包含 app.js） 填写完成后，点击 添加项目。 设置实验域名 在开发工具的 编辑 面板中，选中 app.js 进行编辑，需要修改小程序通信域名，请参考下面的配置： 12345678App(&#123; config: &#123; host: &apos;&apos; // 这个地方填写你的域名 &#125;, onLaunch () &#123; console.log(&apos;App.onLaunch()&apos;); &#125;&#125;); 3. 搭建 HTTP 服务 下面的步骤，将带大家在服务器上使用 Node 和 Express 搭建一个 HTTP 服务器 安装 NodeJS 和 NPM 使用下面的命令安装 NodeJS 和 NPM 12curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -yum install nodejs -y 安装完成后，使用下面的命令测试安装结果 1node -v 编写 HTTP Server 源码 创建工作目录 使用下面的命令在服务器创建一个工作目录： 1mkdir -p /data/release/weapp 进入此工作目录 1cd /data/release/weapp 创建 package.json 在刚才创建的工作目录创建 package.json，添加我们服务器包的名称和版本号，可参考下面的示例。 1234&#123; &quot;name&quot;: &quot;weapp&quot;, &quot;version&quot;: &quot;1.0.0&quot;&#125; 添加 Server 源码 在工作目录创建 app.js，使用 Express.js 来监听 8765 端口，可参考下面的示例代码。 123456789101112131415161718// 引用 express 来支持 HTTP Server 的实现const express = require(&apos;express&apos;);// 创建一个 express 实例const app = express();// 实现唯一的一个中间件，对于所有请求，都输出 &quot;Response from express&quot;app.use((request, response, next) =&gt; &#123; response.write(&apos;Response from express&apos;); response.end();&#125;);// 监听端口，等待连接const port = 8765;app.listen(port);// 输出服务器启动日志console.log(`Server listening at http://127.0.0.1:$&#123;port&#125;`); 运行 HTTP 服务 安装 PM2 在开始之前，我们先来安装 PM2 1npm install pm2 --global PM2 安装时间可能稍长，请耐心等候 安装 Express 我们的服务器源码里使用到了 Express 模块，下面的命令使用 NPM 来安装 Express 12cd /data/release/weappnpm install express --save 启动服务 安装完成后，使用 PM2 来启动 HTTP 服务 12cd /data/release/weapppm2 start app.js 现在，您的 HTTP 服务已经在 http://yourdomain.com:8765 运行 要查看服务输出的日志，可以使用下面的命令： 1pm2 logs 如果要重启服务，可以使用下面的命令： 1pm2 restart app 4. 搭建 HTTPS 服务 微信小程序要求和服务器的通信都通过 HTTPS 进行 安装 Nginx 在 CentOS 上，可直接使用 yum 来安装 Nginx 1yum install nginx -y 安装完成后，使用 nginx 命令启动 Nginx： 1nginx 此时，访问 http://yourdomain.com 可以看到 Nginx 的测试页面 配置 HTTPS 反向代理 外网用户访问服务器的 Web 服务由 Nginx 提供，Nginx 需要配置反向代理才能使得 Web 服务转发到本地的 Node 服务。 先将之前下载的 SSL 证书(解压后 Nginx 目录分别以 crt 和 key 作为后缀的文件)通过 PuTTy（Windows） 或者 sftp（MacOS 或 Linux） 上传到服务器的 /etc/nginx 目录。 参考：putty教程、sftp教程 Nginx 配置目录在 /etc/nginx/conf.d，我们在该目录创建 ssl.conf，内容如下： 12345678910111213141516server &#123; listen 443; server_name www.example.com; # 改为绑定证书的域名 # ssl 配置 ssl on; ssl_certificate 1_www.example.com_bundle.crt; # 改为自己申请得到的 crt 文件的名称 ssl_certificate_key 2_www.example.com.key; # 改为自己申请得到的 key 文件的名称 ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; location / &#123; proxy_pass http://127.0.0.1:8765; &#125; &#125; 让 Nginx 重新加载配置使其生效 1nginx -s reload 在浏览器通过 https 的方式访问你解析的域名来测试 HTTPS 是否成功启动 在小程序中测试 HTTPS 访问 打开配套的小程序，点击 实验一：HTTPS，点击 发送请求 来测试访问结果。 5. 小程序会话 小程序不支持 Cookie 存储和跟踪，服务器需要自行实现会话层 安装 MongoDB 使用 Yum 在机器上安装 MongoDB及其客户端命令行工具： 1yum install mongodb-server mongodb -y 安装结束后，可以使用下面的命令查看安装的版本： 12mongod --versionmongo --version 启动 MongoDB 创建目录，用于 MongoDB 数据和日志存储： 12mkdir -p /data/mongodbmkdir -p /data/logs/mongodb 创建后，使用下面的命令来启动 MongoDB： 1mongod --fork --dbpath /data/mongodb --logpath /data/logs/mongodb/weapp.log 可以使用下面的命令来检查是否启动成功 1netstat -ltp | grep 27017 添加 MongoDB 用户 登录本地 MongoDB 服务： 1mongo 登录后，创建一个用户 weapp ： 12use weapp;db.createUser(&#123; user: &apos;weapp&apos;, pwd: &apos;weapp-dev&apos;, roles: [&apos;dbAdmin&apos;, &apos;readWrite&apos;]&#125;); 创建完成后，使用 exit 退出命令行工具。 安装 Node 模块 实现小程序的会话功能，我们需要安装 connect-mongo和 wafer-node-session 12cd /data/release/weappnpm install connect-mongo wafer-node-session --save 实现小程序会话 在工作目录创建配置文件 config.js，用于保存我们服务所用的配置，可参考下面的实现(注：请将参考配置文件中的 YORU_APP_ID 和 YOUR_APP_SECRET 替换为你申请的小程序对应的 AppID 和 AppSecret)： 123456789101112131415module.exports = &#123; serverPort: &apos;8765&apos;, // 小程序 appId 和 appSecret // 请到 https://mp.weixin.qq.com 获取 AppID 和 AppSecret appId: &apos;YORU_APP_ID&apos;, appSecret: &apos;YOUR_APP_SECRET&apos;, // mongodb 连接配置，生产环境请使用更复杂的用户名密码 mongoHost: &apos;127.0.0.1&apos;, mongoPort: &apos;27017&apos;, mongoUser: &apos;weapp&apos;, mongoPass: &apos;weapp-dev&apos;, mongoDb: &apos;weapp&apos;&#125;; 编辑 app.js，添加会话实现逻辑，可参考下面的代码： 1234567891011121314151617181920212223242526272829303132333435363738394041// 引用 express 来支持 HTTP Server 的实现const express = require(&apos;express&apos;);// 引用 wafer-session 支持小程序会话const waferSession = require(&apos;wafer-node-session&apos;); // 使用 MongoDB 作为会话的存储const MongoStore = require(&apos;connect-mongo&apos;)(waferSession); // 引入配置文件const config = require(&apos;./config&apos;); // 创建一个 express 实例const app = express();// 添加会话中间件，登录地址是 /loginapp.use(waferSession(&#123; appId: config.appId, appSecret: config.appSecret, loginPath: &apos;/login&apos;, store: new MongoStore(&#123; url: `mongodb://$&#123;config.mongoUser&#125;:$&#123;config.mongoPass&#125;@$&#123;config.mongoHost&#125;:$&#123;config.mongoPort&#125;/$&#123;config.mongoDb&#125;` &#125;) &#125;)); // 在路由 /me 下，输出会话里包含的用户信息app.use(&apos;/me&apos;, (request, response, next) =&gt; &#123; response.json(request.session ? request.session.userInfo : &#123; noBody: true &#125;); if (request.session) &#123; console.log(`Wafer session success with openId=$&#123;request.session.userInfo.openId&#125;`); &#125;&#125;); // 实现一个中间件，对于未处理的请求，都输出 &quot;Response from express&quot;app.use((request, response, next) =&gt; &#123; response.write(&apos;Response from express&apos;); response.end();&#125;);// 监听端口，等待连接app.listen(config.serverPort);// 输出服务器启动日志console.log(`Server listening at http://127.0.0.1:$&#123;config.serverPort&#125;`); 源码编写完成后，重启服务： 1pm2 restart app 重启后，使用配套的小程序完成会话测试：打开配套小程序 - 点击 实验二：会话 - 获取会话，如果您能看到您的微信头像，那就表示会话已经成功获取了。 6. WebSocket 服务 安装 Node 模块 本实验使用 ws 模块来在服务器上支持 WebSocket 协议，下面使用 NPM 来安装： 12cd /data/release/weappnpm install ws --save 实现 WebSocket 服务器 创建 websocket.js，实现 WebSocket 服务，可参考下面的代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758// 引入 ws 支持 WebSocket 的实现const ws = require(&apos;ws&apos;);// 导出处理方法exports.listen = listen;/** * 在 HTTP Server 上处理 WebSocket 请求 * @param &#123;http.Server&#125; server * @param &#123;wafer.SessionMiddleware&#125; sessionMiddleware */function listen(server, sessionMiddleware) &#123; // 使用 HTTP Server 创建 WebSocket 服务，使用 path 参数指定需要升级为 WebSocket 的路径 const wss = new ws.Server(&#123; server, path: &apos;/ws&apos; &#125;); // 监听 WebSocket 连接建立 wss.on(&apos;connection&apos;, (ws,request) =&gt; &#123;// 要升级到 WebSocket 协议的 HTTP 连接 // 被升级到 WebSocket 的请求不会被 express 处理， // 需要使用会话中间节获取会话 sessionMiddleware(request, null, () =&gt; &#123; const session = request.session; if (!session) &#123; // 没有获取到会话，强制断开 WebSocket 连接 ws.send(JSON.stringify(request.sessionError) || &quot;No session avaliable&quot;); ws.close(); return; &#125; // 保留这个日志的输出可让实验室能检查到当前步骤是否完成 console.log(`WebSocket client connected with openId=$&#123;session.userInfo.openId&#125;`); serveMessage(ws, session.userInfo); &#125;); &#125;); // 监听 WebSocket 服务的错误 wss.on(&apos;error&apos;, (err) =&gt; &#123; console.log(err); &#125;); &#125;/** * 进行简单的 WebSocket 服务，对于客户端发来的所有消息都回复回去 */function serveMessage(ws, userInfo) &#123; // 监听客户端发来的消息 ws.on(&apos;message&apos;, (message) =&gt; &#123; console.log(`WebSocket received: $&#123;message&#125;`); ws.send(`Server: Received($&#123;message&#125;)`); &#125;); // 监听关闭事件 ws.on(&apos;close&apos;, (code, message) =&gt; &#123; console.log(`WebSocket client closed (code: $&#123;code&#125;, message: $&#123;message || &apos;none&apos;&#125;)`); &#125;); // 连接后马上发送 hello 消息给会话对应的用户 ws.send(`Server: 恭喜，$&#123;userInfo.nickName&#125;`);&#125; 编辑 app.js，调用 WebSocket 服务，可参考下面代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// HTTP 模块同时支持 Express 和 WebSocketconst http = require(&apos;http&apos;); // 引用 express 来支持 HTTP Server 的实现const express = require(&apos;express&apos;);// 引用 wafer-session 支持小程序会话const waferSession = require(&apos;wafer-node-session&apos;); // 使用 MongoDB 作为会话的存储const MongoStore = require(&apos;connect-mongo&apos;)(waferSession); // 引入配置文件const config = require(&apos;./config&apos;); // 引入 WebSocket 服务实现const websocket = require(&apos;./websocket&apos;);// 创建一个 express 实例const app = express();// 独立出会话中间件给 express 和 ws 使用const sessionMiddleware = waferSession(&#123; appId: config.appId, appSecret: config.appSecret, loginPath: &apos;/login&apos;, store: new MongoStore(&#123; url: `mongodb://$&#123;config.mongoUser&#125;:$&#123;config.mongoPass&#125;@$&#123;config.mongoHost&#125;:$&#123;config.mongoPort&#125;/$&#123;config.mongoDb&#125;` &#125;)&#125;);app.use(sessionMiddleware);// 在路由 /me 下，输出会话里包含的用户信息app.use(&apos;/me&apos;, (request, response, next) =&gt; &#123; response.json(request.session ? request.session.userInfo : &#123; noBody: true &#125;); if (request.session) &#123; console.log(`Wafer session success with openId=$&#123;request.session.userInfo.openId&#125;`); &#125;&#125;); // 实现一个中间件，对于未处理的请求，都输出 &quot;Response from express&quot;app.use((request, response, next) =&gt; &#123; response.write(&apos;Response from express&apos;); response.end();&#125;);// 创建 HTTP Server 而不是直接使用 express 监听const server = http.createServer(app);// 让 WebSocket 服务在创建的 HTTP 服务器上监听websocket.listen(server, sessionMiddleware);// 启动 HTTP 服务server.listen(config.serverPort);// 输出服务器启动日志console.log(`Server listening at http://127.0.0.1:$&#123;config.serverPort&#125;`); 重启服务 1pm2 restart app 更新 Nginx 代理 编辑 Nginx 配置 ssl.conf，添加 WebSocket 支持，可参考下面的配置(注：请将参考配置文件中的 www.example.com 替换为前面步骤申请的域名，将 1_www.example.com.crt 和 2_www.example.com.key 替换为前面步骤申请并上传的 SSL 证书的名称)： 1234567891011121314151617181920212223242526# WebSocket 配置map $http_upgrade $connection_upgrade &#123; default upgrade; &apos;&apos; close;&#125;server &#123; listen 443; server_name www.example.com; # 改为绑定证书的域名 # ssl 配置 ssl on; ssl_certificate 1_www.example.com.crt; # 改为自己申请得到的 crt 文件的名称 ssl_certificate_key 2_www.example.com.key; # 改为自己申请得到的 key 文件的名称 ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; # WebSocket 配置 proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; location / &#123; proxy_pass http://127.0.0.1:8765; &#125; &#125; 通知 Nginx 进程重新加载配置： 1nginx -s reload 测试 WebSocket 打开配套的小程序，点击 实验三：WebSocket。进入测试页面后，点击 连接 按钮，如果出现连接成功的提示，表示 WebSocket 服务已经正常运行，可以收发消息。 7. 剪刀石头布小游戏 实现游戏房间逻辑 创建 /data/release/weapp/game 目录用于存放剪刀石头布小游戏的代码 1mkdir -p /data/release/weapp/game 添加 game/Room.js 实现游戏房间逻辑，可参考下面的代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155/**enum GameChoice &#123; // 剪刀 Scissors = 1, // 石头 Rock = 2, // 布 Paper = 3&#125;*/function judge(choice1, choice2) &#123; // 和局 if (choice1 == choice2) return 0; // Player 1 没出，Player 2 胜出 if (!choice1) return 1; // Player 2 没出，Player 1 胜出 if (!choice2) return -1; // 都出了就这么算 return (choice1 - choice2 + 3) % 3 == 1 ? -1 : 1;&#125;/** @type &#123;Room[]&#125; */const globalRoomList = [];// 每个房间最多两人const MAX_ROOT_MEMBER = 2;// 游戏时间，单位秒const GAME_TIME = 3;let nextRoomId = 0;/** 表示一个房间 */module.exports = class Room &#123; /** 获取所有房间 */ static all() &#123; return globalRoomList.slice(); &#125; /** 获取有座位的房间 */ static findRoomWithSeat() &#123; return globalRoomList.find(x =&gt; !x.isFull()); &#125; /** 创建新房间 */ static create() &#123; const room = new Room(); globalRoomList.unshift(room); return room; &#125; constructor() &#123; this.id = `room$&#123;nextRoomId++&#125;`; this.players = []; &#125; /** 添加玩家 */ addPlayer(player) &#123; const &#123; uid, uname &#125; = player.user; console.log(`Player $&#123;uid&#125;($&#123;uname&#125;) enter $&#123;this.id&#125;`); this.players.push(player); if (this.isFull()) &#123; this.startGame(); &#125; &#125; /** 删除玩家 */ removePlayer(player) &#123; const &#123; uid, uname &#125; = player.user; console.log(`Player $&#123;uid&#125;($&#123;uname&#125;) leave $&#123;this.id&#125;`); const playerIndex = this.players.indexOf(player); if (playerIndex != -1) &#123; this.players.splice(playerIndex, 1); &#125; if (this.players.length === 0) &#123; console.log(`Room $&#123;this.id&#125; is empty now`); const roomIndex = globalRoomList.indexOf(this); if (roomIndex &gt; -1) &#123; globalRoomList.splice(roomIndex, 1); &#125; &#125; &#125; /** 玩家已满 */ isFull() &#123; return this.players.length == MAX_ROOT_MEMBER; &#125; /** 开始游戏 */ startGame() &#123; // 保留这行日志输出可以让实验室检查到实验的完成情况 console.log(&apos;game started!&apos;); // 当局积分清零 this.players.forEach(player =&gt; player.gameData.roundScore = 0); // 集合玩家用户和游戏数据 const players = this.players.map(player =&gt; Object.assign(&#123;&#125;, player.user, player.gameData)); // 通知所有玩家开始 for (let player of this.players) &#123; player.send(&apos;start&apos;, &#123; gameTime: GAME_TIME, players &#125;); &#125; // 计时结束 setTimeout(() =&gt; this.finishGame(), GAME_TIME * 1000); &#125; /** 结束游戏 */ finishGame() &#123; const players = this.players; // 两两对比算分 for (let i = 0; i &lt; MAX_ROOT_MEMBER; i++) &#123; let p1 = players[i]; if (!p1) break; for (let j = i + 1; j &lt; MAX_ROOT_MEMBER; j++) &#123; let p2 = players[j]; const result = judge(p1.gameData.choice, p2.gameData.choice); p1.gameData.roundScore -= result; p2.gameData.roundScore += result; &#125; &#125; // 计算连胜奖励 for (let player of players) &#123; const gameData = player.gameData; // 胜局积分 if (gameData.roundScore &gt; 0) &#123; gameData.winStreak++; gameData.roundScore *= gameData.winStreak; &#125; // 败局清零 else if (gameData.roundScore &lt; 0) &#123; gameData.roundScore = 0; gameData.winStreak = 0; &#125; // 累积总分 gameData.totalScore += gameData.roundScore; &#125; // 计算结果 const result = players.map(player =&gt; &#123; const &#123; uid &#125; = player.user; const &#123; roundScore, totalScore, winStreak, choice &#125; = player.gameData; return &#123; uid, roundScore, totalScore, winStreak, choice &#125;; &#125;); // 通知所有玩家游戏结果 for (let player of players) &#123; player.send(&apos;result&apos;, &#123; result &#125;); &#125; &#125;&#125; 实现玩家逻辑 添加 game/Player.js 实现玩家逻辑，可参考下面的代码：const Room = require(“./Room”); 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798/** * 表示一个玩家，处理玩家的公共游戏逻辑，消息处理部分需要具体的玩家实现（请参考 ComputerPlayer 和 HumanPlayer） */module.exports = class Player &#123; constructor(user) &#123; this.id = user.uid; this.user = user; this.room = null; this.gameData = &#123; // 当前的选择（剪刀/石头/布） choice: null, // 局积分 roundScore: 0, // 总积分 totalScore: 0, // 连胜次数 winStreak: 0 &#125;; &#125; /** * 上线当前玩家，并且异步返回给玩家分配的房间 */ online(room) &#123; // 处理玩家 &apos;join&apos; 消息 // 为玩家寻找一个可用的房间，并且异步返回 this.receive(&apos;join&apos;, () =&gt; &#123; if (this.room) &#123; this.room.removePlayer(this); &#125; room = this.room = room || Room.findRoomWithSeat() || Room.create(); room.addPlayer(this); &#125;); // 处理玩家 &apos;choise&apos; 消息 // 需要记录玩家当前的选择，并且通知到房间里的其它玩家 this.receive(&apos;choice&apos;, (&#123; choice &#125;) =&gt; &#123; this.gameData.choice = choice; this.broadcast(&apos;movement&apos;, &#123; uid: this.user.uid, movement: &quot;choice&quot; &#125;); &#125;); // 处理玩家 &apos;leave&apos; 消息 // 让玩家下线 this.receive(&apos;leave&apos;, () =&gt; this.offline); &#125; /** * 下线当前玩家，从房间离开 */ offline() &#123; if (this.room) &#123; this.room.removePlayer(this); this.room = null; &#125; this.user = null; this.gameData = null; &#125; /** * 发送指定消息给当前玩家，需要具体子类实现 * @abstract * @param &#123;string&#125; message 消息类型 * @param &#123;*&#125; data 消息数据 */ send(message, data) &#123; throw new Error(&apos;Not implement: AbstractPlayer.send()&apos;); &#125; /** * 处理玩家发送的消息，需要具体子类实现 * @abstract * @param &#123;string&#125; message 消息类型 * @param &#123;Function&#125; handler */ receive(message, handler) &#123; throw new Error(&apos;Not implement: AbstractPlayer.receive()&apos;); &#125; /** * 给玩家所在房间里的其它玩家发送消息 * @param &#123;string&#125; message 消息类型 * @param &#123;any&#125; data 消息数据 */ broadcast(message, data) &#123; if (!this.room) return; this.others().forEach(neighbor =&gt; neighbor.send(message, data)); &#125; /** * 获得玩家所在房间里的其他玩家 */ others() &#123; return this.room.players.filter(player =&gt; player != this); &#125;&#125; 实现电脑玩家 在实现人类玩家之前，我们先来创建 ComputerPlayer.js 来实现电脑玩家 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465const EventEmitter = require(&apos;events&apos;);const Player = require(&apos;./Player&apos;);let nextComputerId = 0;/** * 机器人玩家实现，使用 EventEmitter 接收和发送消息 */module.exports = class ComputerPlayer extends Player &#123; constructor() &#123; const computerId = `robot-$&#123;++nextComputerId&#125;`; super(&#123; uid: computerId, uname: computerId, uavatar: &apos;http://www.scoutiegirl.com/wp-content/uploads/2015/06/Blue-Robot.png&apos; &#125;); this.emitter = new EventEmitter(); &#125; /** * 模拟玩家行为 */ simulate() &#123; this.receive(&apos;start&apos;, () =&gt; this.play()); this.receive(&apos;result&apos;, () =&gt; this.stop()); this.send(&apos;join&apos;); &#125; /** * 游戏开始后，随机时间后随机选择 */ play() &#123; this.playing = true; const randomTime = () =&gt; Math.floor(100 + Math.random() * 2000); const randomChoice = () =&gt; &#123; if (!this.playing) return; this.send(&quot;choice&quot;, &#123; choice: Math.floor(Math.random() * 10000) % 3 + 1 &#125;); setTimeout(randomChoice, randomTime()); &#125; setTimeout(randomChoice, 10); &#125; /** * 游戏结束后，标记起来，阻止继续随机选择 */ stop() &#123; this.playing = false; &#125; /** * 发送消息给当前玩家，直接转发到 emitter */ send(message, data) &#123; this.emitter.emit(message, data); &#125; /** * 从当前的 emitter 处理消息 */ receive(message, handle) &#123; this.emitter.on(message, handle); &#125;&#125; 实现人类玩家 人类玩家通过 WebSocket 信道来实现玩家的输入输出，我们需要添加 game/Tunnel.js 和 game/HumanPlayer.js 来实现人类玩家逻辑，可参考下面的代码： Tunnel.js 12345678910111213141516171819202122232425262728const EventEmitter = require(&apos;events&apos;);/** * 封装 WebSocket 信道 */module.exports = class Tunnel &#123; constructor(ws) &#123; this.emitter = new EventEmitter(); this.ws = ws; ws.on(&apos;message&apos;, packet =&gt; &#123; try &#123; // 约定每个数据包格式：&#123; message: &apos;type&apos;, data: any &#125; const &#123; message, data &#125; = JSON.parse(packet); this.emitter.emit(message, data); &#125; catch (err) &#123; console.log(&apos;unknown packet: &apos; + packet); &#125; &#125;); &#125; on(message, handle) &#123; this.emitter.on(message, handle); &#125; emit(message, data) &#123; this.ws.send(JSON.stringify(&#123; message, data &#125;)); &#125;&#125; HumanPlayer.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869const co = require(&apos;co&apos;);const Player = require(&apos;./Player&apos;);const ComputerPlayer = require(&apos;./ComputerPlayer&apos;);const Tunnel = require(&apos;./Tunnel&apos;);/** * 人类玩家实现，通过 WebSocket 信道接收和发送消息 */module.exports = class HumanPlayer extends Player &#123; constructor(user, ws) &#123; super(user); this.ws = ws; this.tunnel = new Tunnel(ws); this.send(&apos;id&apos;, user); &#125; /** * 人类玩家上线后，还需要监听信道关闭，让玩家下线 */ online(room) &#123; super.online(room); this.ws.on(&apos;close&apos;, () =&gt; this.offline()); // 人类玩家请求电脑玩家 this.receive(&apos;requestComputer&apos;, () =&gt; &#123; const room = this.room; while(room &amp;&amp; !room.isFull()) &#123; const computer = new ComputerPlayer(); computer.online(room); computer.simulate(); &#125; &#125;); &#125; /** * 下线后关闭信道 */ offline() &#123; super.offline(); if (this.ws &amp;&amp; this.ws.readyState == this.ws.OPEN) &#123; this.ws.close(); &#125; this.ws = null; this.tunnel = null; if (this.room) &#123; // 清理房间里面的电脑玩家 for (let player of this.room.players) &#123; if (player instanceof ComputerPlayer) &#123; this.room.removePlayer(player); &#125; &#125; this.room = null; &#125; &#125; /** * 通过 WebSocket 信道发送消息给玩家 */ send(message, data) &#123; this.tunnel.emit(message, data); &#125; /** * 从 WebSocket 信道接收玩家的消息 */ receive(message, callback) &#123; this.tunnel.on(message, callback); &#125;&#125; 添加游戏服务入口 游戏的实现已经完成了，接下来，编辑 websocket.js 添加服务入口，可参考下面的代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990// 引入 url 模块用于解析 URLconst url = require(&apos;url&apos;);// 引入 ws 支持 WebSocket 的实现const ws = require(&apos;ws&apos;);// 引入人类玩家const HumanPlayer = require(&apos;./game/HumanPlayer&apos;);// 导出处理方法exports.listen = listen;/** * 在 HTTP Server 上处理 WebSocket 请求 * @param &#123;http.Server&#125; server * @param &#123;wafer.SessionMiddleware&#125; sessionMiddleware */function listen(server, sessionMiddleware) &#123; // 使用 HTTP Server 创建 WebSocket 服务，使用 path 参数指定需要升级为 WebSocket 的路径 const wss = new ws.Server(&#123; server &#125;); // 同时支持 /ws 和 /game 的 WebSocket 连接请求 wss.shouldHandle = (request) =&gt; &#123; const path = url.parse(request.url).pathname; request.path = path; return [&apos;/ws&apos;, &apos;/game&apos;].indexOf(path) &gt; -1; &#125;; // 监听 WebSocket 连接建立 wss.on(&apos;connection&apos;, (ws, request) =&gt; &#123; // request: 要升级到 WebSocket 协议的 HTTP 连接 // 被升级到 WebSocket 的请求不会被 express 处理， // 需要使用会话中间节获取会话 sessionMiddleware(request, null, () =&gt; &#123; const session = request.session; if (!session) &#123; // 没有获取到会话，强制断开 WebSocket 连接 ws.send(JSON.stringify(request.sessionError) || &quot;No session avaliable&quot;); ws.close(); return; &#125; console.log(`WebSocket client connected with openId=$&#123;session.userInfo.openId&#125;`); // 根据请求的地址进行不同处理 switch (request.path) &#123; case &apos;/ws&apos;: return serveMessage(ws, session.userInfo); case &apos;/game&apos;: return serveGame(ws, session.userInfo); default: return ws.close(); &#125; &#125;); &#125;); // 监听 WebSocket 服务的错误 wss.on(&apos;error&apos;, (err) =&gt; &#123; console.log(err); &#125;);&#125;/** * 进行简单的 WebSocket 服务，对于客户端发来的所有消息都回复回去 */function serveMessage(ws, userInfo) &#123; // 监听客户端发来的消息 ws.on(&apos;message&apos;, (message) =&gt; &#123; console.log(`WebSocket received: $&#123;message&#125;`); ws.send(`Server: Received($&#123;message&#125;)`); &#125;); // 监听关闭事件 ws.on(&apos;close&apos;, (code, message) =&gt; &#123; console.log(`WebSocket client closed (code: $&#123;code&#125;, message: $&#123;message || &apos;none&apos;&#125;)`); &#125;); // 连接后马上发送 hello 消息给会话对应的用户 ws.send(`Server: 恭喜，$&#123;userInfo.nickName&#125;`);&#125;/** * 使用 WebSocket 进行游戏服务 */function serveGame(ws, userInfo) &#123; const user = &#123; uid: userInfo.openId, uname: userInfo.nickName, uavatar: userInfo.avatarUrl &#125;; // 创建玩家 const player = new HumanPlayer(user, ws); // 玩家上线 player.online();&#125; 安装 co 模块 我们的源码中使用到了 co 进行协程管理，启动游戏服务前，需要先安装： 12cd /data/release/weappnpm install co --save 测试游戏服务 重启 Node 服务： 1pm2 restart app 打开配套的小程序，点击 实验四 - 剪刀石头布小游戏，点击 开始 按钮进行游戏。 测试完成","raw":"---\ntitle: 基于CentOS搭建微信小程序服务\ndate: 2017-10-16 15:51:21\ntags: linux weixin\n---\n**1. 准备域名、证书和服务器**\n\n小程序后台服务需要通过 HTTPS 访问，在实验开始之前，我们要准备域名和 SSL 证书。\n\n- 购买云服务器（[腾讯云](https://cloud.tencent.com/product/cvm)）\n\n- 域名解析\n\n\t域名购买完成后, 需要将域名解析到云主机\n\t\n\t域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 ，如：`ping www.yourdomain.com`。\n\t\n\t如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。\n\n- 申请 SSL 证书\n\n**2. 搭建小程序开发环境**\n\n在开始搭建我们的小程序服务器之前，需要先完成客户端小程序开发环境的搭建。\n\n- 注册开发者账号\n\n\t如果你还不是小程序开发者，请先在微信公众平台并注册：[https://mp.weixin.qq.com](https://mp.weixin.qq.com)\n\n- 配置小程序服务器信息\n\n\t登录微信公众平台后，依次进入 `设置` - `开发设置` - `服务器域名` - `修改`。\n\t\n\t扫码完成身份校验后，request 合法域名和 socket 合法域名均填写在上一步准备好的域名地址。\n\t\n\t配置完成后，点击 `保存并提交`。\n\n- 运行配套小程序代码\n\n\t要运行本实验配套的小程序代码，请下载下列资源：\n\t- [实验配套源码](https://codeload.github.com/tencentyun/lab-weapp-client/zip/master)\n\t- [微信小程序开发工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html)\n\t\n\t源码下载后，请解压到本地工作目录。\n\t\n\t开发工具下载后，请安装并启动，然后用微信扫码登录。\n\t\n\t登录后，选择 `本地小程序项目` - `添加项目`，使用以下配置：\n\n\t- AppID：填写小程序的 AppID，请登录[公众平台](https://mp.weixin.qq.com/)后在 `设置` - `开发设置` - `开发者 ID` 中查看\n\n\t- 项目名称：填写任意您喜欢的名称\n\n\t- 项目目录：选择刚才解压的配套源码目录（目录包含 `app.js`）\n\n\t填写完成后，点击 添加项目。\n\n- 设置实验域名\n\n\t在开发工具的 `编辑` 面板中，选中 `app.js` 进行编辑，需要修改小程序通信域名，请参考下面的配置：\n\t\n\t```\n\tApp({\n\t    config: {\n\t        host: '' // 这个地方填写你的域名\n\t    },\n\t    onLaunch () {\n\t        console.log('App.onLaunch()');\n\t    }\n\t});\n\t```\n\n**3. 搭建 HTTP 服务**\n\n下面的步骤，将带大家在服务器上使用 Node 和 Express 搭建一个 HTTP 服务器\n\n- 安装 NodeJS 和 NPM\n\t\n\t使用下面的命令安装 NodeJS 和 NPM\n\t\n\t```\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\nyum install nodejs -y\n\t```\n\t安装完成后，使用下面的命令测试安装结果\n   \n   ```\nnode -v\n\t```\n- 编写 HTTP Server 源码\n\n\t*创建工作目录*\n\n\t使用下面的命令在服务器创建一个工作目录：\n\n\t```\nmkdir -p /data/release/weapp\n\t```\n\t*进入此工作目录*\n\t\n\t```\ncd /data/release/weapp\n\t```\n\t*创建 package.json*\n\t\n\t在刚才创建的工作目录创建 `package.json`，添加我们服务器包的名称和版本号，可参考下面的示例。\n\t\n\t```\n\t{\n\t    \"name\": \"weapp\",\n\t    \"version\": \"1.0.0\"\n\t}\n\t```\n\t*添加 Server 源码*\n\n\t在工作目录创建 `app.js`，使用 Express.js 来监听 `8765` 端口\n，可参考下面的示例代码。\n\n\t```\n\t// 引用 express 来支持 HTTP Server 的实现\n\tconst express = require('express');\n\n\t// 创建一个 express 实例\n\tconst app = express();\n\n\t// 实现唯一的一个中间件，对于所有请求，都输出 \"Response from express\"\n\tapp.use((request, response, next) => {\n\t    response.write('Response from express');\n\t    response.end();\n\t});\n\n\t// 监听端口，等待连接\n\tconst port = 8765;\n\tapp.listen(port);\n\n\t// 输出服务器启动日志\n\tconsole.log(`Server listening at http://127.0.0.1:${port}`);\n\t```\n\n- 运行 HTTP 服务\n\n\t*安装 PM2*\n\n\t在开始之前，我们先来安装 PM2\n\t\n\t```\nnpm install pm2 --global\n\t```\n\n\tPM2 安装时间可能稍长，请耐心等候 \n\n\t*安装 Express*\n\n\t我们的服务器源码里使用到了 Express 模块，下面的命令使用 NPM 来安装 Express\n\n\t```\ncd /data/release/weapp\nnpm install express --save\n\t```\n\n\t*启动服务*\n\n\t安装完成后，使用 PM2 来启动 HTTP 服务\n\t```\ncd /data/release/weapp\npm2 start app.js\n\t```\n\t现在，您的 HTTP 服务已经在 http://yourdomain.com:8765 运行\n\n\t要查看服务输出的日志，可以使用下面的命令：\n\t```\npm2 logs\n\t```\n\n\t如果要重启服务，可以使用下面的命令：\n\t```\npm2 restart app\n\t```\n\n**4. 搭建 HTTPS 服务**\n\n微信小程序要求和服务器的通信都通过 HTTPS 进行\n\n- 安装 Nginx\n\n\t在 CentOS 上，可直接使用 `yum` 来安装 Nginx\n\t```\nyum install nginx -y\n\t```\n\n\t安装完成后，使用 `nginx` 命令启动 Nginx：\n\t```\nnginx\n\t```\n\t此时，访问 http://yourdomain.com 可以看到 Nginx 的测试页面\n\n- 配置 HTTPS 反向代理\n\n\t外网用户访问服务器的 Web 服务由 Nginx 提供，Nginx 需要配置反向代理才能使得 Web 服务转发到本地的 Node 服务。\n\n\t先将之前下载的 SSL 证书(解压后 Nginx 目录分别以 crt 和 key 作为后缀的文件)通过 `PuTTy`（Windows） 或者 `sftp`（MacOS 或 Linux） 上传到服务器的 `/etc/nginx` 目录。\n\t\n\t> 参考：[putty教程](http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/putty.html)、[sftp教程](http://blog.csdn.net/qq_26954773/article/details/78199365)\n\t\n\tNginx 配置目录在 `/etc/nginx/conf.d`，我们在该目录创建 `ssl.conf`，内容如下：\n\t```\nserver {\n        listen 443;\n        server_name www.example.com; # 改为绑定证书的域名\n        # ssl 配置\n        ssl on;\n        ssl_certificate 1_www.example.com_bundle.crt; # 改为自己申请得到的 crt 文件的名称\n        ssl_certificate_key 2_www.example.com.key; # 改为自己申请得到的 key 文件的名称\n        ssl_session_timeout 5m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n        ssl_prefer_server_ciphers on;\n\n        location / {\n            proxy_pass http://127.0.0.1:8765;\n        }\n    }\n\t```\n\t让 Nginx 重新加载配置使其生效\n\t```\nnginx -s reload\n\t```\n\t在浏览器通过 https 的方式访问你解析的域名来测试 HTTPS 是否成功启动\n\n- 在小程序中测试 HTTPS 访问\n\n\t打开配套的小程序，点击 `实验一：HTTPS`，点击 `发送请求` 来测试访问结果。\n\n**5. 小程序会话**\n\t\n小程序不支持 Cookie 存储和跟踪，服务器需要自行实现会话层\n\n- 安装 MongoDB\n\n\t使用 Yum 在机器上安装 MongoDB及其客户端命令行工具：\n\t```\nyum install mongodb-server mongodb -y\n\t```\n\t安装结束后，可以使用下面的命令查看安装的版本：\n\t```\nmongod --version\nmongo --version\n\t```\n- 启动 MongoDB\n\n\t创建目录，用于 MongoDB 数据和日志存储：\n\t```\nmkdir -p /data/mongodb\nmkdir -p /data/logs/mongodb\n\t```\n\t创建后，使用下面的命令来启动 MongoDB：\n\t```\nmongod --fork --dbpath /data/mongodb --logpath /data/logs/mongodb/weapp.log\n\t```\n\t可以使用下面的命令来检查是否启动成功 \n\t```\nnetstat -ltp | grep 27017\n\t```\n- 添加 MongoDB 用户\n\n\t登录本地 MongoDB 服务：\n\t```\nmongo\n\t```\n\t登录后，创建一个用户 `weapp` ：\n\t```\nuse weapp;\ndb.createUser({ user: 'weapp', pwd: 'weapp-dev', roles: ['dbAdmin', 'readWrite']});\n\t```\n\t创建完成后，使用 `exit` 退出命令行工具。\n\n- 安装 Node 模块\n\n\t实现小程序的会话功能，我们需要安装 `connect-mongo`\n 和 `wafer-node-session`\n\t```\ncd /data/release/weapp\nnpm install connect-mongo wafer-node-session --save\n\t```\n\n- 实现小程序会话\n\n\t在工作目录创建配置文件 `config.js`，用于保存我们服务所用的配置，可参考下面的实现(注：请将参考配置文件中的 `YORU_APP_ID` 和 `YOUR_APP_SECRET` 替换为你申请的小程序对应的 AppID 和 AppSecret)：\n\t```\n\tmodule.exports = { \n\t    serverPort: '8765', \n\n\t    // 小程序 appId 和 appSecret \n\t    // 请到 https://mp.weixin.qq.com 获取 AppID 和 AppSecret\n\t    appId: 'YORU_APP_ID', \n\t    appSecret: 'YOUR_APP_SECRET', \n\n\t    // mongodb 连接配置，生产环境请使用更复杂的用户名密码\n\t    mongoHost: '127.0.0.1', \n\t    mongoPort: '27017', \n\t    mongoUser: 'weapp', \n\t    mongoPass: 'weapp-dev', \n\t    mongoDb: 'weapp'\n\t};\n\t```\n\t编辑 `app.js`，添加会话实现逻辑，可参考下面的代码：\n\t\n\t```\n\t// 引用 express 来支持 HTTP Server 的实现\n\tconst express = require('express');\n\t// 引用 wafer-session 支持小程序会话\n\tconst waferSession = require('wafer-node-session'); \n\t// 使用 MongoDB 作为会话的存储\n\tconst MongoStore = require('connect-mongo')(waferSession); \n\t// 引入配置文件\n\tconst config = require('./config'); \n\n\t// 创建一个 express 实例\n\tconst app = express();\n\n\t// 添加会话中间件，登录地址是 /login\n\tapp.use(waferSession({ \n\t    appId: config.appId, \n\t    appSecret: config.appSecret, \n\t    loginPath: '/login',\n\t    store: new MongoStore({ \n\t\turl: `mongodb://${config.mongoUser}:${config.mongoPass}@${config.mongoHost}:${config.mongoPort}/${config.mongoDb}` \n\t    }) \n\t})); \n\n\t// 在路由 /me 下，输出会话里包含的用户信息\n\tapp.use('/me', (request, response, next) => { \n\t\t    response.json(request.session ? request.session.userInfo : { noBody: true }); \n\t    if (request.session) {\n\t        console.log(`Wafer session success with openId=${request.session.userInfo.openId}`);\n\t    }\n\t}); \n\n\t// 实现一个中间件，对于未处理的请求，都输出 \"Response from express\"\n\tapp.use((request, response, next) => {\n\t    response.write('Response from express');\n\t    response.end();\n\t});\n\n\t// 监听端口，等待连接\n\tapp.listen(config.serverPort);\n\n\t// 输出服务器启动日志\n\tconsole.log(`Server listening at http://127.0.0.1:${config.serverPort}`);\n\t```\n\t源码编写完成后，重启服务：\n\t```\npm2 restart app\n\t```\n\t重启后，使用配套的小程序完成会话测试：打开配套小程序 - 点击 `实验二：会话` - `获取会话`，如果您能看到您的微信头像，那就表示会话已经成功获取了。\n\n**6. WebSocket 服务**\n\n- 安装 Node 模块\n\n\t本实验使用 `ws` 模块来在服务器上支持 WebSocket 协议，下面使用 NPM 来安装：\n\t```\ncd /data/release/weapp\nnpm install ws --save\n\t```\n- 实现 WebSocket 服务器\n\t\n\t创建 `websocket.js`，实现 WebSocket 服务，可参考下面的代码：\n\n\t```\n\t// 引入 ws 支持 WebSocket 的实现\n\tconst ws = require('ws');\n\n\t// 导出处理方法\n\texports.listen = listen;\n\n\t/**\n\t * 在 HTTP Server 上处理 WebSocket 请求\n\t * @param {http.Server} server\n\t * @param {wafer.SessionMiddleware} sessionMiddleware\n\t */\n\tfunction listen(server, sessionMiddleware) {\n\t    // 使用 HTTP Server 创建 WebSocket 服务，使用 path 参数指定需要升级为 WebSocket 的路径\n\t    const wss = new ws.Server({ server, path: '/ws' });\n\n\t    // 监听 WebSocket 连接建立\n\t    wss.on('connection', (ws,request) => {// 要升级到 WebSocket 协议的 HTTP 连接\n\n\t\t    // 被升级到 WebSocket 的请求不会被 express 处理，\n\t        // 需要使用会话中间节获取会话\n\t        sessionMiddleware(request, null, () => {\n\t            const session = request.session;\n\t            if (!session) {\n\t                // 没有获取到会话，强制断开 WebSocket 连接\n\t                ws.send(JSON.stringify(request.sessionError) || \"No session avaliable\");\n\t                ws.close();\n\t                return;\n\t            }\n\t            // 保留这个日志的输出可让实验室能检查到当前步骤是否完成\n\t            console.log(`WebSocket client connected with openId=${session.userInfo.openId}`);\n\t            serveMessage(ws, session.userInfo);\n\t        });\n\t    });\n\n\t    // 监听 WebSocket 服务的错误\n\t    wss.on('error', (err) => {\n\t\t        console.log(err);\n\t\t    });\n\t\t}\n\n\t/**\n\t * 进行简单的 WebSocket 服务，对于客户端发来的所有消息都回复回去\n\t */\n\tfunction serveMessage(ws, userInfo) {\n\t    // 监听客户端发来的消息\n\t    ws.on('message', (message) => {\n\t        console.log(`WebSocket received: ${message}`);\n\t        ws.send(`Server: Received(${message})`);\n\t    });\n\n\t    // 监听关闭事件\n\t    ws.on('close', (code, message) => {\n\t        console.log(`WebSocket client closed (code: ${code}, message: ${message || 'none'})`);\n\t    });\n\n\t    // 连接后马上发送 hello 消息给会话对应的用户\n\t    ws.send(`Server: 恭喜，${userInfo.nickName}`);\n\t}\n\t```\n\t编辑 `app.js`，调用 WebSocket 服务，可参考下面代码：\n\t```\n\t// HTTP 模块同时支持 Express 和 WebSocket\n\tconst http = require('http'); \n\t// 引用 express 来支持 HTTP Server 的实现\n\tconst express = require('express');\n\t// 引用 wafer-session 支持小程序会话\n\tconst waferSession = require('wafer-node-session'); \n\t// 使用 MongoDB 作为会话的存储\n\tconst MongoStore = require('connect-mongo')(waferSession); \n\t// 引入配置文件\n\tconst config = require('./config'); \n\t// 引入 WebSocket 服务实现\n\tconst websocket = require('./websocket');\n\n\t// 创建一个 express 实例\n\tconst app = express();\n\n\t// 独立出会话中间件给 express 和 ws 使用\n\tconst sessionMiddleware = waferSession({\n\t    appId: config.appId,\n\t    appSecret: config.appSecret,\n\t    loginPath: '/login',\n\t    store: new MongoStore({\n\t        url: `mongodb://${config.mongoUser}:${config.mongoPass}@${config.mongoHost}:${config.mongoPort}/${config.mongoDb}`\n\t    })\n\t});\n\tapp.use(sessionMiddleware);\n\n\t// 在路由 /me 下，输出会话里包含的用户信息\n\tapp.use('/me', (request, response, next) => { \n\t    response.json(request.session ? request.session.userInfo : { noBody: true }); \n\t    if (request.session) {\n\t        console.log(`Wafer session success with openId=${request.session.userInfo.openId}`);\n\t    }\n\t}); \n\n\t// 实现一个中间件，对于未处理的请求，都输出 \"Response from express\"\n\tapp.use((request, response, next) => {\n\t    response.write('Response from express');\n\t    response.end();\n\t});\n\n\t// 创建 HTTP Server 而不是直接使用 express 监听\n\tconst server = http.createServer(app);\n\n\t// 让 WebSocket 服务在创建的 HTTP 服务器上监听\n\twebsocket.listen(server, sessionMiddleware);\n\n\t// 启动 HTTP 服务\n\tserver.listen(config.serverPort);\n\n\t// 输出服务器启动日志\n\tconsole.log(`Server listening at http://127.0.0.1:${config.serverPort}`);\n\t```\n\t重启服务\n\t```\n\tpm2 restart app\n\t```\n- 更新 Nginx 代理\n\n\t编辑 Nginx 配置 `ssl.conf`，添加 WebSocket 支持，可参考下面的配置(注：请将参考配置文件中的 www.example.com 替换为前面步骤申请的域名，将 1_www.example.com.crt 和 2_www.example.com.key 替换为前面步骤申请并上传的 SSL 证书的名称)：\n\t```\n\t# WebSocket 配置\n\tmap $http_upgrade $connection_upgrade {\n\t    default upgrade;\n\t    ''      close;\n\t}\n\n\tserver {\n        listen 443;\n        server_name www.example.com; # 改为绑定证书的域名\n        # ssl 配置\n        ssl on;\n        ssl_certificate 1_www.example.com.crt; # 改为自己申请得到的 crt 文件的名称\n        ssl_certificate_key 2_www.example.com.key; # 改为自己申请得到的 key 文件的名称\n        ssl_session_timeout 5m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n        ssl_prefer_server_ciphers on;\n\n        # WebSocket 配置\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        location / {\n            proxy_pass http://127.0.0.1:8765;\n        }\n    }\n\t```\n\t通知 Nginx 进程重新加载配置：\n\t```\nnginx -s reload\n\t```\n- 测试 WebSocket\n\n\t打开配套的小程序，点击 `实验三：WebSocket`。进入测试页面后，点击 `连接` 按钮，如果出现连接成功的提示，表示 WebSocket 服务已经正常运行，可以收发消息。\n\n**7. 剪刀石头布小游戏**\n\n- 实现游戏房间逻辑\n\n\t创建 `/data/release/weapp/game` 目录用于存放剪刀石头布小游戏的代码\n\t```\nmkdir -p /data/release/weapp/game\n\t```\n\t添加 `game/Room.js` 实现游戏房间逻辑，可参考下面的代码：\n\t\n\t```\n\t/**\n\tenum GameChoice {\n\t    // 剪刀\n\t    Scissors = 1,\n\t    // 石头\n\t    Rock = 2,\n\t    // 布\n\t    Paper = 3\n\t}\n\t*/\n\tfunction judge(choice1, choice2) {\n\t    // 和局\n\t    if (choice1 == choice2) return 0;\n\t    // Player 1 没出，Player 2 胜出\n\t    if (!choice1) return 1;\n\t    // Player 2 没出，Player 1 胜出\n\t    if (!choice2) return -1;\n\t    // 都出了就这么算\n\t    return (choice1 - choice2 + 3) % 3 == 1 ? -1 : 1;\n\t}\n\t\n\t/** @type {Room[]} */\n\tconst globalRoomList = [];\n\t\n\t// 每个房间最多两人\n\tconst MAX_ROOT_MEMBER = 2;\n\t\n\t// 游戏时间，单位秒\n\tconst GAME_TIME = 3;\n\t\n\tlet nextRoomId = 0;\n\t\n\t/** 表示一个房间 */\n\tmodule.exports = class Room {\n\t\n\t    /** 获取所有房间 */\n\t    static all() {\n\t        return globalRoomList.slice();\n\t    }\n\t\n\t    /** 获取有座位的房间 */\n\t    static findRoomWithSeat() {\n\t        return globalRoomList.find(x => !x.isFull());\n\t    }\n\t\n\t    /** 创建新房间 */\n\t    static create() {\n\t        const room = new Room();\n\t        globalRoomList.unshift(room);\n\t        return room;\n\t    }\n\t\n\t    constructor() {\n\t        this.id = `room${nextRoomId++}`;\n\t        this.players = [];\n\t    }\n\t\n\t    /** 添加玩家 */\n\t    addPlayer(player) {\n\t        const { uid, uname } = player.user;\n\t        console.log(`Player ${uid}(${uname}) enter ${this.id}`);\n\t        this.players.push(player);\n\t        if (this.isFull()) {\n\t            this.startGame();\n\t        }\n\t    }\n\t\n\t    /** 删除玩家 */\n\t    removePlayer(player) {\n\t        const { uid, uname } = player.user;\n\t        console.log(`Player ${uid}(${uname}) leave ${this.id}`);\n\t        const playerIndex = this.players.indexOf(player);\n\t        if (playerIndex != -1) {\n\t            this.players.splice(playerIndex, 1);\n\t        }\n\t        if (this.players.length === 0) {\n\t            console.log(`Room ${this.id} is empty now`);\n\t            const roomIndex = globalRoomList.indexOf(this);\n\t            if (roomIndex > -1) {\n\t                globalRoomList.splice(roomIndex, 1);\n\t            }\n\t        }\n\t    }\n\t\n\t    /** 玩家已满 */\n\t    isFull() {\n\t        return this.players.length == MAX_ROOT_MEMBER;\n\t    }\n\t\n\t    /** 开始游戏 */\n\t    startGame() {\n\t        // 保留这行日志输出可以让实验室检查到实验的完成情况\n\t        console.log('game started!');\n\t\n\t        // 当局积分清零\n\t        this.players.forEach(player => player.gameData.roundScore = 0);\n\t\n\t        // 集合玩家用户和游戏数据\n\t        const players = this.players.map(player => Object.assign({}, player.user, player.gameData));\n\t\n\t        // 通知所有玩家开始\n\t        for (let player of this.players) {\n\t            player.send('start', {\n\t                gameTime: GAME_TIME,\n\t                players\n\t            });\n\t        }\n\t\n\t        // 计时结束\n\t        setTimeout(() => this.finishGame(), GAME_TIME * 1000);\n\t    }\n\t\n\t    /** 结束游戏 */\n\t    finishGame() {\n\t        const players = this.players;\n\t\n\t        // 两两对比算分\n\t        for (let i = 0; i < MAX_ROOT_MEMBER; i++) {\n\t            let p1 = players[i];\n\t            if (!p1) break;\n\t            for (let j = i + 1; j < MAX_ROOT_MEMBER; j++) {\n\t                let p2 = players[j];\n\t                const result = judge(p1.gameData.choice, p2.gameData.choice);\n\t                p1.gameData.roundScore -= result;\n\t                p2.gameData.roundScore += result;\n\t            }\n\t        }\n\t        // 计算连胜奖励\n\t        for (let player of players) {\n\t            const gameData = player.gameData;\n\t            // 胜局积分\n\t            if (gameData.roundScore > 0) {\n\t                gameData.winStreak++;\n\t                gameData.roundScore *= gameData.winStreak;\n\t            }\n\t            // 败局清零\n\t            else if (gameData.roundScore < 0) {\n\t                gameData.roundScore = 0;\n\t                gameData.winStreak = 0;\n\t            }\n\t            // 累积总分\n\t            gameData.totalScore += gameData.roundScore;\n\t        }\n\t        // 计算结果\n\t        const result = players.map(player => {\n\t            const { uid } = player.user;\n\t            const { roundScore, totalScore, winStreak, choice } = player.gameData;\n\t            return { uid, roundScore, totalScore, winStreak, choice };\n\t        });\n\t        // 通知所有玩家游戏结果\n\t        for (let player of players) {\n\t            player.send('result', { result });\n\t        }\n\t    }\n\t}\n\t```\n- 实现玩家逻辑\n\n\t添加 game/Player.js 实现玩家逻辑，可参考下面的代码：\nconst Room = require(\"./Room\");\n\t```\n\t/**\n\t * 表示一个玩家，处理玩家的公共游戏逻辑，消息处理部分需要具体的玩家实现（请参考 ComputerPlayer 和 HumanPlayer）\n\t */\n\tmodule.exports = class Player {\n\t    constructor(user) {\n\t        this.id = user.uid;\n\t        this.user = user;\n\t        this.room = null;\n\t        this.gameData = {\n\t            // 当前的选择（剪刀/石头/布）\n\t            choice: null,\n\t            // 局积分\n\t            roundScore: 0,\n\t            // 总积分\n\t            totalScore: 0,\n\t            // 连胜次数\n\t            winStreak: 0\n\t        };\n\t    }\n\t\n\t    /**\n\t     * 上线当前玩家，并且异步返回给玩家分配的房间\n\t     */\n\t    online(room) {\n\t        // 处理玩家 'join' 消息\n\t        // 为玩家寻找一个可用的房间，并且异步返回\n\t        this.receive('join', () => {\n\t            if (this.room) {\n\t                this.room.removePlayer(this);\n\t            }\n\t            room = this.room = room || Room.findRoomWithSeat() || Room.create();\n\t            room.addPlayer(this);\n\t        });\n\t\n\t        // 处理玩家 'choise' 消息\n\t        // 需要记录玩家当前的选择，并且通知到房间里的其它玩家\n\t        this.receive('choice', ({ choice }) => {\n\t            this.gameData.choice = choice;\n\t            this.broadcast('movement', {\n\t                uid: this.user.uid,\n\t                movement: \"choice\"\n\t            });\n\t        });\n\t\n\t        // 处理玩家 'leave' 消息\n\t        // 让玩家下线\n\t        this.receive('leave', () => this.offline);\n\t    }\n\t\n\t    /**\n\t     * 下线当前玩家，从房间离开\n\t     */\n\t    offline() {\n\t        if (this.room) {\n\t            this.room.removePlayer(this);\n\t            this.room = null;\n\t        }\n\t        this.user = null;\n\t        this.gameData = null;\n\t    }\n\t\n\t    /**\n\t     * 发送指定消息给当前玩家，需要具体子类实现\n\t     * @abstract\n\t     * @param {string} message 消息类型\n\t     * @param {*} data 消息数据\n\t     */\n\t    send(message, data) {\n\t        throw new Error('Not implement: AbstractPlayer.send()');\n\t    }\n\t\n\t    /**\n\t     * 处理玩家发送的消息，需要具体子类实现\n\t     * @abstract\n\t     * @param {string} message 消息类型\n\t     * @param {Function} handler\n\t     */\n\t    receive(message, handler) {\n\t        throw new Error('Not implement: AbstractPlayer.receive()');\n\t    }\n\t\n\t    /**\n\t     * 给玩家所在房间里的其它玩家发送消息\n\t     * @param {string} message 消息类型\n\t     * @param {any} data 消息数据\n\t     */\n\t    broadcast(message, data) {\n\t        if (!this.room) return;\n\t        this.others().forEach(neighbor => neighbor.send(message, data));\n\t    }\n\t\n\t    /**\n\t     * 获得玩家所在房间里的其他玩家\n\t     */\n\t    others() {\n\t        return this.room.players.filter(player => player != this);\n\t    }\n\t}\n\t```\n- 实现电脑玩家\n\n\t在实现人类玩家之前，我们先来创建 `ComputerPlayer.js` 来实现电脑玩家\n\t```\n\tconst EventEmitter = require('events');\n\tconst Player = require('./Player');\n\t\n\tlet nextComputerId = 0;\n\t\n\t/**\n\t * 机器人玩家实现，使用 EventEmitter 接收和发送消息\n\t */\n\tmodule.exports = class ComputerPlayer extends Player {\n\t    constructor() {\n\t        const computerId = `robot-${++nextComputerId}`;\n\t        super({\n\t            uid: computerId,\n\t            uname: computerId,\n\t            uavatar: 'http://www.scoutiegirl.com/wp-content/uploads/2015/06/Blue-Robot.png'\n\t        });\n\t        this.emitter = new EventEmitter();\n\t    }\n\t\n\t    /**\n\t     * 模拟玩家行为\n\t     */\n\t    simulate() {\n\t        this.receive('start', () => this.play());\n\t        this.receive('result', () => this.stop());\n\t        this.send('join');\n\t    }\n\t\n\t    /**\n\t     * 游戏开始后，随机时间后随机选择\n\t     */\n\t    play() {\n\t        this.playing = true;\n\t        const randomTime = () => Math.floor(100 + Math.random() * 2000);\n\t        const randomChoice = () => {\n\t            if (!this.playing) return;\n\t            this.send(\"choice\", {\n\t                choice: Math.floor(Math.random() * 10000) % 3 + 1\n\t            });\n\t            setTimeout(randomChoice, randomTime());\n\t        }\n\t        setTimeout(randomChoice, 10);\n\t    }\n\t\n\t    /**\n\t     * 游戏结束后，标记起来，阻止继续随机选择\n\t     */\n\t    stop() {\n\t        this.playing = false;\n\t    }\n\t\n\t    /**\n\t     * 发送消息给当前玩家，直接转发到 emitter\n\t     */\n\t    send(message, data) {\n\t        this.emitter.emit(message, data);\n\t    }\n\t\n\t    /**\n\t     * 从当前的 emitter 处理消息\n\t     */\n\t    receive(message, handle) {\n\t        this.emitter.on(message, handle);\n\t    }\n\t}\n\t```\n- 实现人类玩家\n\n\t人类玩家通过 WebSocket 信道来实现玩家的输入输出\n，我们需要添加 `game/Tunnel.js` 和 `game/HumanPlayer.js` 来实现人类玩家逻辑，可参考下面的代码：\n\t\n\tTunnel.js\n\t```\n\tconst EventEmitter = require('events');\n\t\n\t/**\n\t * 封装 WebSocket 信道\n\t */\n\tmodule.exports = class Tunnel {\n\t    constructor(ws) {\n\t        this.emitter = new EventEmitter();\n\t        this.ws = ws;\n\t        ws.on('message', packet => {\n\t            try {\n\t                // 约定每个数据包格式：{ message: 'type', data: any }\n\t                const { message, data } = JSON.parse(packet);\n\t                this.emitter.emit(message, data);\n\t            } catch (err) {\n\t                console.log('unknown packet: ' + packet);\n\t            }\n\t        });\n\t    }\n\t\n\t    on(message, handle) {\n\t        this.emitter.on(message, handle);\n\t    }\n\t\n\t    emit(message, data) {\n\t        this.ws.send(JSON.stringify({ message, data }));\n\t    }\n\t}\n\t```\n\tHumanPlayer.js\n\t```\n\tconst co = require('co');\n\tconst Player = require('./Player');\n\tconst ComputerPlayer = require('./ComputerPlayer');\n\tconst Tunnel = require('./Tunnel');\n\t\n\t/**\n\t * 人类玩家实现，通过 WebSocket 信道接收和发送消息\n\t */\n\tmodule.exports = class HumanPlayer extends Player {\n\t    constructor(user, ws) {\n\t        super(user);\n\t        this.ws = ws;\n\t        this.tunnel = new Tunnel(ws);\n\t        this.send('id', user);\n\t    }\n\t\n\t    /**\n\t     * 人类玩家上线后，还需要监听信道关闭，让玩家下线\n\t     */\n\t    online(room) {\n\t        super.online(room);\n\t        this.ws.on('close', () => this.offline());\n\t\n\t        // 人类玩家请求电脑玩家\n\t        this.receive('requestComputer', () => {\n\t            const room = this.room;\n\t            while(room && !room.isFull()) {\n\t                const computer = new ComputerPlayer();\n\t                computer.online(room);\n\t                computer.simulate();\n\t            }\n\t        });\n\t    }\n\t\n\t    /**\n\t     * 下线后关闭信道\n\t     */\n\t    offline() {\n\t        super.offline();\n\t        if (this.ws && this.ws.readyState == this.ws.OPEN) {\n\t            this.ws.close();\n\t        }\n\t        this.ws = null;\n\t        this.tunnel = null;\n\t        if (this.room) {\n\t            // 清理房间里面的电脑玩家\n\t            for (let player of this.room.players) {\n\t                if (player instanceof ComputerPlayer) {\n\t                    this.room.removePlayer(player);\n\t                }\n\t            }\n\t            this.room = null;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * 通过 WebSocket 信道发送消息给玩家\n\t     */\n\t    send(message, data) {\n\t        this.tunnel.emit(message, data);\n\t    }\n\t\n\t    /**\n\t     * 从 WebSocket 信道接收玩家的消息\n\t     */\n\t    receive(message, callback) {\n\t        this.tunnel.on(message, callback);\n\t    }\n\t}\n\t```\n\n- 添加游戏服务入口\n\t\n\t游戏的实现已经完成了，接下来，编辑 `websocket.js` 添加服务入口，可参考下面的代码：\n\t```\n\t// 引入 url 模块用于解析 URL\n\tconst url = require('url');\n\t// 引入 ws 支持 WebSocket 的实现\n\tconst ws = require('ws');\n\t// 引入人类玩家\n\tconst HumanPlayer = require('./game/HumanPlayer');\n\t\n\t// 导出处理方法\n\texports.listen = listen;\n\t\n\t/**\n\t * 在 HTTP Server 上处理 WebSocket 请求\n\t * @param {http.Server} server\n\t * @param {wafer.SessionMiddleware} sessionMiddleware\n\t */\n\tfunction listen(server, sessionMiddleware) {\n\t    // 使用 HTTP Server 创建 WebSocket 服务，使用 path 参数指定需要升级为 WebSocket 的路径\n\t    const wss = new ws.Server({ server });\n\t\n\t    // 同时支持 /ws 和 /game 的 WebSocket 连接请求 \n\t    wss.shouldHandle = (request) => { \n\t        const path = url.parse(request.url).pathname; \n\t        request.path = path; \n\t        return ['/ws', '/game'].indexOf(path) > -1; \n\t    }; \n\t\n\t    // 监听 WebSocket 连接建立\n\t    wss.on('connection', (ws, request) => {\n\t        // request: 要升级到 WebSocket 协议的 HTTP 连接\n\t\n\t        // 被升级到 WebSocket 的请求不会被 express 处理，\n\t        // 需要使用会话中间节获取会话\n\t        sessionMiddleware(request, null, () => {\n\t            const session = request.session;\n\t            if (!session) {\n\t                // 没有获取到会话，强制断开 WebSocket 连接\n\t                ws.send(JSON.stringify(request.sessionError) || \"No session avaliable\");\n\t                ws.close();\n\t                return;\n\t            }\n\t            console.log(`WebSocket client connected with openId=${session.userInfo.openId}`);\n\t\n\t            // 根据请求的地址进行不同处理 \n\t            switch (request.path) { \n\t                case '/ws': return serveMessage(ws, session.userInfo); \n\t                case '/game': return serveGame(ws, session.userInfo); \n\t                default: return ws.close();\n\t            }\n\t        });\n\t    });\n\t\n\t    // 监听 WebSocket 服务的错误\n\t    wss.on('error', (err) => {\n\t        console.log(err);\n\t    });\n\t}\n\t\n\t/**\n\t * 进行简单的 WebSocket 服务，对于客户端发来的所有消息都回复回去\n\t */\n\tfunction serveMessage(ws, userInfo) {\n\t    // 监听客户端发来的消息\n\t    ws.on('message', (message) => {\n\t        console.log(`WebSocket received: ${message}`);\n\t        ws.send(`Server: Received(${message})`);\n\t    });\n\t\n\t    // 监听关闭事件\n\t    ws.on('close', (code, message) => {\n\t        console.log(`WebSocket client closed (code: ${code}, message: ${message || 'none'})`);\n\t    });\n\t\n\t    // 连接后马上发送 hello 消息给会话对应的用户\n\t    ws.send(`Server: 恭喜，${userInfo.nickName}`);\n\t}\n\t\n\t/**\n\t * 使用 WebSocket 进行游戏服务\n\t */\n\tfunction serveGame(ws, userInfo) {\n\t    const user = { \n\t        uid: userInfo.openId, \n\t        uname: userInfo.nickName, \n\t        uavatar: userInfo.avatarUrl \n\t    }; \n\t    // 创建玩家 \n\t    const player = new HumanPlayer(user, ws); \n\t    // 玩家上线\n\t    player.online();\n\t}\n\t```\n\n- 安装 co 模块\n\n\t我们的源码中使用到了 `co` 进行协程管理，启动游戏服务前，需要先安装：\n\t```\ncd /data/release/weapp\nnpm install co --save\n    ```\n- 测试游戏服务\n\n\t重启 Node 服务：\n\t```\npm2 restart app\n\t```\n\t打开配套的小程序，点击 `实验四 - 剪刀石头布小游戏`，点击 `开始` 按钮进行游戏。\n\n- 测试完成","content":"<p><strong>1. 准备域名、证书和服务器</strong></p>\n<p>小程序后台服务需要通过 HTTPS 访问，在实验开始之前，我们要准备域名和 SSL 证书。</p>\n<ul>\n<li><p>购买云服务器（<a href=\"https://cloud.tencent.com/product/cvm\" target=\"_blank\" rel=\"external\">腾讯云</a>）</p>\n</li>\n<li><p>域名解析</p>\n<p>  域名购买完成后, 需要将域名解析到云主机</p>\n<p>  域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 ，如：<code>ping www.yourdomain.com</code>。</p>\n<p>  如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p>\n</li>\n<li><p>申请 SSL 证书</p>\n</li>\n</ul>\n<p><strong>2. 搭建小程序开发环境</strong></p>\n<p>在开始搭建我们的小程序服务器之前，需要先完成客户端小程序开发环境的搭建。</p>\n<ul>\n<li><p>注册开发者账号</p>\n<p>  如果你还不是小程序开发者，请先在微信公众平台并注册：<a href=\"https://mp.weixin.qq.com\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com</a></p>\n</li>\n<li><p>配置小程序服务器信息</p>\n<p>  登录微信公众平台后，依次进入 <code>设置</code> - <code>开发设置</code> - <code>服务器域名</code> - <code>修改</code>。</p>\n<p>  扫码完成身份校验后，request 合法域名和 socket 合法域名均填写在上一步准备好的域名地址。</p>\n<p>  配置完成后，点击 <code>保存并提交</code>。</p>\n</li>\n<li><p>运行配套小程序代码</p>\n<p>  要运行本实验配套的小程序代码，请下载下列资源：</p>\n<ul>\n<li><a href=\"https://codeload.github.com/tencentyun/lab-weapp-client/zip/master\" target=\"_blank\" rel=\"external\">实验配套源码</a></li>\n<li><p><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html\" target=\"_blank\" rel=\"external\">微信小程序开发工具</a></p>\n<p>源码下载后，请解压到本地工作目录。</p>\n<p>开发工具下载后，请安装并启动，然后用微信扫码登录。</p>\n<p>登录后，选择 <code>本地小程序项目</code> - <code>添加项目</code>，使用以下配置：</p>\n</li>\n<li><p>AppID：填写小程序的 AppID，请登录<a href=\"https://mp.weixin.qq.com/\" target=\"_blank\" rel=\"external\">公众平台</a>后在 <code>设置</code> - <code>开发设置</code> - <code>开发者 ID</code> 中查看</p>\n</li>\n<li><p>项目名称：填写任意您喜欢的名称</p>\n</li>\n<li><p>项目目录：选择刚才解压的配套源码目录（目录包含 <code>app.js</code>）</p>\n<p>填写完成后，点击 添加项目。</p>\n</li>\n</ul>\n</li>\n<li><p>设置实验域名</p>\n<p>  在开发工具的 <code>编辑</code> 面板中，选中 <code>app.js</code> 进行编辑，需要修改小程序通信域名，请参考下面的配置：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">App(&#123;</div><div class=\"line\">    config: &#123;</div><div class=\"line\">        host: &apos;&apos; // 这个地方填写你的域名</div><div class=\"line\">    &#125;,</div><div class=\"line\">    onLaunch () &#123;</div><div class=\"line\">        console.log(&apos;App.onLaunch()&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>3. 搭建 HTTP 服务</strong></p>\n<p>下面的步骤，将带大家在服务器上使用 Node 和 Express 搭建一个 HTTP 服务器</p>\n<ul>\n<li><p>安装 NodeJS 和 NPM</p>\n<p>  使用下面的命令安装 NodeJS 和 NPM</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -</div><div class=\"line\">yum install nodejs -y</div></pre></td></tr></table></figure>\n<p>  安装完成后，使用下面的命令测试安装结果</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div></pre></td></tr></table></figure>\n</li>\n<li><p>编写 HTTP Server 源码</p>\n<p>  <em>创建工作目录</em></p>\n<p>  使用下面的命令在服务器创建一个工作目录：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /data/release/weapp</div></pre></td></tr></table></figure>\n<p>  <em>进入此工作目录</em></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/release/weapp</div></pre></td></tr></table></figure>\n<p>  <em>创建 package.json</em></p>\n<p>  在刚才创建的工作目录创建 <code>package.json</code>，添加我们服务器包的名称和版本号，可参考下面的示例。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;name&quot;: &quot;weapp&quot;,</div><div class=\"line\">    &quot;version&quot;: &quot;1.0.0&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  <em>添加 Server 源码</em></p>\n<p>  在工作目录创建 <code>app.js</code>，使用 Express.js 来监听 <code>8765</code> 端口<br>，可参考下面的示例代码。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 引用 express 来支持 HTTP Server 的实现</div><div class=\"line\">const express = require(&apos;express&apos;);</div><div class=\"line\"></div><div class=\"line\">// 创建一个 express 实例</div><div class=\"line\">const app = express();</div><div class=\"line\"></div><div class=\"line\">// 实现唯一的一个中间件，对于所有请求，都输出 &quot;Response from express&quot;</div><div class=\"line\">app.use((request, response, next) =&gt; &#123;</div><div class=\"line\">    response.write(&apos;Response from express&apos;);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 监听端口，等待连接</div><div class=\"line\">const port = 8765;</div><div class=\"line\">app.listen(port);</div><div class=\"line\"></div><div class=\"line\">// 输出服务器启动日志</div><div class=\"line\">console.log(`Server listening at http://127.0.0.1:$&#123;port&#125;`);</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行 HTTP 服务</p>\n<p>  <em>安装 PM2</em></p>\n<p>  在开始之前，我们先来安装 PM2</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install pm2 --global</div></pre></td></tr></table></figure>\n<p>  PM2 安装时间可能稍长，请耐心等候 </p>\n<p>  <em>安装 Express</em></p>\n<p>  我们的服务器源码里使用到了 Express 模块，下面的命令使用 NPM 来安装 Express</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/release/weapp</div><div class=\"line\">npm install express --save</div></pre></td></tr></table></figure>\n<p>  <em>启动服务</em></p>\n<p>  安装完成后，使用 PM2 来启动 HTTP 服务</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/release/weapp</div><div class=\"line\">pm2 start app.js</div></pre></td></tr></table></figure>\n<p>  现在，您的 HTTP 服务已经在 <a href=\"http://yourdomain.com:8765\" target=\"_blank\" rel=\"external\">http://yourdomain.com:8765</a> 运行</p>\n<p>  要查看服务输出的日志，可以使用下面的命令：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm2 logs</div></pre></td></tr></table></figure>\n<p>  如果要重启服务，可以使用下面的命令：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm2 restart app</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>4. 搭建 HTTPS 服务</strong></p>\n<p>微信小程序要求和服务器的通信都通过 HTTPS 进行</p>\n<ul>\n<li><p>安装 Nginx</p>\n<p>  在 CentOS 上，可直接使用 <code>yum</code> 来安装 Nginx</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install nginx -y</div></pre></td></tr></table></figure>\n<p>  安装完成后，使用 <code>nginx</code> 命令启动 Nginx：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx</div></pre></td></tr></table></figure>\n<p>  此时，访问 <a href=\"http://yourdomain.com\" target=\"_blank\" rel=\"external\">http://yourdomain.com</a> 可以看到 Nginx 的测试页面</p>\n</li>\n<li><p>配置 HTTPS 反向代理</p>\n<p>  外网用户访问服务器的 Web 服务由 Nginx 提供，Nginx 需要配置反向代理才能使得 Web 服务转发到本地的 Node 服务。</p>\n<p>  先将之前下载的 SSL 证书(解压后 Nginx 目录分别以 crt 和 key 作为后缀的文件)通过 <code>PuTTy</code>（Windows） 或者 <code>sftp</code>（MacOS 或 Linux） 上传到服务器的 <code>/etc/nginx</code> 目录。</p>\n<blockquote>\n<p>参考：<a href=\"http://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/putty.html\" target=\"_blank\" rel=\"external\">putty教程</a>、<a href=\"http://blog.csdn.net/qq_26954773/article/details/78199365\" target=\"_blank\" rel=\"external\">sftp教程</a></p>\n</blockquote>\n<p>  Nginx 配置目录在 <code>/etc/nginx/conf.d</code>，我们在该目录创建 <code>ssl.conf</code>，内容如下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">        listen 443;</div><div class=\"line\">        server_name www.example.com; # 改为绑定证书的域名</div><div class=\"line\">        # ssl 配置</div><div class=\"line\">        ssl on;</div><div class=\"line\">        ssl_certificate 1_www.example.com_bundle.crt; # 改为自己申请得到的 crt 文件的名称</div><div class=\"line\">        ssl_certificate_key 2_www.example.com.key; # 改为自己申请得到的 key 文件的名称</div><div class=\"line\">        ssl_session_timeout 5m;</div><div class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class=\"line\">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</div><div class=\"line\">        ssl_prefer_server_ciphers on;</div><div class=\"line\"></div><div class=\"line\">        location / &#123;</div><div class=\"line\">            proxy_pass http://127.0.0.1:8765;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>  让 Nginx 重新加载配置使其生效</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx -s reload</div></pre></td></tr></table></figure>\n<p>  在浏览器通过 https 的方式访问你解析的域名来测试 HTTPS 是否成功启动</p>\n</li>\n<li><p>在小程序中测试 HTTPS 访问</p>\n<p>  打开配套的小程序，点击 <code>实验一：HTTPS</code>，点击 <code>发送请求</code> 来测试访问结果。</p>\n</li>\n</ul>\n<p><strong>5. 小程序会话</strong></p>\n<p>小程序不支持 Cookie 存储和跟踪，服务器需要自行实现会话层</p>\n<ul>\n<li><p>安装 MongoDB</p>\n<p>  使用 Yum 在机器上安装 MongoDB及其客户端命令行工具：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install mongodb-server mongodb -y</div></pre></td></tr></table></figure>\n<p>  安装结束后，可以使用下面的命令查看安装的版本：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongod --version</div><div class=\"line\">mongo --version</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动 MongoDB</p>\n<p>  创建目录，用于 MongoDB 数据和日志存储：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /data/mongodb</div><div class=\"line\">mkdir -p /data/logs/mongodb</div></pre></td></tr></table></figure>\n<p>  创建后，使用下面的命令来启动 MongoDB：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongod --fork --dbpath /data/mongodb --logpath /data/logs/mongodb/weapp.log</div></pre></td></tr></table></figure>\n<p>  可以使用下面的命令来检查是否启动成功 </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">netstat -ltp | grep 27017</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加 MongoDB 用户</p>\n<p>  登录本地 MongoDB 服务：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongo</div></pre></td></tr></table></figure>\n<p>  登录后，创建一个用户 <code>weapp</code> ：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">use weapp;</div><div class=\"line\">db.createUser(&#123; user: &apos;weapp&apos;, pwd: &apos;weapp-dev&apos;, roles: [&apos;dbAdmin&apos;, &apos;readWrite&apos;]&#125;);</div></pre></td></tr></table></figure>\n<p>  创建完成后，使用 <code>exit</code> 退出命令行工具。</p>\n</li>\n<li><p>安装 Node 模块</p>\n<p>  实现小程序的会话功能，我们需要安装 <code>connect-mongo</code><br>和 <code>wafer-node-session</code></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/release/weapp</div><div class=\"line\">npm install connect-mongo wafer-node-session --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>实现小程序会话</p>\n<p>  在工作目录创建配置文件 <code>config.js</code>，用于保存我们服务所用的配置，可参考下面的实现(注：请将参考配置文件中的 <code>YORU_APP_ID</code> 和 <code>YOUR_APP_SECRET</code> 替换为你申请的小程序对应的 AppID 和 AppSecret)：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123; </div><div class=\"line\">    serverPort: &apos;8765&apos;, </div><div class=\"line\"></div><div class=\"line\">    // 小程序 appId 和 appSecret </div><div class=\"line\">    // 请到 https://mp.weixin.qq.com 获取 AppID 和 AppSecret</div><div class=\"line\">    appId: &apos;YORU_APP_ID&apos;, </div><div class=\"line\">    appSecret: &apos;YOUR_APP_SECRET&apos;, </div><div class=\"line\"></div><div class=\"line\">    // mongodb 连接配置，生产环境请使用更复杂的用户名密码</div><div class=\"line\">    mongoHost: &apos;127.0.0.1&apos;, </div><div class=\"line\">    mongoPort: &apos;27017&apos;, </div><div class=\"line\">    mongoUser: &apos;weapp&apos;, </div><div class=\"line\">    mongoPass: &apos;weapp-dev&apos;, </div><div class=\"line\">    mongoDb: &apos;weapp&apos;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>  编辑 <code>app.js</code>，添加会话实现逻辑，可参考下面的代码：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 引用 express 来支持 HTTP Server 的实现</div><div class=\"line\">const express = require(&apos;express&apos;);</div><div class=\"line\">// 引用 wafer-session 支持小程序会话</div><div class=\"line\">const waferSession = require(&apos;wafer-node-session&apos;); </div><div class=\"line\">// 使用 MongoDB 作为会话的存储</div><div class=\"line\">const MongoStore = require(&apos;connect-mongo&apos;)(waferSession); </div><div class=\"line\">// 引入配置文件</div><div class=\"line\">const config = require(&apos;./config&apos;); </div><div class=\"line\"></div><div class=\"line\">// 创建一个 express 实例</div><div class=\"line\">const app = express();</div><div class=\"line\"></div><div class=\"line\">// 添加会话中间件，登录地址是 /login</div><div class=\"line\">app.use(waferSession(&#123; </div><div class=\"line\">    appId: config.appId, </div><div class=\"line\">    appSecret: config.appSecret, </div><div class=\"line\">    loginPath: &apos;/login&apos;,</div><div class=\"line\">    store: new MongoStore(&#123; </div><div class=\"line\">\turl: `mongodb://$&#123;config.mongoUser&#125;:$&#123;config.mongoPass&#125;@$&#123;config.mongoHost&#125;:$&#123;config.mongoPort&#125;/$&#123;config.mongoDb&#125;` </div><div class=\"line\">    &#125;) </div><div class=\"line\">&#125;)); </div><div class=\"line\"></div><div class=\"line\">// 在路由 /me 下，输出会话里包含的用户信息</div><div class=\"line\">app.use(&apos;/me&apos;, (request, response, next) =&gt; &#123; </div><div class=\"line\">\t    response.json(request.session ? request.session.userInfo : &#123; noBody: true &#125;); </div><div class=\"line\">    if (request.session) &#123;</div><div class=\"line\">        console.log(`Wafer session success with openId=$&#123;request.session.userInfo.openId&#125;`);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;); </div><div class=\"line\"></div><div class=\"line\">// 实现一个中间件，对于未处理的请求，都输出 &quot;Response from express&quot;</div><div class=\"line\">app.use((request, response, next) =&gt; &#123;</div><div class=\"line\">    response.write(&apos;Response from express&apos;);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 监听端口，等待连接</div><div class=\"line\">app.listen(config.serverPort);</div><div class=\"line\"></div><div class=\"line\">// 输出服务器启动日志</div><div class=\"line\">console.log(`Server listening at http://127.0.0.1:$&#123;config.serverPort&#125;`);</div></pre></td></tr></table></figure>\n<p>  源码编写完成后，重启服务：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm2 restart app</div></pre></td></tr></table></figure>\n<p>  重启后，使用配套的小程序完成会话测试：打开配套小程序 - 点击 <code>实验二：会话</code> - <code>获取会话</code>，如果您能看到您的微信头像，那就表示会话已经成功获取了。</p>\n</li>\n</ul>\n<p><strong>6. WebSocket 服务</strong></p>\n<ul>\n<li><p>安装 Node 模块</p>\n<p>  本实验使用 <code>ws</code> 模块来在服务器上支持 WebSocket 协议，下面使用 NPM 来安装：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/release/weapp</div><div class=\"line\">npm install ws --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>实现 WebSocket 服务器</p>\n<p>  创建 <code>websocket.js</code>，实现 WebSocket 服务，可参考下面的代码：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 引入 ws 支持 WebSocket 的实现</div><div class=\"line\">const ws = require(&apos;ws&apos;);</div><div class=\"line\"></div><div class=\"line\">// 导出处理方法</div><div class=\"line\">exports.listen = listen;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 在 HTTP Server 上处理 WebSocket 请求</div><div class=\"line\"> * @param &#123;http.Server&#125; server</div><div class=\"line\"> * @param &#123;wafer.SessionMiddleware&#125; sessionMiddleware</div><div class=\"line\"> */</div><div class=\"line\">function listen(server, sessionMiddleware) &#123;</div><div class=\"line\">    // 使用 HTTP Server 创建 WebSocket 服务，使用 path 参数指定需要升级为 WebSocket 的路径</div><div class=\"line\">    const wss = new ws.Server(&#123; server, path: &apos;/ws&apos; &#125;);</div><div class=\"line\"></div><div class=\"line\">    // 监听 WebSocket 连接建立</div><div class=\"line\">    wss.on(&apos;connection&apos;, (ws,request) =&gt; &#123;// 要升级到 WebSocket 协议的 HTTP 连接</div><div class=\"line\"></div><div class=\"line\">\t    // 被升级到 WebSocket 的请求不会被 express 处理，</div><div class=\"line\">        // 需要使用会话中间节获取会话</div><div class=\"line\">        sessionMiddleware(request, null, () =&gt; &#123;</div><div class=\"line\">            const session = request.session;</div><div class=\"line\">            if (!session) &#123;</div><div class=\"line\">                // 没有获取到会话，强制断开 WebSocket 连接</div><div class=\"line\">                ws.send(JSON.stringify(request.sessionError) || &quot;No session avaliable&quot;);</div><div class=\"line\">                ws.close();</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            // 保留这个日志的输出可让实验室能检查到当前步骤是否完成</div><div class=\"line\">            console.log(`WebSocket client connected with openId=$&#123;session.userInfo.openId&#125;`);</div><div class=\"line\">            serveMessage(ws, session.userInfo);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    // 监听 WebSocket 服务的错误</div><div class=\"line\">    wss.on(&apos;error&apos;, (err) =&gt; &#123;</div><div class=\"line\">\t        console.log(err);</div><div class=\"line\">\t    &#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 进行简单的 WebSocket 服务，对于客户端发来的所有消息都回复回去</div><div class=\"line\"> */</div><div class=\"line\">function serveMessage(ws, userInfo) &#123;</div><div class=\"line\">    // 监听客户端发来的消息</div><div class=\"line\">    ws.on(&apos;message&apos;, (message) =&gt; &#123;</div><div class=\"line\">        console.log(`WebSocket received: $&#123;message&#125;`);</div><div class=\"line\">        ws.send(`Server: Received($&#123;message&#125;)`);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    // 监听关闭事件</div><div class=\"line\">    ws.on(&apos;close&apos;, (code, message) =&gt; &#123;</div><div class=\"line\">        console.log(`WebSocket client closed (code: $&#123;code&#125;, message: $&#123;message || &apos;none&apos;&#125;)`);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    // 连接后马上发送 hello 消息给会话对应的用户</div><div class=\"line\">    ws.send(`Server: 恭喜，$&#123;userInfo.nickName&#125;`);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  编辑 <code>app.js</code>，调用 WebSocket 服务，可参考下面代码：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">// HTTP 模块同时支持 Express 和 WebSocket</div><div class=\"line\">const http = require(&apos;http&apos;); </div><div class=\"line\">// 引用 express 来支持 HTTP Server 的实现</div><div class=\"line\">const express = require(&apos;express&apos;);</div><div class=\"line\">// 引用 wafer-session 支持小程序会话</div><div class=\"line\">const waferSession = require(&apos;wafer-node-session&apos;); </div><div class=\"line\">// 使用 MongoDB 作为会话的存储</div><div class=\"line\">const MongoStore = require(&apos;connect-mongo&apos;)(waferSession); </div><div class=\"line\">// 引入配置文件</div><div class=\"line\">const config = require(&apos;./config&apos;); </div><div class=\"line\">// 引入 WebSocket 服务实现</div><div class=\"line\">const websocket = require(&apos;./websocket&apos;);</div><div class=\"line\"></div><div class=\"line\">// 创建一个 express 实例</div><div class=\"line\">const app = express();</div><div class=\"line\"></div><div class=\"line\">// 独立出会话中间件给 express 和 ws 使用</div><div class=\"line\">const sessionMiddleware = waferSession(&#123;</div><div class=\"line\">    appId: config.appId,</div><div class=\"line\">    appSecret: config.appSecret,</div><div class=\"line\">    loginPath: &apos;/login&apos;,</div><div class=\"line\">    store: new MongoStore(&#123;</div><div class=\"line\">        url: `mongodb://$&#123;config.mongoUser&#125;:$&#123;config.mongoPass&#125;@$&#123;config.mongoHost&#125;:$&#123;config.mongoPort&#125;/$&#123;config.mongoDb&#125;`</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;);</div><div class=\"line\">app.use(sessionMiddleware);</div><div class=\"line\"></div><div class=\"line\">// 在路由 /me 下，输出会话里包含的用户信息</div><div class=\"line\">app.use(&apos;/me&apos;, (request, response, next) =&gt; &#123; </div><div class=\"line\">    response.json(request.session ? request.session.userInfo : &#123; noBody: true &#125;); </div><div class=\"line\">    if (request.session) &#123;</div><div class=\"line\">        console.log(`Wafer session success with openId=$&#123;request.session.userInfo.openId&#125;`);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;); </div><div class=\"line\"></div><div class=\"line\">// 实现一个中间件，对于未处理的请求，都输出 &quot;Response from express&quot;</div><div class=\"line\">app.use((request, response, next) =&gt; &#123;</div><div class=\"line\">    response.write(&apos;Response from express&apos;);</div><div class=\"line\">    response.end();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 创建 HTTP Server 而不是直接使用 express 监听</div><div class=\"line\">const server = http.createServer(app);</div><div class=\"line\"></div><div class=\"line\">// 让 WebSocket 服务在创建的 HTTP 服务器上监听</div><div class=\"line\">websocket.listen(server, sessionMiddleware);</div><div class=\"line\"></div><div class=\"line\">// 启动 HTTP 服务</div><div class=\"line\">server.listen(config.serverPort);</div><div class=\"line\"></div><div class=\"line\">// 输出服务器启动日志</div><div class=\"line\">console.log(`Server listening at http://127.0.0.1:$&#123;config.serverPort&#125;`);</div></pre></td></tr></table></figure>\n<p>  重启服务</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm2 restart app</div></pre></td></tr></table></figure>\n</li>\n<li><p>更新 Nginx 代理</p>\n<p>  编辑 Nginx 配置 <code>ssl.conf</code>，添加 WebSocket 支持，可参考下面的配置(注：请将参考配置文件中的 www.example.com 替换为前面步骤申请的域名，将 1_www.example.com.crt 和 2_www.example.com.key 替换为前面步骤申请并上传的 SSL 证书的名称)：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"># WebSocket 配置</div><div class=\"line\">map $http_upgrade $connection_upgrade &#123;</div><div class=\"line\">    default upgrade;</div><div class=\"line\">    &apos;&apos;      close;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">       listen 443;</div><div class=\"line\">       server_name www.example.com; # 改为绑定证书的域名</div><div class=\"line\">       # ssl 配置</div><div class=\"line\">       ssl on;</div><div class=\"line\">       ssl_certificate 1_www.example.com.crt; # 改为自己申请得到的 crt 文件的名称</div><div class=\"line\">       ssl_certificate_key 2_www.example.com.key; # 改为自己申请得到的 key 文件的名称</div><div class=\"line\">       ssl_session_timeout 5m;</div><div class=\"line\">       ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class=\"line\">       ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</div><div class=\"line\">       ssl_prefer_server_ciphers on;</div><div class=\"line\"></div><div class=\"line\">       # WebSocket 配置</div><div class=\"line\">       proxy_set_header Upgrade $http_upgrade;</div><div class=\"line\">       proxy_set_header Connection $connection_upgrade;</div><div class=\"line\"></div><div class=\"line\">       location / &#123;</div><div class=\"line\">           proxy_pass http://127.0.0.1:8765;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>  通知 Nginx 进程重新加载配置：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx -s reload</div></pre></td></tr></table></figure>\n</li>\n<li><p>测试 WebSocket</p>\n<p>  打开配套的小程序，点击 <code>实验三：WebSocket</code>。进入测试页面后，点击 <code>连接</code> 按钮，如果出现连接成功的提示，表示 WebSocket 服务已经正常运行，可以收发消息。</p>\n</li>\n</ul>\n<p><strong>7. 剪刀石头布小游戏</strong></p>\n<ul>\n<li><p>实现游戏房间逻辑</p>\n<p>  创建 <code>/data/release/weapp/game</code> 目录用于存放剪刀石头布小游戏的代码</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /data/release/weapp/game</div></pre></td></tr></table></figure>\n<p>  添加 <code>game/Room.js</code> 实现游戏房间逻辑，可参考下面的代码：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">enum GameChoice &#123;</div><div class=\"line\">    // 剪刀</div><div class=\"line\">    Scissors = 1,</div><div class=\"line\">    // 石头</div><div class=\"line\">    Rock = 2,</div><div class=\"line\">    // 布</div><div class=\"line\">    Paper = 3</div><div class=\"line\">&#125;</div><div class=\"line\">*/</div><div class=\"line\">function judge(choice1, choice2) &#123;</div><div class=\"line\">    // 和局</div><div class=\"line\">    if (choice1 == choice2) return 0;</div><div class=\"line\">    // Player 1 没出，Player 2 胜出</div><div class=\"line\">    if (!choice1) return 1;</div><div class=\"line\">    // Player 2 没出，Player 1 胜出</div><div class=\"line\">    if (!choice2) return -1;</div><div class=\"line\">    // 都出了就这么算</div><div class=\"line\">    return (choice1 - choice2 + 3) % 3 == 1 ? -1 : 1;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/** @type &#123;Room[]&#125; */</div><div class=\"line\">const globalRoomList = [];</div><div class=\"line\"></div><div class=\"line\">// 每个房间最多两人</div><div class=\"line\">const MAX_ROOT_MEMBER = 2;</div><div class=\"line\"></div><div class=\"line\">// 游戏时间，单位秒</div><div class=\"line\">const GAME_TIME = 3;</div><div class=\"line\"></div><div class=\"line\">let nextRoomId = 0;</div><div class=\"line\"></div><div class=\"line\">/** 表示一个房间 */</div><div class=\"line\">module.exports = class Room &#123;</div><div class=\"line\"></div><div class=\"line\">    /** 获取所有房间 */</div><div class=\"line\">    static all() &#123;</div><div class=\"line\">        return globalRoomList.slice();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /** 获取有座位的房间 */</div><div class=\"line\">    static findRoomWithSeat() &#123;</div><div class=\"line\">        return globalRoomList.find(x =&gt; !x.isFull());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /** 创建新房间 */</div><div class=\"line\">    static create() &#123;</div><div class=\"line\">        const room = new Room();</div><div class=\"line\">        globalRoomList.unshift(room);</div><div class=\"line\">        return room;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    constructor() &#123;</div><div class=\"line\">        this.id = `room$&#123;nextRoomId++&#125;`;</div><div class=\"line\">        this.players = [];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /** 添加玩家 */</div><div class=\"line\">    addPlayer(player) &#123;</div><div class=\"line\">        const &#123; uid, uname &#125; = player.user;</div><div class=\"line\">        console.log(`Player $&#123;uid&#125;($&#123;uname&#125;) enter $&#123;this.id&#125;`);</div><div class=\"line\">        this.players.push(player);</div><div class=\"line\">        if (this.isFull()) &#123;</div><div class=\"line\">            this.startGame();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /** 删除玩家 */</div><div class=\"line\">    removePlayer(player) &#123;</div><div class=\"line\">        const &#123; uid, uname &#125; = player.user;</div><div class=\"line\">        console.log(`Player $&#123;uid&#125;($&#123;uname&#125;) leave $&#123;this.id&#125;`);</div><div class=\"line\">        const playerIndex = this.players.indexOf(player);</div><div class=\"line\">        if (playerIndex != -1) &#123;</div><div class=\"line\">            this.players.splice(playerIndex, 1);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (this.players.length === 0) &#123;</div><div class=\"line\">            console.log(`Room $&#123;this.id&#125; is empty now`);</div><div class=\"line\">            const roomIndex = globalRoomList.indexOf(this);</div><div class=\"line\">            if (roomIndex &gt; -1) &#123;</div><div class=\"line\">                globalRoomList.splice(roomIndex, 1);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /** 玩家已满 */</div><div class=\"line\">    isFull() &#123;</div><div class=\"line\">        return this.players.length == MAX_ROOT_MEMBER;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /** 开始游戏 */</div><div class=\"line\">    startGame() &#123;</div><div class=\"line\">        // 保留这行日志输出可以让实验室检查到实验的完成情况</div><div class=\"line\">        console.log(&apos;game started!&apos;);</div><div class=\"line\"></div><div class=\"line\">        // 当局积分清零</div><div class=\"line\">        this.players.forEach(player =&gt; player.gameData.roundScore = 0);</div><div class=\"line\"></div><div class=\"line\">        // 集合玩家用户和游戏数据</div><div class=\"line\">        const players = this.players.map(player =&gt; Object.assign(&#123;&#125;, player.user, player.gameData));</div><div class=\"line\"></div><div class=\"line\">        // 通知所有玩家开始</div><div class=\"line\">        for (let player of this.players) &#123;</div><div class=\"line\">            player.send(&apos;start&apos;, &#123;</div><div class=\"line\">                gameTime: GAME_TIME,</div><div class=\"line\">                players</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        // 计时结束</div><div class=\"line\">        setTimeout(() =&gt; this.finishGame(), GAME_TIME * 1000);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /** 结束游戏 */</div><div class=\"line\">    finishGame() &#123;</div><div class=\"line\">        const players = this.players;</div><div class=\"line\"></div><div class=\"line\">        // 两两对比算分</div><div class=\"line\">        for (let i = 0; i &lt; MAX_ROOT_MEMBER; i++) &#123;</div><div class=\"line\">            let p1 = players[i];</div><div class=\"line\">            if (!p1) break;</div><div class=\"line\">            for (let j = i + 1; j &lt; MAX_ROOT_MEMBER; j++) &#123;</div><div class=\"line\">                let p2 = players[j];</div><div class=\"line\">                const result = judge(p1.gameData.choice, p2.gameData.choice);</div><div class=\"line\">                p1.gameData.roundScore -= result;</div><div class=\"line\">                p2.gameData.roundScore += result;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        // 计算连胜奖励</div><div class=\"line\">        for (let player of players) &#123;</div><div class=\"line\">            const gameData = player.gameData;</div><div class=\"line\">            // 胜局积分</div><div class=\"line\">            if (gameData.roundScore &gt; 0) &#123;</div><div class=\"line\">                gameData.winStreak++;</div><div class=\"line\">                gameData.roundScore *= gameData.winStreak;</div><div class=\"line\">            &#125;</div><div class=\"line\">            // 败局清零</div><div class=\"line\">            else if (gameData.roundScore &lt; 0) &#123;</div><div class=\"line\">                gameData.roundScore = 0;</div><div class=\"line\">                gameData.winStreak = 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            // 累积总分</div><div class=\"line\">            gameData.totalScore += gameData.roundScore;</div><div class=\"line\">        &#125;</div><div class=\"line\">        // 计算结果</div><div class=\"line\">        const result = players.map(player =&gt; &#123;</div><div class=\"line\">            const &#123; uid &#125; = player.user;</div><div class=\"line\">            const &#123; roundScore, totalScore, winStreak, choice &#125; = player.gameData;</div><div class=\"line\">            return &#123; uid, roundScore, totalScore, winStreak, choice &#125;;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        // 通知所有玩家游戏结果</div><div class=\"line\">        for (let player of players) &#123;</div><div class=\"line\">            player.send(&apos;result&apos;, &#123; result &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>实现玩家逻辑</p>\n<p>  添加 game/Player.js 实现玩家逻辑，可参考下面的代码：<br>const Room = require(“./Room”);</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 表示一个玩家，处理玩家的公共游戏逻辑，消息处理部分需要具体的玩家实现（请参考 ComputerPlayer 和 HumanPlayer）</div><div class=\"line\"> */</div><div class=\"line\">module.exports = class Player &#123;</div><div class=\"line\">    constructor(user) &#123;</div><div class=\"line\">        this.id = user.uid;</div><div class=\"line\">        this.user = user;</div><div class=\"line\">        this.room = null;</div><div class=\"line\">        this.gameData = &#123;</div><div class=\"line\">            // 当前的选择（剪刀/石头/布）</div><div class=\"line\">            choice: null,</div><div class=\"line\">            // 局积分</div><div class=\"line\">            roundScore: 0,</div><div class=\"line\">            // 总积分</div><div class=\"line\">            totalScore: 0,</div><div class=\"line\">            // 连胜次数</div><div class=\"line\">            winStreak: 0</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 上线当前玩家，并且异步返回给玩家分配的房间</div><div class=\"line\">     */</div><div class=\"line\">    online(room) &#123;</div><div class=\"line\">        // 处理玩家 &apos;join&apos; 消息</div><div class=\"line\">        // 为玩家寻找一个可用的房间，并且异步返回</div><div class=\"line\">        this.receive(&apos;join&apos;, () =&gt; &#123;</div><div class=\"line\">            if (this.room) &#123;</div><div class=\"line\">                this.room.removePlayer(this);</div><div class=\"line\">            &#125;</div><div class=\"line\">            room = this.room = room || Room.findRoomWithSeat() || Room.create();</div><div class=\"line\">            room.addPlayer(this);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        // 处理玩家 &apos;choise&apos; 消息</div><div class=\"line\">        // 需要记录玩家当前的选择，并且通知到房间里的其它玩家</div><div class=\"line\">        this.receive(&apos;choice&apos;, (&#123; choice &#125;) =&gt; &#123;</div><div class=\"line\">            this.gameData.choice = choice;</div><div class=\"line\">            this.broadcast(&apos;movement&apos;, &#123;</div><div class=\"line\">                uid: this.user.uid,</div><div class=\"line\">                movement: &quot;choice&quot;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        // 处理玩家 &apos;leave&apos; 消息</div><div class=\"line\">        // 让玩家下线</div><div class=\"line\">        this.receive(&apos;leave&apos;, () =&gt; this.offline);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 下线当前玩家，从房间离开</div><div class=\"line\">     */</div><div class=\"line\">    offline() &#123;</div><div class=\"line\">        if (this.room) &#123;</div><div class=\"line\">            this.room.removePlayer(this);</div><div class=\"line\">            this.room = null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.user = null;</div><div class=\"line\">        this.gameData = null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 发送指定消息给当前玩家，需要具体子类实现</div><div class=\"line\">     * @abstract</div><div class=\"line\">     * @param &#123;string&#125; message 消息类型</div><div class=\"line\">     * @param &#123;*&#125; data 消息数据</div><div class=\"line\">     */</div><div class=\"line\">    send(message, data) &#123;</div><div class=\"line\">        throw new Error(&apos;Not implement: AbstractPlayer.send()&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 处理玩家发送的消息，需要具体子类实现</div><div class=\"line\">     * @abstract</div><div class=\"line\">     * @param &#123;string&#125; message 消息类型</div><div class=\"line\">     * @param &#123;Function&#125; handler</div><div class=\"line\">     */</div><div class=\"line\">    receive(message, handler) &#123;</div><div class=\"line\">        throw new Error(&apos;Not implement: AbstractPlayer.receive()&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 给玩家所在房间里的其它玩家发送消息</div><div class=\"line\">     * @param &#123;string&#125; message 消息类型</div><div class=\"line\">     * @param &#123;any&#125; data 消息数据</div><div class=\"line\">     */</div><div class=\"line\">    broadcast(message, data) &#123;</div><div class=\"line\">        if (!this.room) return;</div><div class=\"line\">        this.others().forEach(neighbor =&gt; neighbor.send(message, data));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 获得玩家所在房间里的其他玩家</div><div class=\"line\">     */</div><div class=\"line\">    others() &#123;</div><div class=\"line\">        return this.room.players.filter(player =&gt; player != this);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>实现电脑玩家</p>\n<p>  在实现人类玩家之前，我们先来创建 <code>ComputerPlayer.js</code> 来实现电脑玩家</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">const EventEmitter = require(&apos;events&apos;);</div><div class=\"line\">const Player = require(&apos;./Player&apos;);</div><div class=\"line\"></div><div class=\"line\">let nextComputerId = 0;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 机器人玩家实现，使用 EventEmitter 接收和发送消息</div><div class=\"line\"> */</div><div class=\"line\">module.exports = class ComputerPlayer extends Player &#123;</div><div class=\"line\">    constructor() &#123;</div><div class=\"line\">        const computerId = `robot-$&#123;++nextComputerId&#125;`;</div><div class=\"line\">        super(&#123;</div><div class=\"line\">            uid: computerId,</div><div class=\"line\">            uname: computerId,</div><div class=\"line\">            uavatar: &apos;http://www.scoutiegirl.com/wp-content/uploads/2015/06/Blue-Robot.png&apos;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        this.emitter = new EventEmitter();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 模拟玩家行为</div><div class=\"line\">     */</div><div class=\"line\">    simulate() &#123;</div><div class=\"line\">        this.receive(&apos;start&apos;, () =&gt; this.play());</div><div class=\"line\">        this.receive(&apos;result&apos;, () =&gt; this.stop());</div><div class=\"line\">        this.send(&apos;join&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 游戏开始后，随机时间后随机选择</div><div class=\"line\">     */</div><div class=\"line\">    play() &#123;</div><div class=\"line\">        this.playing = true;</div><div class=\"line\">        const randomTime = () =&gt; Math.floor(100 + Math.random() * 2000);</div><div class=\"line\">        const randomChoice = () =&gt; &#123;</div><div class=\"line\">            if (!this.playing) return;</div><div class=\"line\">            this.send(&quot;choice&quot;, &#123;</div><div class=\"line\">                choice: Math.floor(Math.random() * 10000) % 3 + 1</div><div class=\"line\">            &#125;);</div><div class=\"line\">            setTimeout(randomChoice, randomTime());</div><div class=\"line\">        &#125;</div><div class=\"line\">        setTimeout(randomChoice, 10);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 游戏结束后，标记起来，阻止继续随机选择</div><div class=\"line\">     */</div><div class=\"line\">    stop() &#123;</div><div class=\"line\">        this.playing = false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 发送消息给当前玩家，直接转发到 emitter</div><div class=\"line\">     */</div><div class=\"line\">    send(message, data) &#123;</div><div class=\"line\">        this.emitter.emit(message, data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 从当前的 emitter 处理消息</div><div class=\"line\">     */</div><div class=\"line\">    receive(message, handle) &#123;</div><div class=\"line\">        this.emitter.on(message, handle);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>实现人类玩家</p>\n<p>  人类玩家通过 WebSocket 信道来实现玩家的输入输出<br>，我们需要添加 <code>game/Tunnel.js</code> 和 <code>game/HumanPlayer.js</code> 来实现人类玩家逻辑，可参考下面的代码：</p>\n<p>  Tunnel.js</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">const EventEmitter = require(&apos;events&apos;);</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 封装 WebSocket 信道</div><div class=\"line\"> */</div><div class=\"line\">module.exports = class Tunnel &#123;</div><div class=\"line\">    constructor(ws) &#123;</div><div class=\"line\">        this.emitter = new EventEmitter();</div><div class=\"line\">        this.ws = ws;</div><div class=\"line\">        ws.on(&apos;message&apos;, packet =&gt; &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                // 约定每个数据包格式：&#123; message: &apos;type&apos;, data: any &#125;</div><div class=\"line\">                const &#123; message, data &#125; = JSON.parse(packet);</div><div class=\"line\">                this.emitter.emit(message, data);</div><div class=\"line\">            &#125; catch (err) &#123;</div><div class=\"line\">                console.log(&apos;unknown packet: &apos; + packet);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    on(message, handle) &#123;</div><div class=\"line\">        this.emitter.on(message, handle);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    emit(message, data) &#123;</div><div class=\"line\">        this.ws.send(JSON.stringify(&#123; message, data &#125;));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  HumanPlayer.js</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">const co = require(&apos;co&apos;);</div><div class=\"line\">const Player = require(&apos;./Player&apos;);</div><div class=\"line\">const ComputerPlayer = require(&apos;./ComputerPlayer&apos;);</div><div class=\"line\">const Tunnel = require(&apos;./Tunnel&apos;);</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 人类玩家实现，通过 WebSocket 信道接收和发送消息</div><div class=\"line\"> */</div><div class=\"line\">module.exports = class HumanPlayer extends Player &#123;</div><div class=\"line\">    constructor(user, ws) &#123;</div><div class=\"line\">        super(user);</div><div class=\"line\">        this.ws = ws;</div><div class=\"line\">        this.tunnel = new Tunnel(ws);</div><div class=\"line\">        this.send(&apos;id&apos;, user);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 人类玩家上线后，还需要监听信道关闭，让玩家下线</div><div class=\"line\">     */</div><div class=\"line\">    online(room) &#123;</div><div class=\"line\">        super.online(room);</div><div class=\"line\">        this.ws.on(&apos;close&apos;, () =&gt; this.offline());</div><div class=\"line\"></div><div class=\"line\">        // 人类玩家请求电脑玩家</div><div class=\"line\">        this.receive(&apos;requestComputer&apos;, () =&gt; &#123;</div><div class=\"line\">            const room = this.room;</div><div class=\"line\">            while(room &amp;&amp; !room.isFull()) &#123;</div><div class=\"line\">                const computer = new ComputerPlayer();</div><div class=\"line\">                computer.online(room);</div><div class=\"line\">                computer.simulate();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 下线后关闭信道</div><div class=\"line\">     */</div><div class=\"line\">    offline() &#123;</div><div class=\"line\">        super.offline();</div><div class=\"line\">        if (this.ws &amp;&amp; this.ws.readyState == this.ws.OPEN) &#123;</div><div class=\"line\">            this.ws.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.ws = null;</div><div class=\"line\">        this.tunnel = null;</div><div class=\"line\">        if (this.room) &#123;</div><div class=\"line\">            // 清理房间里面的电脑玩家</div><div class=\"line\">            for (let player of this.room.players) &#123;</div><div class=\"line\">                if (player instanceof ComputerPlayer) &#123;</div><div class=\"line\">                    this.room.removePlayer(player);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            this.room = null;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 通过 WebSocket 信道发送消息给玩家</div><div class=\"line\">     */</div><div class=\"line\">    send(message, data) &#123;</div><div class=\"line\">        this.tunnel.emit(message, data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 从 WebSocket 信道接收玩家的消息</div><div class=\"line\">     */</div><div class=\"line\">    receive(message, callback) &#123;</div><div class=\"line\">        this.tunnel.on(message, callback);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加游戏服务入口</p>\n<p>  游戏的实现已经完成了，接下来，编辑 <code>websocket.js</code> 添加服务入口，可参考下面的代码：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 引入 url 模块用于解析 URL</div><div class=\"line\">const url = require(&apos;url&apos;);</div><div class=\"line\">// 引入 ws 支持 WebSocket 的实现</div><div class=\"line\">const ws = require(&apos;ws&apos;);</div><div class=\"line\">// 引入人类玩家</div><div class=\"line\">const HumanPlayer = require(&apos;./game/HumanPlayer&apos;);</div><div class=\"line\"></div><div class=\"line\">// 导出处理方法</div><div class=\"line\">exports.listen = listen;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 在 HTTP Server 上处理 WebSocket 请求</div><div class=\"line\"> * @param &#123;http.Server&#125; server</div><div class=\"line\"> * @param &#123;wafer.SessionMiddleware&#125; sessionMiddleware</div><div class=\"line\"> */</div><div class=\"line\">function listen(server, sessionMiddleware) &#123;</div><div class=\"line\">    // 使用 HTTP Server 创建 WebSocket 服务，使用 path 参数指定需要升级为 WebSocket 的路径</div><div class=\"line\">    const wss = new ws.Server(&#123; server &#125;);</div><div class=\"line\"></div><div class=\"line\">    // 同时支持 /ws 和 /game 的 WebSocket 连接请求 </div><div class=\"line\">    wss.shouldHandle = (request) =&gt; &#123; </div><div class=\"line\">        const path = url.parse(request.url).pathname; </div><div class=\"line\">        request.path = path; </div><div class=\"line\">        return [&apos;/ws&apos;, &apos;/game&apos;].indexOf(path) &gt; -1; </div><div class=\"line\">    &#125;; </div><div class=\"line\"></div><div class=\"line\">    // 监听 WebSocket 连接建立</div><div class=\"line\">    wss.on(&apos;connection&apos;, (ws, request) =&gt; &#123;</div><div class=\"line\">        // request: 要升级到 WebSocket 协议的 HTTP 连接</div><div class=\"line\"></div><div class=\"line\">        // 被升级到 WebSocket 的请求不会被 express 处理，</div><div class=\"line\">        // 需要使用会话中间节获取会话</div><div class=\"line\">        sessionMiddleware(request, null, () =&gt; &#123;</div><div class=\"line\">            const session = request.session;</div><div class=\"line\">            if (!session) &#123;</div><div class=\"line\">                // 没有获取到会话，强制断开 WebSocket 连接</div><div class=\"line\">                ws.send(JSON.stringify(request.sessionError) || &quot;No session avaliable&quot;);</div><div class=\"line\">                ws.close();</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            console.log(`WebSocket client connected with openId=$&#123;session.userInfo.openId&#125;`);</div><div class=\"line\"></div><div class=\"line\">            // 根据请求的地址进行不同处理 </div><div class=\"line\">            switch (request.path) &#123; </div><div class=\"line\">                case &apos;/ws&apos;: return serveMessage(ws, session.userInfo); </div><div class=\"line\">                case &apos;/game&apos;: return serveGame(ws, session.userInfo); </div><div class=\"line\">                default: return ws.close();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    // 监听 WebSocket 服务的错误</div><div class=\"line\">    wss.on(&apos;error&apos;, (err) =&gt; &#123;</div><div class=\"line\">        console.log(err);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 进行简单的 WebSocket 服务，对于客户端发来的所有消息都回复回去</div><div class=\"line\"> */</div><div class=\"line\">function serveMessage(ws, userInfo) &#123;</div><div class=\"line\">    // 监听客户端发来的消息</div><div class=\"line\">    ws.on(&apos;message&apos;, (message) =&gt; &#123;</div><div class=\"line\">        console.log(`WebSocket received: $&#123;message&#125;`);</div><div class=\"line\">        ws.send(`Server: Received($&#123;message&#125;)`);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    // 监听关闭事件</div><div class=\"line\">    ws.on(&apos;close&apos;, (code, message) =&gt; &#123;</div><div class=\"line\">        console.log(`WebSocket client closed (code: $&#123;code&#125;, message: $&#123;message || &apos;none&apos;&#125;)`);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    // 连接后马上发送 hello 消息给会话对应的用户</div><div class=\"line\">    ws.send(`Server: 恭喜，$&#123;userInfo.nickName&#125;`);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 使用 WebSocket 进行游戏服务</div><div class=\"line\"> */</div><div class=\"line\">function serveGame(ws, userInfo) &#123;</div><div class=\"line\">    const user = &#123; </div><div class=\"line\">        uid: userInfo.openId, </div><div class=\"line\">        uname: userInfo.nickName, </div><div class=\"line\">        uavatar: userInfo.avatarUrl </div><div class=\"line\">    &#125;; </div><div class=\"line\">    // 创建玩家 </div><div class=\"line\">    const player = new HumanPlayer(user, ws); </div><div class=\"line\">    // 玩家上线</div><div class=\"line\">    player.online();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装 co 模块</p>\n<p>  我们的源码中使用到了 <code>co</code> 进行协程管理，启动游戏服务前，需要先安装：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /data/release/weapp</div><div class=\"line\">npm install co --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>测试游戏服务</p>\n<p>  重启 Node 服务：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pm2 restart app</div></pre></td></tr></table></figure>\n<p>  打开配套的小程序，点击 <code>实验四 - 剪刀石头布小游戏</code>，点击 <code>开始</code> 按钮进行游戏。</p>\n</li>\n<li><p>测试完成</p>\n</li>\n</ul>\n","updated":"2017-10-18T03:36:23.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux weixin","slug":"linux-weixin","permalink":"http://hexo.zhazhapan.com/tags/linux-weixin/"}]},{"title":"七牛云——对象存储管理工具介绍","date":"2017-10-15T14:43:28.000Z","path":"2017/10/15/七牛云——对象存储管理工具介绍/","text":"由于我是一个七牛的重度使用者（主要是对象存储），每次上传文件、复制链接、下载文件都必须用浏览器打开网页，而且还要登录，感觉好麻烦啊，干脆就自己开发了一个这样的工具（使用JavaFX编写），打包成可执行的jar包。 主要功能就是文件的上传下载，获取存储空间中的文件列表，搜索文件（支持正则表达式），复制文件外链，删除文件，移动（或复制）文件，重命名文件名，设置文件的生存时间等。 功能截图： 1. 主窗口界面： 设置文件前缀 路径前缀可以用来分类文件，例如： image/jpg/your-file-name.jpg 添加存储空间 添加存储空间，需要同时指定空间名称，空间域名以及所在区域 重置密钥 如果你修改了Key，可以在此处修改密钥 说明：出于安全考虑，建议您周期性地更换密钥。密钥安全使用须知 配置文件 Windows使用路径：C:/ProgramData/QiniuTool MacOS 或 Linux 使用路径：/tmp/qiniu/tool 其中 config.json 为配置文件 文件上传 除了可上传本地文件外，还可抓取网络文件到空间中，如： 然后点击开始上传即可 2. 资源管理界面： 刷新列表 刷新当前存储空间的资源列表 复制链接 复制你选中文件的外链 删除文件 从存储空间中删除你选中的所有文件 移动文件 移动（或复制）选中的所有文件到指定的存储空间中（目前好像七牛还不支持跨区域移动文件） 说明：勾选“保存文件副本”时表示当前操作为复制，不勾选时表示移动（会删除本存储空间的文件），默认勾选。 生存时间 设置选中文件的生存时间，到期后七牛会自动删除这些文件 更新镜像 需要选中文件才能更新，但是这个功能我一直没有测试成功，不知道为什么 官方解释：对于配置了镜像存储的空间，如果镜像源站更新了文件内容，则默认情况下，七牛不会再主动从客户镜像源站同步新的副本，这个时候就需要利用这个prefetch接口来主动地将空间中的文件和更新后的源站副本进行同步。 或许是我没有配置什么镜像存储吧 公有下载 直接下载选中的文件（私有的存储空间不可用） 私有下载 下载选中的私有存储空间的文件 打开文件 用浏览器打开你选中的文件 链接下载 由于这两天迅雷抽风了，下载出现BUG，所以提供了这样一个临时的下载方案，打开后直接输入链接即可下载 文件刷新 从七牛云镜像源刷新你选中的文件，保证用户下载的是最新上传的文件，而不是之前的旧版本（个人感觉和 更新镜像 是一样的） 日志下载 从七牛下载指定日期的操作日志 说明：操作文件时，需要选中文件才能操作（支持多选）。由于下载私有空间的文件需要临时授权，所以文件的下载分为私有下载（生成临时授权然后下载文件）和公有下载（直接下载文件）。 3. 其他 下载可执行的jar包 历史版本 项目源代码 官方JavaSDK文档","raw":"---\ntitle: 七牛云——对象存储管理工具介绍\ndate: 2017-10-15 22:43:28\ntags: qiniu\n---\n**由于我是一个七牛的重度使用者（主要是对象存储），每次上传文件、复制链接、下载文件都必须用浏览器打开网页，而且还要登录，感觉好麻烦啊，干脆就自己开发了一个这样的工具（使用JavaFX编写），打包成可执行的jar包。**\n\n**主要功能就是文件的上传下载，获取存储空间中的文件列表，搜索文件（支持正则表达式），复制文件外链，删除文件，移动（或复制）文件，重命名文件名，设置文件的生存时间等。**\n\n**功能截图：**\n\n**1. 主窗口界面：**\n\n![程序主界面](http://img.blog.csdn.net/20171015221834257?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n- 设置文件前缀\n\n\t路径前缀可以用来分类文件，例如： `image/jpg/`your-file-name.jpg\n\n- 添加存储空间\n\n\t添加存储空间，需要同时指定空间名称，空间域名以及所在区域\n\n\t![添加存储空间](http://img.blog.csdn.net/20171017122858110?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n- 重置密钥\n\n\t如果你修改了Key，可以在此处修改密钥\n\n\t![重置密钥](http://img.blog.csdn.net/20171017123714044?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\t> 说明：出于安全考虑，建议您周期性地更换密钥。[密钥安全使用须知](https://developer.qiniu.com/kodo/kb/1334/the-access-key-secret-key-encryption-key-safe-use-instructions)\n\n- 配置文件\n\n\tWindows使用路径：`C:/ProgramData/QiniuTool`\n\n\tMacOS 或 Linux 使用路径：`/tmp/qiniu/tool`\n\n\t其中 `config.json` 为配置文件\n\n- 文件上传\n\n\t除了可上传本地文件外，还可抓取网络文件到空间中，如：\n\n\t![上传网络文件](http://img.blog.csdn.net/20171017152757227?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\t然后点击开始上传即可\n\n**2. 资源管理界面：**\n\n![资源管理界面](http://img.blog.csdn.net/20171017153112198?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n- 刷新列表\n\t\t\n\t刷新当前存储空间的资源列表\n\t\t\n- 复制链接\n\n\t复制你选中文件的外链\n\n- 删除文件\n\n\t从存储空间中删除你选中的所有文件\n\n- 移动文件\n\n\t移动（或复制）选中的所有文件到指定的存储空间中（目前好像七牛还不支持跨区域移动文件）\n\t\t\n\t![移动文件界面](http://img.blog.csdn.net/20171015222512819?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\t> 说明：勾选“保存文件副本”时表示当前操作为复制，不勾选时表示移动（会删除本存储空间的文件），默认勾选。\n\n- 生存时间\n\n\t设置选中文件的生存时间，到期后七牛会自动删除这些文件\n\n- 更新镜像\n\n\t需要选中文件才能更新，但是这个功能我一直没有测试成功，不知道为什么\n\n\t> 官方解释：对于配置了镜像存储的空间，如果镜像源站更新了文件内容，则默认情况下，七牛不会再主动从客户镜像源站同步新的副本，这个时候就需要利用这个prefetch接口来主动地将空间中的文件和更新后的源站副本进行同步。\n\n\t或许是我没有配置什么镜像存储吧\n\n- 公有下载\n\n\t直接下载选中的文件（私有的存储空间不可用）\n\n- 私有下载\n\n\t下载选中的私有存储空间的文件\n\n- 打开文件\n\n\t用浏览器打开你选中的文件\n\n- 链接下载\n\n\t由于这两天迅雷抽风了，下载出现BUG，所以提供了这样一个临时的下载方案，打开后直接输入链接即可下载\n\n- 文件刷新\n\n\t从七牛云镜像源刷新你选中的文件，保证用户下载的是最新上传的文件，而不是之前的旧版本（个人感觉和 `更新镜像` 是一样的）\n\n- 日志下载\n\n\t从七牛下载指定日期的操作日志\n\n**说明：操作文件时，需要选中文件才能操作（支持多选）。由于下载私有空间的文件需要临时授权，所以文件的下载分为私有下载（生成临时授权然后下载文件）和公有下载（直接下载文件）。**\n\n**3. 其他**\n\n- [**下载可执行的jar包**](http://oq3iwfipo.bkt.clouddn.com/tools/zhazhapan/qiniu.jar?v=3 \"七牛云——对象存储管理工具jar包下载地址\")\n\n- [**历史版本**](https://github.com/zhazhapan/qiniu/releases) \n\n- [**项目源代码**](https://github.com/zhazhapan/qiniu \"七牛云——对象存储管理工具项目源码地址\")\n\n- [**官方JavaSDK文档**](https://developer.qiniu.com/kodo/sdk/1239/java)","content":"<p><strong>由于我是一个七牛的重度使用者（主要是对象存储），每次上传文件、复制链接、下载文件都必须用浏览器打开网页，而且还要登录，感觉好麻烦啊，干脆就自己开发了一个这样的工具（使用JavaFX编写），打包成可执行的jar包。</strong></p>\n<p><strong>主要功能就是文件的上传下载，获取存储空间中的文件列表，搜索文件（支持正则表达式），复制文件外链，删除文件，移动（或复制）文件，重命名文件名，设置文件的生存时间等。</strong></p>\n<p><strong>功能截图：</strong></p>\n<p><strong>1. 主窗口界面：</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20171015221834257?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"程序主界面\"></p>\n<ul>\n<li><p>设置文件前缀</p>\n<p>  路径前缀可以用来分类文件，例如： <code>image/jpg/</code>your-file-name.jpg</p>\n</li>\n<li><p>添加存储空间</p>\n<p>  添加存储空间，需要同时指定空间名称，空间域名以及所在区域</p>\n<p>  <img src=\"http://img.blog.csdn.net/20171017122858110?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"添加存储空间\"></p>\n</li>\n<li><p>重置密钥</p>\n<p>  如果你修改了Key，可以在此处修改密钥</p>\n<p>  <img src=\"http://img.blog.csdn.net/20171017123714044?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"重置密钥\"></p>\n<blockquote>\n<p>说明：出于安全考虑，建议您周期性地更换密钥。<a href=\"https://developer.qiniu.com/kodo/kb/1334/the-access-key-secret-key-encryption-key-safe-use-instructions\" target=\"_blank\" rel=\"external\">密钥安全使用须知</a></p>\n</blockquote>\n</li>\n<li><p>配置文件</p>\n<p>  Windows使用路径：<code>C:/ProgramData/QiniuTool</code></p>\n<p>  MacOS 或 Linux 使用路径：<code>/tmp/qiniu/tool</code></p>\n<p>  其中 <code>config.json</code> 为配置文件</p>\n</li>\n<li><p>文件上传</p>\n<p>  除了可上传本地文件外，还可抓取网络文件到空间中，如：</p>\n<p>  <img src=\"http://img.blog.csdn.net/20171017152757227?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"上传网络文件\"></p>\n<p>  然后点击开始上传即可</p>\n</li>\n</ul>\n<p><strong>2. 资源管理界面：</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20171017153112198?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"资源管理界面\"></p>\n<ul>\n<li><p>刷新列表</p>\n<p>  刷新当前存储空间的资源列表</p>\n</li>\n<li><p>复制链接</p>\n<p>  复制你选中文件的外链</p>\n</li>\n<li><p>删除文件</p>\n<p>  从存储空间中删除你选中的所有文件</p>\n</li>\n<li><p>移动文件</p>\n<p>  移动（或复制）选中的所有文件到指定的存储空间中（目前好像七牛还不支持跨区域移动文件）</p>\n<p>  <img src=\"http://img.blog.csdn.net/20171015222512819?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"移动文件界面\"></p>\n<blockquote>\n<p>说明：勾选“保存文件副本”时表示当前操作为复制，不勾选时表示移动（会删除本存储空间的文件），默认勾选。</p>\n</blockquote>\n</li>\n<li><p>生存时间</p>\n<p>  设置选中文件的生存时间，到期后七牛会自动删除这些文件</p>\n</li>\n<li><p>更新镜像</p>\n<p>  需要选中文件才能更新，但是这个功能我一直没有测试成功，不知道为什么</p>\n<blockquote>\n<p>官方解释：对于配置了镜像存储的空间，如果镜像源站更新了文件内容，则默认情况下，七牛不会再主动从客户镜像源站同步新的副本，这个时候就需要利用这个prefetch接口来主动地将空间中的文件和更新后的源站副本进行同步。</p>\n</blockquote>\n<p>  或许是我没有配置什么镜像存储吧</p>\n</li>\n<li><p>公有下载</p>\n<p>  直接下载选中的文件（私有的存储空间不可用）</p>\n</li>\n<li><p>私有下载</p>\n<p>  下载选中的私有存储空间的文件</p>\n</li>\n<li><p>打开文件</p>\n<p>  用浏览器打开你选中的文件</p>\n</li>\n<li><p>链接下载</p>\n<p>  由于这两天迅雷抽风了，下载出现BUG，所以提供了这样一个临时的下载方案，打开后直接输入链接即可下载</p>\n</li>\n<li><p>文件刷新</p>\n<p>  从七牛云镜像源刷新你选中的文件，保证用户下载的是最新上传的文件，而不是之前的旧版本（个人感觉和 <code>更新镜像</code> 是一样的）</p>\n</li>\n<li><p>日志下载</p>\n<p>  从七牛下载指定日期的操作日志</p>\n</li>\n</ul>\n<p><strong>说明：操作文件时，需要选中文件才能操作（支持多选）。由于下载私有空间的文件需要临时授权，所以文件的下载分为私有下载（生成临时授权然后下载文件）和公有下载（直接下载文件）。</strong></p>\n<p><strong>3. 其他</strong></p>\n<ul>\n<li><p><a href=\"http://oq3iwfipo.bkt.clouddn.com/tools/zhazhapan/qiniu.jar?v=3\" title=\"七牛云——对象存储管理工具jar包下载地址\" target=\"_blank\" rel=\"external\"><strong>下载可执行的jar包</strong></a></p>\n</li>\n<li><p><a href=\"https://github.com/zhazhapan/qiniu/releases\" target=\"_blank\" rel=\"external\"><strong>历史版本</strong></a> </p>\n</li>\n<li><p><a href=\"https://github.com/zhazhapan/qiniu\" title=\"七牛云——对象存储管理工具项目源码地址\" target=\"_blank\" rel=\"external\"><strong>项目源代码</strong></a></p>\n</li>\n<li><p><a href=\"https://developer.qiniu.com/kodo/sdk/1239/java\" target=\"_blank\" rel=\"external\"><strong>官方JavaSDK文档</strong></a></p>\n</li>\n</ul>\n","updated":"2017-10-18T03:37:39.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"qiniu","slug":"qiniu","permalink":"http://hexo.zhazhapan.com/tags/qiniu/"}]},{"title":"JavaFX Dialog对话框","date":"2017-10-12T07:41:26.000Z","path":"2017/10/12/JavaFX-Dialog对话框/","text":"1. 标准对话框 消息对话框123456Alert alert = new Alert(AlertType.INFORMATION);alert.setTitle(\"Information Dialog\");alert.setHeaderText(\"Look, an Information Dialog\");alert.setContentText(\"I have a great message for you!\");alert.showAndWait(); 没有标题的消息对话框123456Alert alert = new Alert(AlertType.INFORMATION);alert.setTitle(\"Information Dialog\");alert.setHeaderText(null);alert.setContentText(\"I have a great message for you!\");alert.showAndWait(); 2. 警告对话框123456Alert alert = new Alert(AlertType.WARNING);alert.setTitle(\"Warning Dialog\");alert.setHeaderText(\"Look, a Warning Dialog\");alert.setContentText(\"Careful with the next step!\");alert.showAndWait(); 3. 错误对话框123456Alert alert = new Alert(AlertType.ERROR);alert.setTitle(\"Error Dialog\");alert.setHeaderText(\"Look, an Error Dialog\");alert.setContentText(\"Ooops, there was an error!\");alert.showAndWait(); 4. 异常对话框这不是一个完整的异常对话框。但我们可以很容易地将 TextArea 作为可扩展的内容。123456789101112131415161718192021222324252627282930313233Alert alert = new Alert(AlertType.ERROR);alert.setTitle(\"Exception Dialog\");alert.setHeaderText(\"Look, an Exception Dialog\");alert.setContentText(\"Could not find file blabla.txt!\");Exception ex = new FileNotFoundException(\"Could not find file blabla.txt\");// Create expandable Exception.StringWriter sw = new StringWriter();PrintWriter pw = new PrintWriter(sw);ex.printStackTrace(pw);String exceptionText = sw.toString();Label label = new Label(\"The exception stacktrace was:\");TextArea textArea = new TextArea(exceptionText);textArea.setEditable(false);textArea.setWrapText(true);textArea.setMaxWidth(Double.MAX_VALUE);textArea.setMaxHeight(Double.MAX_VALUE);GridPane.setVgrow(textArea, Priority.ALWAYS);GridPane.setHgrow(textArea, Priority.ALWAYS);GridPane expContent = new GridPane();expContent.setMaxWidth(Double.MAX_VALUE);expContent.add(label, 0, 0);expContent.add(textArea, 0, 1);// Set expandable Exception into the dialog pane.alert.getDialogPane().setExpandableContent(expContent);alert.showAndWait(); 5. 确认对话框1234567891011Alert alert = new Alert(AlertType.CONFIRMATION);alert.setTitle(\"Confirmation Dialog\");alert.setHeaderText(\"Look, a Confirmation Dialog\");alert.setContentText(\"Are you ok with this?\");Optional&lt;ButtonType&gt; result = alert.showAndWait();if (result.get() == ButtonType.OK)&#123; // ... user chose OK&#125; else &#123; // ... user chose CANCEL or closed the dialog&#125; 6. 自定义确认对话框12345678910111213141516171819202122Alert alert = new Alert(AlertType.CONFIRMATION);alert.setTitle(\"Confirmation Dialog with Custom Actions\");alert.setHeaderText(\"Look, a Confirmation Dialog with Custom Actions\");alert.setContentText(\"Choose your option.\");ButtonType buttonTypeOne = new ButtonType(\"One\");ButtonType buttonTypeTwo = new ButtonType(\"Two\");ButtonType buttonTypeThree = new ButtonType(\"Three\");ButtonType buttonTypeCancel = new ButtonType(\"Cancel\", ButtonData.CANCEL_CLOSE);alert.getButtonTypes().setAll(buttonTypeOne, buttonTypeTwo, buttonTypeThree, buttonTypeCancel);Optional&lt;ButtonType&gt; result = alert.showAndWait();if (result.get() == buttonTypeOne)&#123; // ... user chose \"One\"&#125; else if (result.get() == buttonTypeTwo) &#123; // ... user chose \"Two\"&#125; else if (result.get() == buttonTypeThree) &#123; // ... user chose \"Three\"&#125; else &#123; // ... user chose CANCEL or closed the dialog&#125; 7. 可输入的对话框12345678910111213TextInputDialog dialog = new TextInputDialog(\"walter\");dialog.setTitle(\"Text Input Dialog\");dialog.setHeaderText(\"Look, a Text Input Dialog\");dialog.setContentText(\"Please enter your name:\");// Traditional way to get the response value.Optional&lt;String&gt; result = dialog.showAndWait();if (result.isPresent())&#123; System.out.println(\"Your name: \" + result.get());&#125;// The Java 8 way to get the response value (with lambda expression).result.ifPresent(name -&gt; System.out.println(\"Your name: \" + name)); 说明：如果用户点击了取消按钮result.isPresent()将会返回false 8. 可选择的对话框123456789101112131415161718List&lt;String&gt; choices = new ArrayList&lt;&gt;();choices.add(\"a\");choices.add(\"b\");choices.add(\"c\");ChoiceDialog&lt;String&gt; dialog = new ChoiceDialog&lt;&gt;(\"b\", choices);dialog.setTitle(\"Choice Dialog\");dialog.setHeaderText(\"Look, a Choice Dialog\");dialog.setContentText(\"Choose your letter:\");// Traditional way to get the response value.Optional&lt;String&gt; result = dialog.showAndWait();if (result.isPresent())&#123; System.out.println(\"Your choice: \" + result.get());&#125;// The Java 8 way to get the response value (with lambda expression).result.ifPresent(letter -&gt; System.out.println(\"Your choice: \" + letter)); 说明：如果用户没有选择或点击了取消，result.isPresent()将会返回false 9. 自定义登录框12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455// Create the custom dialog.Dialog&lt;Pair&lt;String, String&gt;&gt; dialog = new Dialog&lt;&gt;();dialog.setTitle(\"Login Dialog\");dialog.setHeaderText(\"Look, a Custom Login Dialog\");// Set the icon (must be included in the project).dialog.setGraphic(new ImageView(this.getClass().getResource(\"login.png\").toString()));// Set the button types.ButtonType loginButtonType = new ButtonType(\"Login\", ButtonData.OK_DONE);dialog.getDialogPane().getButtonTypes().addAll(loginButtonType, ButtonType.CANCEL);// Create the username and password labels and fields.GridPane grid = new GridPane();grid.setHgap(10);grid.setVgap(10);grid.setPadding(new Insets(20, 150, 10, 10));TextField username = new TextField();username.setPromptText(\"Username\");PasswordField password = new PasswordField();password.setPromptText(\"Password\");grid.add(new Label(\"Username:\"), 0, 0);grid.add(username, 1, 0);grid.add(new Label(\"Password:\"), 0, 1);grid.add(password, 1, 1);// Enable/Disable login button depending on whether a username was entered.Node loginButton = dialog.getDialogPane().lookupButton(loginButtonType);loginButton.setDisable(true);// Do some validation (using the Java 8 lambda syntax).username.textProperty().addListener((observable, oldValue, newValue) -&gt; &#123; loginButton.setDisable(newValue.trim().isEmpty());&#125;);dialog.getDialogPane().setContent(grid);// Request focus on the username field by default.Platform.runLater(() -&gt; username.requestFocus());// Convert the result to a username-password-pair when the login button is clicked.dialog.setResultConverter(dialogButton -&gt; &#123; if (dialogButton == loginButtonType) &#123; return new Pair&lt;&gt;(username.getText(), password.getText()); &#125; return null;&#125;);Optional&lt;Pair&lt;String, String&gt;&gt; result = dialog.showAndWait();result.ifPresent(usernamePassword -&gt; &#123; System.out.println(\"Username=\" + usernamePassword.getKey() + \", Password=\" + usernamePassword.getValue());&#125;); 10. 修改对话框样式 自定义图标12345// Get the Stage.Stage stage = (Stage) dialog.getDialogPane().getScene().getWindow();// Add a custom icon.stage.getIcons().add(new Image(this.getClass().getResource(\"login.png\").toString())); 说明：根据JavaFX 8u40最终版本的BUG报告，应该使用与它正在运行的应用程序相同的图标。在这种情况下，你还需要设置它的所有者，对话框会得到所有者的图标:1dialog.initOwner(otherStage); 不使用图标1dialog.initStyle(StageStyle.UTILITY); 11. 其他操作 设置拥有者你可以为每一个对话框指定所有者。如果指定所有者或拥有者为null，那么它是一个顶级的、未拥有的对话框。123456dialog.initOwner(parentWindow);``` - 设置模式你可以指定对话框的模式，包括`Modality.NONE`、`WINDOW_MODAL`或`Modality.APPLICATION_MODAL`。``` javadialog.initModality(Modality.NONE); 12. API 文档关于对话框的更多信息，请看JavaFX API官方文档: Alert Dialog TextInputDialog ChoiceDialog DialogPane 阅读原文点击这里","raw":"---\ntitle: JavaFX Dialog对话框\ndate: 2017-10-12 15:41:26\ntags: java javafx dialog\n---\n1. 标准对话框\n--------\n - **消息对话框**\n``` java\nAlert alert = new Alert(AlertType.INFORMATION);\nalert.setTitle(\"Information Dialog\");\nalert.setHeaderText(\"Look, an Information Dialog\");\nalert.setContentText(\"I have a great message for you!\");\n\nalert.showAndWait();\n```\n\n![information dialog](http://img.blog.csdn.net/20171012144601083?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n - **没有标题的消息对话框**\n``` java\nAlert alert = new Alert(AlertType.INFORMATION);\nalert.setTitle(\"Information Dialog\");\nalert.setHeaderText(null);\nalert.setContentText(\"I have a great message for you!\");\n\nalert.showAndWait();\n```\n\n![information dialog no header](http://img.blog.csdn.net/20171012144719712?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n2. 警告对话框\n---------\n``` java\nAlert alert = new Alert(AlertType.WARNING);\nalert.setTitle(\"Warning Dialog\");\nalert.setHeaderText(\"Look, a Warning Dialog\");\nalert.setContentText(\"Careful with the next step!\");\n\nalert.showAndWait();\n```\n\n![warning dialog](http://img.blog.csdn.net/20171012144949166?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n3. 错误对话框\n--------\n``` java\nAlert alert = new Alert(AlertType.ERROR);\nalert.setTitle(\"Error Dialog\");\nalert.setHeaderText(\"Look, an Error Dialog\");\nalert.setContentText(\"Ooops, there was an error!\");\n\nalert.showAndWait();\n```\n\n![error dialog](http://img.blog.csdn.net/20171012145044099?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n4. 异常对话框\n-------\n这不是一个完整的异常对话框。但我们可以很容易地将 `TextArea` 作为可扩展的内容。\n``` java\nAlert alert = new Alert(AlertType.ERROR);\nalert.setTitle(\"Exception Dialog\");\nalert.setHeaderText(\"Look, an Exception Dialog\");\nalert.setContentText(\"Could not find file blabla.txt!\");\n\nException ex = new FileNotFoundException(\"Could not find file blabla.txt\");\n\n// Create expandable Exception.\nStringWriter sw = new StringWriter();\nPrintWriter pw = new PrintWriter(sw);\nex.printStackTrace(pw);\nString exceptionText = sw.toString();\n\nLabel label = new Label(\"The exception stacktrace was:\");\n\nTextArea textArea = new TextArea(exceptionText);\ntextArea.setEditable(false);\ntextArea.setWrapText(true);\n\ntextArea.setMaxWidth(Double.MAX_VALUE);\ntextArea.setMaxHeight(Double.MAX_VALUE);\nGridPane.setVgrow(textArea, Priority.ALWAYS);\nGridPane.setHgrow(textArea, Priority.ALWAYS);\n\nGridPane expContent = new GridPane();\nexpContent.setMaxWidth(Double.MAX_VALUE);\nexpContent.add(label, 0, 0);\nexpContent.add(textArea, 0, 1);\n\n// Set expandable Exception into the dialog pane.\nalert.getDialogPane().setExpandableContent(expContent);\n\nalert.showAndWait();\n```\n![exception dialog](http://img.blog.csdn.net/20171012145457913?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n5. 确认对话框\n--------\n``` java\nAlert alert = new Alert(AlertType.CONFIRMATION);\nalert.setTitle(\"Confirmation Dialog\");\nalert.setHeaderText(\"Look, a Confirmation Dialog\");\nalert.setContentText(\"Are you ok with this?\");\n\nOptional<ButtonType> result = alert.showAndWait();\nif (result.get() == ButtonType.OK){\n    // ... user chose OK\n} else {\n    // ... user chose CANCEL or closed the dialog\n}\n```\n\n![confirmation dialog](http://img.blog.csdn.net/20171012145724063?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n6. 自定义确认对话框\n------------\n``` java\nAlert alert = new Alert(AlertType.CONFIRMATION);\nalert.setTitle(\"Confirmation Dialog with Custom Actions\");\nalert.setHeaderText(\"Look, a Confirmation Dialog with Custom Actions\");\nalert.setContentText(\"Choose your option.\");\n\nButtonType buttonTypeOne = new ButtonType(\"One\");\nButtonType buttonTypeTwo = new ButtonType(\"Two\");\nButtonType buttonTypeThree = new ButtonType(\"Three\");\nButtonType buttonTypeCancel = new ButtonType(\"Cancel\", ButtonData.CANCEL_CLOSE);\n\nalert.getButtonTypes().setAll(buttonTypeOne, buttonTypeTwo, buttonTypeThree, buttonTypeCancel);\n\nOptional<ButtonType> result = alert.showAndWait();\nif (result.get() == buttonTypeOne){\n    // ... user chose \"One\"\n} else if (result.get() == buttonTypeTwo) {\n    // ... user chose \"Two\"\n} else if (result.get() == buttonTypeThree) {\n    // ... user chose \"Three\"\n} else {\n    // ... user chose CANCEL or closed the dialog\n}\n```\n![custom action confirmation dialog](http://img.blog.csdn.net/20171012150009401?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n7. 可输入的对话框\n------\n``` java\nTextInputDialog dialog = new TextInputDialog(\"walter\");\ndialog.setTitle(\"Text Input Dialog\");\ndialog.setHeaderText(\"Look, a Text Input Dialog\");\ndialog.setContentText(\"Please enter your name:\");\n\n// Traditional way to get the response value.\nOptional<String> result = dialog.showAndWait();\nif (result.isPresent()){\n    System.out.println(\"Your name: \" + result.get());\n}\n\n// The Java 8 way to get the response value (with lambda expression).\nresult.ifPresent(name -> System.out.println(\"Your name: \" + name));\n```\n![text input dialog](http://img.blog.csdn.net/20171012150524109?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 说明：如果用户点击了取消按钮`result.isPresent()`将会返回false\n\n8. 可选择的对话框\n----------\n``` java\nList<String> choices = new ArrayList<>();\nchoices.add(\"a\");\nchoices.add(\"b\");\nchoices.add(\"c\");\n\nChoiceDialog<String> dialog = new ChoiceDialog<>(\"b\", choices);\ndialog.setTitle(\"Choice Dialog\");\ndialog.setHeaderText(\"Look, a Choice Dialog\");\ndialog.setContentText(\"Choose your letter:\");\n\n// Traditional way to get the response value.\nOptional<String> result = dialog.showAndWait();\nif (result.isPresent()){\n    System.out.println(\"Your choice: \" + result.get());\n}\n\n// The Java 8 way to get the response value (with lambda expression).\nresult.ifPresent(letter -> System.out.println(\"Your choice: \" + letter));\n```\n![choice dialog](http://img.blog.csdn.net/20171012150757770?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 说明：如果用户没有选择或点击了取消，`result.isPresent()`将会返回false\n\n9. 自定义登录框\n---------\n``` java\n// Create the custom dialog.\nDialog<Pair<String, String>> dialog = new Dialog<>();\ndialog.setTitle(\"Login Dialog\");\ndialog.setHeaderText(\"Look, a Custom Login Dialog\");\n\n// Set the icon (must be included in the project).\ndialog.setGraphic(new ImageView(this.getClass().getResource(\"login.png\").toString()));\n\n// Set the button types.\nButtonType loginButtonType = new ButtonType(\"Login\", ButtonData.OK_DONE);\ndialog.getDialogPane().getButtonTypes().addAll(loginButtonType, ButtonType.CANCEL);\n\n// Create the username and password labels and fields.\nGridPane grid = new GridPane();\ngrid.setHgap(10);\ngrid.setVgap(10);\ngrid.setPadding(new Insets(20, 150, 10, 10));\n\nTextField username = new TextField();\nusername.setPromptText(\"Username\");\nPasswordField password = new PasswordField();\npassword.setPromptText(\"Password\");\n\ngrid.add(new Label(\"Username:\"), 0, 0);\ngrid.add(username, 1, 0);\ngrid.add(new Label(\"Password:\"), 0, 1);\ngrid.add(password, 1, 1);\n\n// Enable/Disable login button depending on whether a username was entered.\nNode loginButton = dialog.getDialogPane().lookupButton(loginButtonType);\nloginButton.setDisable(true);\n\n// Do some validation (using the Java 8 lambda syntax).\nusername.textProperty().addListener((observable, oldValue, newValue) -> {\n    loginButton.setDisable(newValue.trim().isEmpty());\n});\n\ndialog.getDialogPane().setContent(grid);\n\n// Request focus on the username field by default.\nPlatform.runLater(() -> username.requestFocus());\n\n// Convert the result to a username-password-pair when the login button is clicked.\ndialog.setResultConverter(dialogButton -> {\n    if (dialogButton == loginButtonType) {\n        return new Pair<>(username.getText(), password.getText());\n    }\n    return null;\n});\n\nOptional<Pair<String, String>> result = dialog.showAndWait();\n\nresult.ifPresent(usernamePassword -> {\n    System.out.println(\"Username=\" + usernamePassword.getKey() + \", Password=\" + usernamePassword.getValue());\n});\n```\n![login dialog](http://img.blog.csdn.net/20171012151145160?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n10. 修改对话框样式\n-----------\n- **自定义图标**\n``` java\n// Get the Stage.\nStage stage = (Stage) dialog.getDialogPane().getScene().getWindow();\n\n// Add a custom icon.\nstage.getIcons().add(new Image(this.getClass().getResource(\"login.png\").toString()));\n```\n![custom icon](http://img.blog.csdn.net/20171012151651236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n说明：根据JavaFX 8u40最终版本的BUG报告，应该使用与它正在运行的应用程序相同的图标。在这种情况下，你还需要设置它的所有者，对话框会得到所有者的图标:\n``` java\ndialog.initOwner(otherStage);\n```\n- 不使用图标\n``` java\ndialog.initStyle(StageStyle.UTILITY);\n```\n![minimal](http://img.blog.csdn.net/20171012152131364?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n11. 其他操作\n--------\n- 设置拥有者\n你可以为每一个对话框指定所有者。如果指定所有者或拥有者为null，那么它是一个顶级的、未拥有的对话框。\n``` java\ndialog.initOwner(parentWindow);\n``` \n- 设置模式\n你可以指定对话框的模式，包括`Modality.NONE`、`WINDOW_MODAL`或`Modality.APPLICATION_MODAL`。\n``` java\ndialog.initModality(Modality.NONE);\n```\n\n12. API 文档\n----------\n关于对话框的更多信息，请看JavaFX API官方文档:\n\n- [Alert](http://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Alert.html)\n- [Dialog](http://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Dialog.html)\n- [TextInputDialog](http://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/TextInputDialog.html)\n- [ChoiceDialog](http://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/ChoiceDialog.html)\n- [DialogPane](http://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/DialogPane.html)\n\n> [阅读原文点击这里](http://code.makery.ch/blog/javafx-dialogs-official/)","content":"<h2 id=\"1-标准对话框\"><a href=\"#1-标准对话框\" class=\"headerlink\" title=\"1. 标准对话框\"></a>1. 标准对话框</h2><ul>\n<li><strong>消息对话框</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alert alert = <span class=\"keyword\">new</span> Alert(AlertType.INFORMATION);</div><div class=\"line\">alert.setTitle(<span class=\"string\">\"Information Dialog\"</span>);</div><div class=\"line\">alert.setHeaderText(<span class=\"string\">\"Look, an Information Dialog\"</span>);</div><div class=\"line\">alert.setContentText(<span class=\"string\">\"I have a great message for you!\"</span>);</div><div class=\"line\"></div><div class=\"line\">alert.showAndWait();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://img.blog.csdn.net/20171012144601083?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"information dialog\"></p>\n<ul>\n<li><strong>没有标题的消息对话框</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alert alert = <span class=\"keyword\">new</span> Alert(AlertType.INFORMATION);</div><div class=\"line\">alert.setTitle(<span class=\"string\">\"Information Dialog\"</span>);</div><div class=\"line\">alert.setHeaderText(<span class=\"keyword\">null</span>);</div><div class=\"line\">alert.setContentText(<span class=\"string\">\"I have a great message for you!\"</span>);</div><div class=\"line\"></div><div class=\"line\">alert.showAndWait();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://img.blog.csdn.net/20171012144719712?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"information dialog no header\"></p>\n<h2 id=\"2-警告对话框\"><a href=\"#2-警告对话框\" class=\"headerlink\" title=\"2. 警告对话框\"></a>2. 警告对话框</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alert alert = <span class=\"keyword\">new</span> Alert(AlertType.WARNING);</div><div class=\"line\">alert.setTitle(<span class=\"string\">\"Warning Dialog\"</span>);</div><div class=\"line\">alert.setHeaderText(<span class=\"string\">\"Look, a Warning Dialog\"</span>);</div><div class=\"line\">alert.setContentText(<span class=\"string\">\"Careful with the next step!\"</span>);</div><div class=\"line\"></div><div class=\"line\">alert.showAndWait();</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20171012144949166?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"warning dialog\"></p>\n<h2 id=\"3-错误对话框\"><a href=\"#3-错误对话框\" class=\"headerlink\" title=\"3. 错误对话框\"></a>3. 错误对话框</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alert alert = <span class=\"keyword\">new</span> Alert(AlertType.ERROR);</div><div class=\"line\">alert.setTitle(<span class=\"string\">\"Error Dialog\"</span>);</div><div class=\"line\">alert.setHeaderText(<span class=\"string\">\"Look, an Error Dialog\"</span>);</div><div class=\"line\">alert.setContentText(<span class=\"string\">\"Ooops, there was an error!\"</span>);</div><div class=\"line\"></div><div class=\"line\">alert.showAndWait();</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20171012145044099?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"error dialog\"></p>\n<h2 id=\"4-异常对话框\"><a href=\"#4-异常对话框\" class=\"headerlink\" title=\"4. 异常对话框\"></a>4. 异常对话框</h2><p>这不是一个完整的异常对话框。但我们可以很容易地将 <code>TextArea</code> 作为可扩展的内容。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alert alert = <span class=\"keyword\">new</span> Alert(AlertType.ERROR);</div><div class=\"line\">alert.setTitle(<span class=\"string\">\"Exception Dialog\"</span>);</div><div class=\"line\">alert.setHeaderText(<span class=\"string\">\"Look, an Exception Dialog\"</span>);</div><div class=\"line\">alert.setContentText(<span class=\"string\">\"Could not find file blabla.txt!\"</span>);</div><div class=\"line\"></div><div class=\"line\">Exception ex = <span class=\"keyword\">new</span> FileNotFoundException(<span class=\"string\">\"Could not find file blabla.txt\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Create expandable Exception.</span></div><div class=\"line\">StringWriter sw = <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">PrintWriter pw = <span class=\"keyword\">new</span> PrintWriter(sw);</div><div class=\"line\">ex.printStackTrace(pw);</div><div class=\"line\">String exceptionText = sw.toString();</div><div class=\"line\"></div><div class=\"line\">Label label = <span class=\"keyword\">new</span> Label(<span class=\"string\">\"The exception stacktrace was:\"</span>);</div><div class=\"line\"></div><div class=\"line\">TextArea textArea = <span class=\"keyword\">new</span> TextArea(exceptionText);</div><div class=\"line\">textArea.setEditable(<span class=\"keyword\">false</span>);</div><div class=\"line\">textArea.setWrapText(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\">textArea.setMaxWidth(Double.MAX_VALUE);</div><div class=\"line\">textArea.setMaxHeight(Double.MAX_VALUE);</div><div class=\"line\">GridPane.setVgrow(textArea, Priority.ALWAYS);</div><div class=\"line\">GridPane.setHgrow(textArea, Priority.ALWAYS);</div><div class=\"line\"></div><div class=\"line\">GridPane expContent = <span class=\"keyword\">new</span> GridPane();</div><div class=\"line\">expContent.setMaxWidth(Double.MAX_VALUE);</div><div class=\"line\">expContent.add(label, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">expContent.add(textArea, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Set expandable Exception into the dialog pane.</span></div><div class=\"line\">alert.getDialogPane().setExpandableContent(expContent);</div><div class=\"line\"></div><div class=\"line\">alert.showAndWait();</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20171012145457913?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"exception dialog\"></p>\n<h2 id=\"5-确认对话框\"><a href=\"#5-确认对话框\" class=\"headerlink\" title=\"5. 确认对话框\"></a>5. 确认对话框</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alert alert = <span class=\"keyword\">new</span> Alert(AlertType.CONFIRMATION);</div><div class=\"line\">alert.setTitle(<span class=\"string\">\"Confirmation Dialog\"</span>);</div><div class=\"line\">alert.setHeaderText(<span class=\"string\">\"Look, a Confirmation Dialog\"</span>);</div><div class=\"line\">alert.setContentText(<span class=\"string\">\"Are you ok with this?\"</span>);</div><div class=\"line\"></div><div class=\"line\">Optional&lt;ButtonType&gt; result = alert.showAndWait();</div><div class=\"line\"><span class=\"keyword\">if</span> (result.get() == ButtonType.OK)&#123;</div><div class=\"line\">    <span class=\"comment\">// ... user chose OK</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ... user chose CANCEL or closed the dialog</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20171012145724063?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"confirmation dialog\"></p>\n<h2 id=\"6-自定义确认对话框\"><a href=\"#6-自定义确认对话框\" class=\"headerlink\" title=\"6. 自定义确认对话框\"></a>6. 自定义确认对话框</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alert alert = <span class=\"keyword\">new</span> Alert(AlertType.CONFIRMATION);</div><div class=\"line\">alert.setTitle(<span class=\"string\">\"Confirmation Dialog with Custom Actions\"</span>);</div><div class=\"line\">alert.setHeaderText(<span class=\"string\">\"Look, a Confirmation Dialog with Custom Actions\"</span>);</div><div class=\"line\">alert.setContentText(<span class=\"string\">\"Choose your option.\"</span>);</div><div class=\"line\"></div><div class=\"line\">ButtonType buttonTypeOne = <span class=\"keyword\">new</span> ButtonType(<span class=\"string\">\"One\"</span>);</div><div class=\"line\">ButtonType buttonTypeTwo = <span class=\"keyword\">new</span> ButtonType(<span class=\"string\">\"Two\"</span>);</div><div class=\"line\">ButtonType buttonTypeThree = <span class=\"keyword\">new</span> ButtonType(<span class=\"string\">\"Three\"</span>);</div><div class=\"line\">ButtonType buttonTypeCancel = <span class=\"keyword\">new</span> ButtonType(<span class=\"string\">\"Cancel\"</span>, ButtonData.CANCEL_CLOSE);</div><div class=\"line\"></div><div class=\"line\">alert.getButtonTypes().setAll(buttonTypeOne, buttonTypeTwo, buttonTypeThree, buttonTypeCancel);</div><div class=\"line\"></div><div class=\"line\">Optional&lt;ButtonType&gt; result = alert.showAndWait();</div><div class=\"line\"><span class=\"keyword\">if</span> (result.get() == buttonTypeOne)&#123;</div><div class=\"line\">    <span class=\"comment\">// ... user chose \"One\"</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result.get() == buttonTypeTwo) &#123;</div><div class=\"line\">    <span class=\"comment\">// ... user chose \"Two\"</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result.get() == buttonTypeThree) &#123;</div><div class=\"line\">    <span class=\"comment\">// ... user chose \"Three\"</span></div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ... user chose CANCEL or closed the dialog</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20171012150009401?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"custom action confirmation dialog\"></p>\n<h2 id=\"7-可输入的对话框\"><a href=\"#7-可输入的对话框\" class=\"headerlink\" title=\"7. 可输入的对话框\"></a>7. 可输入的对话框</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">TextInputDialog dialog = <span class=\"keyword\">new</span> TextInputDialog(<span class=\"string\">\"walter\"</span>);</div><div class=\"line\">dialog.setTitle(<span class=\"string\">\"Text Input Dialog\"</span>);</div><div class=\"line\">dialog.setHeaderText(<span class=\"string\">\"Look, a Text Input Dialog\"</span>);</div><div class=\"line\">dialog.setContentText(<span class=\"string\">\"Please enter your name:\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Traditional way to get the response value.</span></div><div class=\"line\">Optional&lt;String&gt; result = dialog.showAndWait();</div><div class=\"line\"><span class=\"keyword\">if</span> (result.isPresent())&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"Your name: \"</span> + result.get());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The Java 8 way to get the response value (with lambda expression).</span></div><div class=\"line\">result.ifPresent(name -&gt; System.out.println(<span class=\"string\">\"Your name: \"</span> + name));</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20171012150524109?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"text input dialog\"></p>\n<blockquote>\n<p>说明：如果用户点击了取消按钮<code>result.isPresent()</code>将会返回false</p>\n</blockquote>\n<h2 id=\"8-可选择的对话框\"><a href=\"#8-可选择的对话框\" class=\"headerlink\" title=\"8. 可选择的对话框\"></a>8. 可选择的对话框</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">List&lt;String&gt; choices = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">choices.add(<span class=\"string\">\"a\"</span>);</div><div class=\"line\">choices.add(<span class=\"string\">\"b\"</span>);</div><div class=\"line\">choices.add(<span class=\"string\">\"c\"</span>);</div><div class=\"line\"></div><div class=\"line\">ChoiceDialog&lt;String&gt; dialog = <span class=\"keyword\">new</span> ChoiceDialog&lt;&gt;(<span class=\"string\">\"b\"</span>, choices);</div><div class=\"line\">dialog.setTitle(<span class=\"string\">\"Choice Dialog\"</span>);</div><div class=\"line\">dialog.setHeaderText(<span class=\"string\">\"Look, a Choice Dialog\"</span>);</div><div class=\"line\">dialog.setContentText(<span class=\"string\">\"Choose your letter:\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Traditional way to get the response value.</span></div><div class=\"line\">Optional&lt;String&gt; result = dialog.showAndWait();</div><div class=\"line\"><span class=\"keyword\">if</span> (result.isPresent())&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"Your choice: \"</span> + result.get());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The Java 8 way to get the response value (with lambda expression).</span></div><div class=\"line\">result.ifPresent(letter -&gt; System.out.println(<span class=\"string\">\"Your choice: \"</span> + letter));</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20171012150757770?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"choice dialog\"></p>\n<blockquote>\n<p>说明：如果用户没有选择或点击了取消，<code>result.isPresent()</code>将会返回false</p>\n</blockquote>\n<h2 id=\"9-自定义登录框\"><a href=\"#9-自定义登录框\" class=\"headerlink\" title=\"9. 自定义登录框\"></a>9. 自定义登录框</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Create the custom dialog.</span></div><div class=\"line\">Dialog&lt;Pair&lt;String, String&gt;&gt; dialog = <span class=\"keyword\">new</span> Dialog&lt;&gt;();</div><div class=\"line\">dialog.setTitle(<span class=\"string\">\"Login Dialog\"</span>);</div><div class=\"line\">dialog.setHeaderText(<span class=\"string\">\"Look, a Custom Login Dialog\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Set the icon (must be included in the project).</span></div><div class=\"line\">dialog.setGraphic(<span class=\"keyword\">new</span> ImageView(<span class=\"keyword\">this</span>.getClass().getResource(<span class=\"string\">\"login.png\"</span>).toString()));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Set the button types.</span></div><div class=\"line\">ButtonType loginButtonType = <span class=\"keyword\">new</span> ButtonType(<span class=\"string\">\"Login\"</span>, ButtonData.OK_DONE);</div><div class=\"line\">dialog.getDialogPane().getButtonTypes().addAll(loginButtonType, ButtonType.CANCEL);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Create the username and password labels and fields.</span></div><div class=\"line\">GridPane grid = <span class=\"keyword\">new</span> GridPane();</div><div class=\"line\">grid.setHgap(<span class=\"number\">10</span>);</div><div class=\"line\">grid.setVgap(<span class=\"number\">10</span>);</div><div class=\"line\">grid.setPadding(<span class=\"keyword\">new</span> Insets(<span class=\"number\">20</span>, <span class=\"number\">150</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>));</div><div class=\"line\"></div><div class=\"line\">TextField username = <span class=\"keyword\">new</span> TextField();</div><div class=\"line\">username.setPromptText(<span class=\"string\">\"Username\"</span>);</div><div class=\"line\">PasswordField password = <span class=\"keyword\">new</span> PasswordField();</div><div class=\"line\">password.setPromptText(<span class=\"string\">\"Password\"</span>);</div><div class=\"line\"></div><div class=\"line\">grid.add(<span class=\"keyword\">new</span> Label(<span class=\"string\">\"Username:\"</span>), <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">grid.add(username, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">grid.add(<span class=\"keyword\">new</span> Label(<span class=\"string\">\"Password:\"</span>), <span class=\"number\">0</span>, <span class=\"number\">1</span>);</div><div class=\"line\">grid.add(password, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Enable/Disable login button depending on whether a username was entered.</span></div><div class=\"line\">Node loginButton = dialog.getDialogPane().lookupButton(loginButtonType);</div><div class=\"line\">loginButton.setDisable(<span class=\"keyword\">true</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Do some validation (using the Java 8 lambda syntax).</span></div><div class=\"line\">username.textProperty().addListener((observable, oldValue, newValue) -&gt; &#123;</div><div class=\"line\">    loginButton.setDisable(newValue.trim().isEmpty());</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">dialog.getDialogPane().setContent(grid);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Request focus on the username field by default.</span></div><div class=\"line\">Platform.runLater(() -&gt; username.requestFocus());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Convert the result to a username-password-pair when the login button is clicked.</span></div><div class=\"line\">dialog.setResultConverter(dialogButton -&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (dialogButton == loginButtonType) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pair&lt;&gt;(username.getText(), password.getText());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Optional&lt;Pair&lt;String, String&gt;&gt; result = dialog.showAndWait();</div><div class=\"line\"></div><div class=\"line\">result.ifPresent(usernamePassword -&gt; &#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"Username=\"</span> + usernamePassword.getKey() + <span class=\"string\">\", Password=\"</span> + usernamePassword.getValue());</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20171012151145160?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"login dialog\"></p>\n<h2 id=\"10-修改对话框样式\"><a href=\"#10-修改对话框样式\" class=\"headerlink\" title=\"10. 修改对话框样式\"></a>10. 修改对话框样式</h2><ul>\n<li><strong>自定义图标</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Get the Stage.</span></div><div class=\"line\">Stage stage = (Stage) dialog.getDialogPane().getScene().getWindow();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Add a custom icon.</span></div><div class=\"line\">stage.getIcons().add(<span class=\"keyword\">new</span> Image(<span class=\"keyword\">this</span>.getClass().getResource(<span class=\"string\">\"login.png\"</span>).toString()));</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://img.blog.csdn.net/20171012151651236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"custom icon\"></p>\n<p>说明：根据JavaFX 8u40最终版本的BUG报告，应该使用与它正在运行的应用程序相同的图标。在这种情况下，你还需要设置它的所有者，对话框会得到所有者的图标:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dialog.initOwner(otherStage);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>不使用图标<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dialog.initStyle(StageStyle.UTILITY);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://img.blog.csdn.net/20171012152131364?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"minimal\"></p>\n<h2 id=\"11-其他操作\"><a href=\"#11-其他操作\" class=\"headerlink\" title=\"11. 其他操作\"></a>11. 其他操作</h2><ul>\n<li>设置拥有者<br>你可以为每一个对话框指定所有者。如果指定所有者或拥有者为null，那么它是一个顶级的、未拥有的对话框。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">dialog.initOwner(parentWindow);</div><div class=\"line\">``` </div><div class=\"line\">- 设置模式</div><div class=\"line\">你可以指定对话框的模式，包括`Modality.NONE`、`WINDOW_MODAL`或`Modality.APPLICATION_MODAL`。</div><div class=\"line\">``` java</div><div class=\"line\">dialog.initModality(Modality.NONE);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"12-API-文档\"><a href=\"#12-API-文档\" class=\"headerlink\" title=\"12. API 文档\"></a>12. API 文档</h2><p>关于对话框的更多信息，请看JavaFX API官方文档:</p>\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Alert.html\" target=\"_blank\" rel=\"external\">Alert</a></li>\n<li><a href=\"http://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Dialog.html\" target=\"_blank\" rel=\"external\">Dialog</a></li>\n<li><a href=\"http://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/TextInputDialog.html\" target=\"_blank\" rel=\"external\">TextInputDialog</a></li>\n<li><a href=\"http://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/ChoiceDialog.html\" target=\"_blank\" rel=\"external\">ChoiceDialog</a></li>\n<li><a href=\"http://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/DialogPane.html\" target=\"_blank\" rel=\"external\">DialogPane</a></li>\n</ul>\n<blockquote>\n<p><a href=\"http://code.makery.ch/blog/javafx-dialogs-official/\" target=\"_blank\" rel=\"external\">阅读原文点击这里</a></p>\n</blockquote>\n","updated":"2017-10-18T03:40:46.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"java javafx dialog","slug":"java-javafx-dialog","permalink":"http://hexo.zhazhapan.com/tags/java-javafx-dialog/"}]},{"title":"JavaFX HelloWord","date":"2017-10-11T15:08:38.000Z","path":"2017/10/11/JavaFX-HelloWord/","text":"1. 安装插件，e(fx)clipse 2. 新建JavaFX项目 3. 新建一个测试类，代码如下1234567891011121314151617181920212223242526import javafx.application.Application;import javafx.scene.Scene;import javafx.scene.control.Label;import javafx.scene.layout.GridPane;import javafx.stage.Stage;public class Test extends Application &#123; @Override public void start(Stage primaryStage) &#123; Label label = new Label(&quot;Hello JavaFX&quot;); GridPane gp = new GridPane(); gp.getChildren().add(label); Scene scene = new Scene(gp, 300, 300); primaryStage.setTitle(&quot;My First JavaFX&quot;); primaryStage.setScene(scene); primaryStage.show(); &#125; public static void main(String[] args) &#123; //启动JavaFX应用程序 launch(args); //Application.launch(args); &#125;&#125;","raw":"---\ntitle: JavaFX HelloWord\ndate: 2017-10-11 23:08:38\ntags: java javafx\n---\n**1. 安装插件，e(fx)clipse**\n\n![e(fx)clipse](http://img.blog.csdn.net/20171011225431899?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**2. 新建JavaFX项目**\n\n![javafx](http://img.blog.csdn.net/20171011225544316?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**3. 新建一个测试类，代码如下**\n```\nimport javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Label;\nimport javafx.scene.layout.GridPane;\nimport javafx.stage.Stage;\n\npublic class Test extends Application {\n\n\t@Override\n\tpublic void start(Stage primaryStage) {\n\t\tLabel label = new Label(\"Hello JavaFX\");\n\t\tGridPane gp = new GridPane();\n\t\tgp.getChildren().add(label);\n\t\tScene scene = new Scene(gp, 300, 300);\n\n\t\tprimaryStage.setTitle(\"My First JavaFX\");\n\t\tprimaryStage.setScene(scene);\n\t\tprimaryStage.show();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t//启动JavaFX应用程序\n\t\tlaunch(args);\n\t\t//Application.launch(args);\n\t}\n}\n```","content":"<p><strong>1. 安装插件，e(fx)clipse</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20171011225431899?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"e(fx)clipse\"></p>\n<p><strong>2. 新建JavaFX项目</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20171011225544316?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"javafx\"></p>\n<p><strong>3. 新建一个测试类，代码如下</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">import javafx.application.Application;</div><div class=\"line\">import javafx.scene.Scene;</div><div class=\"line\">import javafx.scene.control.Label;</div><div class=\"line\">import javafx.scene.layout.GridPane;</div><div class=\"line\">import javafx.stage.Stage;</div><div class=\"line\"></div><div class=\"line\">public class Test extends Application &#123;</div><div class=\"line\"></div><div class=\"line\">\t@Override</div><div class=\"line\">\tpublic void start(Stage primaryStage) &#123;</div><div class=\"line\">\t\tLabel label = new Label(&quot;Hello JavaFX&quot;);</div><div class=\"line\">\t\tGridPane gp = new GridPane();</div><div class=\"line\">\t\tgp.getChildren().add(label);</div><div class=\"line\">\t\tScene scene = new Scene(gp, 300, 300);</div><div class=\"line\"></div><div class=\"line\">\t\tprimaryStage.setTitle(&quot;My First JavaFX&quot;);</div><div class=\"line\">\t\tprimaryStage.setScene(scene);</div><div class=\"line\">\t\tprimaryStage.show();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\t//启动JavaFX应用程序</div><div class=\"line\">\t\tlaunch(args);</div><div class=\"line\">\t\t//Application.launch(args);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","updated":"2017-10-18T03:40:55.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"java javafx","slug":"java-javafx","permalink":"http://hexo.zhazhapan.com/tags/java-javafx/"}]},{"title":"使用sftp在Linux（MacOS）之间进行文件传输","date":"2017-10-10T15:25:32.000Z","path":"2017/10/10/使用sftp在Linux（MacOS）之间进行文件传输/","text":"1. 打开终端，连接远程Linux12sftp user@host例如：sftp root@192.168.1.2 2. 上传文件12put local_path remote_path例如：put -r /home/share/read.txt /home/root 3. 上传文件夹以文件夹里的所有内容 比如上传文件夹 folder，首先需要在远程机上创建这个文件夹，然后使用下面命令 put1put -r /home/share/folder/* /home/root/folder 4. 下载文件12get remote_path local_path例如：get -r /usr/local/some.zip /home/share 5. 下载文件夹以文件夹里的所有内容 比如下载文件夹 folder，首先需要在本机上创建这个文件夹，然后使用下面命令 get1get -r /usr/local/folder/* /home/share/folder 6. 退出1exit","raw":"---\ntitle: 使用sftp在Linux（MacOS）之间进行文件传输\ndate: 2017-10-10 23:25:32\ntags: linux sftp\n---\n**1. 打开终端，连接远程Linux**\n```\nsftp user@host\n例如：sftp root@192.168.1.2\n```\n**2. 上传文件**\n```\nput local_path remote_path\n例如：put -r /home/share/read.txt /home/root\n```\n**3. 上传文件夹以文件夹里的所有内容**\n\n比如上传文件夹 `folder`，首先需要在远程机上创建这个文件夹，然后使用下面命令 `put`\n```\nput -r /home/share/folder/* /home/root/folder\n```\n**4. 下载文件**\n```\nget remote_path local_path\n例如：get -r /usr/local/some.zip /home/share\n```\n**5. 下载文件夹以文件夹里的所有内容**\n\n比如下载文件夹 `folder`，首先需要在本机上创建这个文件夹，然后使用下面命令 `get`\n```\nget -r /usr/local/folder/* /home/share/folder\n```\n**6. 退出**\n```\nexit\n```","content":"<p><strong>1. 打开终端，连接远程Linux</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sftp user@host</div><div class=\"line\">例如：sftp root@192.168.1.2</div></pre></td></tr></table></figure></p>\n<p><strong>2. 上传文件</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">put local_path remote_path</div><div class=\"line\">例如：put -r /home/share/read.txt /home/root</div></pre></td></tr></table></figure></p>\n<p><strong>3. 上传文件夹以文件夹里的所有内容</strong></p>\n<p>比如上传文件夹 <code>folder</code>，首先需要在远程机上创建这个文件夹，然后使用下面命令 <code>put</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">put -r /home/share/folder/* /home/root/folder</div></pre></td></tr></table></figure></p>\n<p><strong>4. 下载文件</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">get remote_path local_path</div><div class=\"line\">例如：get -r /usr/local/some.zip /home/share</div></pre></td></tr></table></figure></p>\n<p><strong>5. 下载文件夹以文件夹里的所有内容</strong></p>\n<p>比如下载文件夹 <code>folder</code>，首先需要在本机上创建这个文件夹，然后使用下面命令 <code>get</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">get -r /usr/local/folder/* /home/share/folder</div></pre></td></tr></table></figure></p>\n<p><strong>6. 退出</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">exit</div></pre></td></tr></table></figure></p>\n","updated":"2017-10-18T03:37:59.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"linux sftp","slug":"linux-sftp","permalink":"http://hexo.zhazhapan.com/tags/linux-sftp/"}]},{"title":"代码生成器JHipster入门教程——安装","date":"2017-10-10T14:42:54.000Z","path":"2017/10/10/代码生成器JHipster入门教程——安装/","text":"JHipster是一个代码生成器，可以用来生成基于Spring Boot 和 AngularJS的项目 1. 安装 Node.js1sudo apt-get install node 2. 安装Git客户端1sudo apt-get install git 3. 安装\bnpm包管理器1sudo apt-get install npm 4. 安装Yeoman generator1npm install -g yo 5. 安装Bower1npm install -g bower 6. 安装Grunt1npm install -g grunt-cli 7. 安装Yarn12sudo apt-get updatesudo apt-get install yarn 8. 使用JHipster生成项目123mkdir hellocd helloyo jhipster 9. 接下来按照向导进行操作即可 到后面会有多项选择，使用空格选择或取消选择，a和i全选或全不选 接下来等待完成即可。 10. 修改数据库连接信息 进入目录src/main/resources/config找到配置文件application-dev.yml和application-prod.yml修改以下内容： 11. 运行项目1./mvnw","raw":"---\ntitle: 代码生成器JHipster入门教程——安装\ndate: 2017-10-10 22:42:54\ntags: java jhipster\n---\n**JHipster是一个代码生成器，可以用来生成基于Spring Boot 和 AngularJS的项目**\n\n**1. 安装 Node.js**\n```\nsudo apt-get install node\n```\n**2. 安装Git客户端**\n```\nsudo apt-get install git\n```\n**3. 安装\bnpm包管理器**\n```\nsudo apt-get install npm\n```\n**4. 安装Yeoman generator**\n```\nnpm install -g yo\n```\n**5. 安装Bower**\n```\nnpm install -g bower\n```\n**6. 安装Grunt**\n```\nnpm install -g grunt-cli\n```\n**7. 安装Yarn**\n```\nsudo apt-get update\nsudo apt-get install yarn\n```\n**8. 使用JHipster生成项目**\n```\nmkdir hello\ncd hello\nyo jhipster\n```\n**9. 接下来按照向导进行操作即可**\n\n![jhipster01](http://img.blog.csdn.net/20171010220454974?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 到后面会有多项选择，使用空格选择或取消选择，a和i全选或全不选\n\n![jhipster02](http://img.blog.csdn.net/20171010220840244?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![jhipster03](http://img.blog.csdn.net/20171010221239500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\t接下来等待完成即可。\n\n**10. 修改数据库连接信息**\n\n\t进入目录src/main/resources/config找到配置文件application-dev.yml和application-prod.yml修改以下内容：\n\n![database](http://img.blog.csdn.net/20171010222655034?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**11. 运行项目**\n```\n./mvnw\n```","content":"<p><strong>JHipster是一个代码生成器，可以用来生成基于Spring Boot 和 AngularJS的项目</strong></p>\n<p><strong>1. 安装 Node.js</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install node</div></pre></td></tr></table></figure></p>\n<p><strong>2. 安装Git客户端</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install git</div></pre></td></tr></table></figure></p>\n<p><strong>3. 安装\bnpm包管理器</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install npm</div></pre></td></tr></table></figure></p>\n<p><strong>4. 安装Yeoman generator</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g yo</div></pre></td></tr></table></figure></p>\n<p><strong>5. 安装Bower</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g bower</div></pre></td></tr></table></figure></p>\n<p><strong>6. 安装Grunt</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g grunt-cli</div></pre></td></tr></table></figure></p>\n<p><strong>7. 安装Yarn</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install yarn</div></pre></td></tr></table></figure></p>\n<p><strong>8. 使用JHipster生成项目</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir hello</div><div class=\"line\">cd hello</div><div class=\"line\">yo jhipster</div></pre></td></tr></table></figure></p>\n<p><strong>9. 接下来按照向导进行操作即可</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20171010220454974?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"jhipster01\"></p>\n<blockquote>\n<p>到后面会有多项选择，使用空格选择或取消选择，a和i全选或全不选</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20171010220840244?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"jhipster02\"></p>\n<p><img src=\"http://img.blog.csdn.net/20171010221239500?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"jhipster03\"></p>\n<pre><code>接下来等待完成即可。\n</code></pre><p><strong>10. 修改数据库连接信息</strong></p>\n<pre><code>进入目录src/main/resources/config找到配置文件application-dev.yml和application-prod.yml修改以下内容：\n</code></pre><p><img src=\"http://img.blog.csdn.net/20171010222655034?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"database\"></p>\n<p><strong>11. 运行项目</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./mvnw</div></pre></td></tr></table></figure></p>\n","updated":"2017-10-18T03:35:33.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"java jhipster","slug":"java-jhipster","permalink":"http://hexo.zhazhapan.com/tags/java-jhipster/"}]},{"title":"Eclipse插件推荐","date":"2017-09-30T10:42:37.000Z","path":"2017/09/30/Eclipse插件推荐/","text":"打开Eclipse Marketplace搜索插件名即可 Properties Editor：一个好用的属性编辑器 Class Decompiler：Java反编译插件 Color Theme：编辑器主题修改，有很多好看的主题 Darkest Dask Theme：Eclipse暗黑主题，很好看 Spring Tools：Spring开发必备工具 Subversion：版本管理 JBoss Tools：Hibernate开发必备 DevUtils：一个好用的开发者工具 FindBug：代码检查，默认是不触发，需要到设置里设置 Checkstyle：代码风格检查 QuickImage：可在Eclipse内查看图片 UML Designer：UML插件工具 pmd：代码分析工具 TestNG：单元测试工具 Maven Integration for Eclipse：Maven项目管理插件 DevStyle：美化Eclipse，请你的Eclipse和IntelliJ一样好看","raw":"---\ntitle: Eclipse插件推荐\ndate: 2017-09-30 18:42:37\ntags: eclipse\n---\n> 打开Eclipse Marketplace搜索插件名即可\n\n1. `Properties Editor`：一个好用的属性编辑器\n\n2. `Class Decompiler`：Java反编译插件\n\n3. `Color Theme`：编辑器主题修改，有很多好看的主题\n\n4. `Darkest Dask Theme`：Eclipse暗黑主题，很好看\n\n5. `Spring Tools`：Spring开发必备工具\n\n6. `Subversion`：版本管理\n\n7. `JBoss Tools`：Hibernate开发必备\n\n8. `DevUtils`：一个好用的开发者工具\n\n9. `FindBug`：代码检查，默认是不触发，需要到设置里设置\n\n10. `Checkstyle`：代码风格检查\n\n11. `QuickImage`：可在Eclipse内查看图片\n\n12. `UML Designer`：UML插件工具\n\n13. `pmd`：代码分析工具\n\n14. `TestNG`：单元测试工具\n\n15. `Maven Integration for Eclipse`：Maven项目管理插件\n\n16. `DevStyle`：美化Eclipse，请你的Eclipse和IntelliJ一样好看","content":"<blockquote>\n<p>打开Eclipse Marketplace搜索插件名即可</p>\n</blockquote>\n<ol>\n<li><p><code>Properties Editor</code>：一个好用的属性编辑器</p>\n</li>\n<li><p><code>Class Decompiler</code>：Java反编译插件</p>\n</li>\n<li><p><code>Color Theme</code>：编辑器主题修改，有很多好看的主题</p>\n</li>\n<li><p><code>Darkest Dask Theme</code>：Eclipse暗黑主题，很好看</p>\n</li>\n<li><p><code>Spring Tools</code>：Spring开发必备工具</p>\n</li>\n<li><p><code>Subversion</code>：版本管理</p>\n</li>\n<li><p><code>JBoss Tools</code>：Hibernate开发必备</p>\n</li>\n<li><p><code>DevUtils</code>：一个好用的开发者工具</p>\n</li>\n<li><p><code>FindBug</code>：代码检查，默认是不触发，需要到设置里设置</p>\n</li>\n<li><p><code>Checkstyle</code>：代码风格检查</p>\n</li>\n<li><p><code>QuickImage</code>：可在Eclipse内查看图片</p>\n</li>\n<li><p><code>UML Designer</code>：UML插件工具</p>\n</li>\n<li><p><code>pmd</code>：代码分析工具</p>\n</li>\n<li><p><code>TestNG</code>：单元测试工具</p>\n</li>\n<li><p><code>Maven Integration for Eclipse</code>：Maven项目管理插件</p>\n</li>\n<li><p><code>DevStyle</code>：美化Eclipse，请你的Eclipse和IntelliJ一样好看</p>\n</li>\n</ol>\n","updated":"2017-10-18T03:39:51.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"eclipse","slug":"eclipse","permalink":"http://hexo.zhazhapan.com/tags/eclipse/"}]},{"title":"Eclipse新建Spring Boot项目","date":"2017-09-30T10:39:51.000Z","path":"2017/09/30/Eclipse新建Spring-Boot项目/","text":"1. 下载Spring Tool Suite插件 2. 新建Spring Boot项目 3. 填写项目信息 4. 选择项目依赖 5. 完成项目新建 6. 添加一个测试控制器，代码如下1234567891011121314151617181920212223242526/** * */package com.zhazhapan.spring.springboot;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;/** * @author pantao * */@RestController@SpringBootApplication // 开启自动配置public class BootTestApplication &#123; @RequestMapping(&quot;/&quot;) String index() &#123; return &quot;Hello Spring Boot&quot;; &#125; public static void main(String[] args) &#123; SpringApplication.run(BootTestApplication.class, args); &#125;&#125; 7. 右键项目，选择Spring Boot App运行，并选择一个项目入口 8. 运行效果","raw":"---\ntitle: Eclipse新建Spring Boot项目\ndate: 2017-09-30 18:39:51\ntags: elipse java spring springboot\n---\n**1. 下载Spring Tool Suite插件**\n\n![\bspring tool suite](http://img.blog.csdn.net/20170925193715631?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**2. 新建Spring Boot项目**\n\n![\bspring starter project](http://img.blog.csdn.net/20170925193908949?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**3. 填写项目信息**\n\n![填写项目信息](http://img.blog.csdn.net/20170925194308898?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**4. 选择项目依赖**\n\n![项目依赖](http://img.blog.csdn.net/20170925194616038?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**5. 完成项目新建**\n\n![\b完成项目新建](http://img.blog.csdn.net/20170925194809527?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**6. 添加一个测试控制器，代码如下**\n```\n/**\n * \n */\npackage com.zhazhapan.spring.springboot;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author pantao\n *\n */\n@RestController\n@SpringBootApplication // 开启自动配置\npublic class BootTestApplication {\n\t@RequestMapping(\"/\")\n\tString index() {\n\t\treturn \"Hello Spring Boot\";\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(BootTestApplication.class, args);\n\t}\n}\n```\n**7. 右键项目，选择Spring Boot App运行，并选择一个项目入口**\n\n![\bspring boot app](http://img.blog.csdn.net/20170925214045257?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![\brun](http://img.blog.csdn.net/20170925214549614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**8. 运行效果**\n\n![运行效果](http://img.blog.csdn.net/20170925213649015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n","content":"<p><strong>1. 下载Spring Tool Suite插件</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20170925193715631?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\bspring tool suite\"></p>\n<p><strong>2. 新建Spring Boot项目</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20170925193908949?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\bspring starter project\"></p>\n<p><strong>3. 填写项目信息</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20170925194308898?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"填写项目信息\"></p>\n<p><strong>4. 选择项目依赖</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20170925194616038?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"项目依赖\"></p>\n<p><strong>5. 完成项目新建</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20170925194809527?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\b完成项目新建\"></p>\n<p><strong>6. 添加一个测试控制器，代码如下</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * </div><div class=\"line\"> */</div><div class=\"line\">package com.zhazhapan.spring.springboot;</div><div class=\"line\"></div><div class=\"line\">import org.springframework.boot.SpringApplication;</div><div class=\"line\">import org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</div><div class=\"line\">import org.springframework.web.bind.annotation.RestController;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * @author pantao</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">@RestController</div><div class=\"line\">@SpringBootApplication // 开启自动配置</div><div class=\"line\">public class BootTestApplication &#123;</div><div class=\"line\">\t@RequestMapping(&quot;/&quot;)</div><div class=\"line\">\tString index() &#123;</div><div class=\"line\">\t\treturn &quot;Hello Spring Boot&quot;;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\tSpringApplication.run(BootTestApplication.class, args);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>7. 右键项目，选择Spring Boot App运行，并选择一个项目入口</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20170925214045257?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\bspring boot app\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170925214549614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\brun\"></p>\n<p><strong>8. 运行效果</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20170925213649015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"运行效果\"></p>\n","updated":"2017-10-18T03:40:14.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"elipse java spring springboot","slug":"elipse-java-spring-springboot","permalink":"http://hexo.zhazhapan.com/tags/elipse-java-spring-springboot/"}]},{"title":"VMware Workstation 14永久激活密钥","date":"2017-09-30T10:38:36.000Z","path":"2017/09/30/VMware-Workstation-14永久激活密钥/","text":"VMware Workstation是一款功能强大的桌面虚拟计算机软件，简单来说就是最强的中文虚拟机了，可以在桌面上运行不同的操作系统，下面就把VMware Workstation 14的激活密钥分享给大家！ VMware workstation 14永久激活密钥分享： CG54H-D8D0H-H8DHY-C6X7X-N2KG6 ZC3WK-AFXEK-488JP-A7MQX-XL8YF AC5XK-0ZD4H-088HP-9NQZV-ZG2R4 ZC5XK-A6E0M-080XQ-04ZZG-YF08D ZY5H0-D3Y8K-M89EZ-AYPEG-MYUA8 FF590-2DX83-M81LZ-XDM7E-MKUT4 FF31K-AHZD1-H8ETZ-8WWEZ-WUUVA CV7T2-6WY5Q-48EWP-ZXY7X-QGUWD AALYG-20HVE-WHQ13-67MUP-XVMF3","raw":"---\ntitle: VMware Workstation 14永久激活密钥\ndate: 2017-09-30 18:38:36\ntags: vmware\n---\n\nVMware Workstation是一款功能强大的桌面虚拟计算机软件，简单来说就是最强的中文虚拟机了，可以在桌面上运行不同的操作系统，下面就把VMware Workstation 14的激活密钥分享给大家！\n\n**VMware workstation 14永久激活密钥分享：**\n\n\tCG54H-D8D0H-H8DHY-C6X7X-N2KG6\n\n\tZC3WK-AFXEK-488JP-A7MQX-XL8YF\n\n\tAC5XK-0ZD4H-088HP-9NQZV-ZG2R4\n\n\tZC5XK-A6E0M-080XQ-04ZZG-YF08D\n\n\tZY5H0-D3Y8K-M89EZ-AYPEG-MYUA8\n\n\tFF590-2DX83-M81LZ-XDM7E-MKUT4\n\n\tFF31K-AHZD1-H8ETZ-8WWEZ-WUUVA\n\n\tCV7T2-6WY5Q-48EWP-ZXY7X-QGUWD\n\t\n\tAALYG-20HVE-WHQ13-67MUP-XVMF3\n\n","content":"<p>VMware Workstation是一款功能强大的桌面虚拟计算机软件，简单来说就是最强的中文虚拟机了，可以在桌面上运行不同的操作系统，下面就把VMware Workstation 14的激活密钥分享给大家！</p>\n<p><strong>VMware workstation 14永久激活密钥分享：</strong></p>\n<pre><code>CG54H-D8D0H-H8DHY-C6X7X-N2KG6\n\nZC3WK-AFXEK-488JP-A7MQX-XL8YF\n\nAC5XK-0ZD4H-088HP-9NQZV-ZG2R4\n\nZC5XK-A6E0M-080XQ-04ZZG-YF08D\n\nZY5H0-D3Y8K-M89EZ-AYPEG-MYUA8\n\nFF590-2DX83-M81LZ-XDM7E-MKUT4\n\nFF31K-AHZD1-H8ETZ-8WWEZ-WUUVA\n\nCV7T2-6WY5Q-48EWP-ZXY7X-QGUWD\n\nAALYG-20HVE-WHQ13-67MUP-XVMF3\n</code></pre>","updated":"2017-10-18T03:41:30.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"vmware","slug":"vmware","permalink":"http://hexo.zhazhapan.com/tags/vmware/"}]},{"title":"MacOS安装Docker","date":"2017-09-30T10:34:33.000Z","path":"2017/09/30/MacOS安装Docker/","text":"1. \b下载Docker for Mac 2. 系统要求，只有在满足以下需求的情况下，Docker才会启动 Mac必须是2010年或更新的型号，英特尔的硬件支持内存管理单元(MMU)虚拟化。即扩展页表(概念)和不受限制的模式。 OS X El Capitan 10.11和更新的macOS版本。至少，对于Mac来说，Docker需要macOS Yosemite的10.10.3或更新的版本。 从Docker开始，Mac稳定版本1.13(即将发布)和并行发布版本，我们将不再讨论OS X Yosemite 10.10所特有的问题。在未来的版本中，由于Mac OS X版本的弃用，Mac版的Docker可能会停止在OS X Yosemite上的工作。我们建议升级到最新版的macOS。 至少4GB的内存 在版本4.3.30之前的VirtualBox不能安装(它与此版本的Docker不兼容)。如果你安装了一个新版本的VirtualBox，是可以的。 3. 安装Docker。双击Docker.dmg，运行即可。 4. 运行Docker，首次运行Docker需要请求权限，确定并输入密码即可 5. 启动一个Web服务，在终端执行以下命令：123docker run -d -p 80:80 --name webserver nginx#停止运行服务执行命令 `docker stop webserver` 即可#再次运行执行命令 `docker start webserver` 即可 访问localhost看到如下内容表示Docker安装成功： 7. 查看Docker运行的容器可执行以下命令1234docker ps -l #或docker ps -a#退出并删除容器可执行以下命令docker kill &lt;CONTAINER ID&gt;docker rm &lt;CONTAINER ID&gt; 8. 停止并删除Web服务器，可执行以下命令12docker stop webserverdocker rm webserver 参考自Docker for Mac官方文档","raw":"---\ntitle: 'MacOS安装Docker'\ndate: 2017-09-30 18:34:33\ntags: mac docker\n---\n**1. [\b下载Docker for Mac](https://download.docker.com/mac/stable/Docker.dmg \"下载Docker for mac\")**\n\n**2. 系统要求，只有在满足以下需求的情况下，Docker才会启动**\n\n - Mac必须是2010年或更新的型号，英特尔的硬件支持内存管理单元(MMU)虚拟化。即扩展页表(概念)和不受限制的模式。\n \n - OS X El Capitan 10.11和更新的macOS版本。至少，对于Mac来说，Docker需要macOS Yosemite的10.10.3或更新的版本。\n \n - 从Docker开始，Mac稳定版本1.13(即将发布)和并行发布版本，我们将不再讨论OS X Yosemite 10.10所特有的问题。在未来的版本中，由于Mac OS X版本的弃用，Mac版的Docker可能会停止在OS X Yosemite上的工作。我们建议升级到最新版的macOS。\n \n - 至少4GB的内存\n \n - 在版本4.3.30之前的VirtualBox不能安装(它与此版本的Docker不兼容)。如果你安装了一个新版本的VirtualBox，是可以的。\n\n**3. 安装Docker。双击Docker.dmg，运行即可。**\n\n**4. 运行Docker，首次运行Docker需要请求权限，确定并输入密码即可**\n\n![Docker](http://img.blog.csdn.net/20170929162142852?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![Docker](http://img.blog.csdn.net/20170929162235325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**5. 启动一个Web服务，在终端执行以下命令：**\n``` bash\ndocker run -d -p 80:80 --name webserver nginx\n#停止运行服务执行命令 `docker stop webserver` 即可\n#再次运行执行命令 `docker start webserver` 即可\n```\n访问localhost看到如下内容表示Docker安装成功：\n\n![Docker](http://img.blog.csdn.net/20170929162926173?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n**7. 查看Docker运行的容器可执行以下命令**\n``` bash\ndocker ps -l\t#或docker ps -a\n#退出并删除容器可执行以下命令\ndocker kill <CONTAINER ID>\ndocker rm <CONTAINER ID>\n```\n**8. 停止并删除Web服务器，可执行以下命令**\n``` bash\ndocker stop webserver\ndocker rm webserver\n```\n\n> [参考自Docker for Mac官方文档](https://docs.docker.com/docker-for-mac/ \"Docker for Mac官方文档\")","content":"<p><strong>1. <a href=\"https://download.docker.com/mac/stable/Docker.dmg\" title=\"下载Docker for mac\" target=\"_blank\" rel=\"external\">\b下载Docker for Mac</a></strong></p>\n<p><strong>2. 系统要求，只有在满足以下需求的情况下，Docker才会启动</strong></p>\n<ul>\n<li><p>Mac必须是2010年或更新的型号，英特尔的硬件支持内存管理单元(MMU)虚拟化。即扩展页表(概念)和不受限制的模式。</p>\n</li>\n<li><p>OS X El Capitan 10.11和更新的macOS版本。至少，对于Mac来说，Docker需要macOS Yosemite的10.10.3或更新的版本。</p>\n</li>\n<li><p>从Docker开始，Mac稳定版本1.13(即将发布)和并行发布版本，我们将不再讨论OS X Yosemite 10.10所特有的问题。在未来的版本中，由于Mac OS X版本的弃用，Mac版的Docker可能会停止在OS X Yosemite上的工作。我们建议升级到最新版的macOS。</p>\n</li>\n<li><p>至少4GB的内存</p>\n</li>\n<li><p>在版本4.3.30之前的VirtualBox不能安装(它与此版本的Docker不兼容)。如果你安装了一个新版本的VirtualBox，是可以的。</p>\n</li>\n</ul>\n<p><strong>3. 安装Docker。双击Docker.dmg，运行即可。</strong></p>\n<p><strong>4. 运行Docker，首次运行Docker需要请求权限，确定并输入密码即可</strong></p>\n<p><img src=\"http://img.blog.csdn.net/20170929162142852?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"Docker\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170929162235325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"Docker\"></p>\n<p><strong>5. 启动一个Web服务，在终端执行以下命令：</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -d -p 80:80 --name webserver nginx</div><div class=\"line\"><span class=\"comment\">#停止运行服务执行命令 `docker stop webserver` 即可</span></div><div class=\"line\"><span class=\"comment\">#再次运行执行命令 `docker start webserver` 即可</span></div></pre></td></tr></table></figure></p>\n<p>访问localhost看到如下内容表示Docker安装成功：</p>\n<p><img src=\"http://img.blog.csdn.net/20170929162926173?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY5NTQ3NzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"Docker\"></p>\n<p><strong>7. 查看Docker运行的容器可执行以下命令</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker ps -l\t<span class=\"comment\">#或docker ps -a</span></div><div class=\"line\"><span class=\"comment\">#退出并删除容器可执行以下命令</span></div><div class=\"line\">docker <span class=\"built_in\">kill</span> &lt;CONTAINER ID&gt;</div><div class=\"line\">docker rm &lt;CONTAINER ID&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>8. 停止并删除Web服务器，可执行以下命令</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker stop webserver</div><div class=\"line\">docker rm webserver</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><a href=\"https://docs.docker.com/docker-for-mac/\" title=\"Docker for Mac官方文档\" target=\"_blank\" rel=\"external\">参考自Docker for Mac官方文档</a></p>\n</blockquote>\n","updated":"2017-10-18T03:41:17.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[{"name":"mac docker","slug":"mac-docker","permalink":"http://hexo.zhazhapan.com/tags/mac-docker/"}]},{"title":"Hello World","date":"2017-09-29T14:38:18.000Z","path":"2017/09/29/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","updated":"2017-09-29T14:38:18.000Z","comments":true,"link":"","excerpt":"","categories":[],"tags":[]}]}